<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ReferenceGroup_FailedToLoadAssembly" xml:space="preserve">
    <value>Shared assembly '{0}' could not be loaded. If this is a referenced project, please make sure that you have built the project first.</value>
  </data>
  <data name="ReferenceGroup_EmptyProtocol" xml:space="preserve">
    <value>Protocol must be specified.</value>
  </data>
  <data name="ReferenceGroup_FieldDefinedDifferentlyInDuplicatedMessage" xml:space="preserve">
    <value>The message part '{0}' in message contract '{1}' is different in '{2}' and '{3}'.</value>
  </data>
  <data name="DataService_MoreThanOneMetadataFile" xml:space="preserve">
    <value>The specified .datasvcmap file at '{0}' has more than one metadata file in it. That is not supported by the system.</value>
  </data>
  <data name="ReferenceGroup_AppendLinePosition" xml:space="preserve">
    <value>{0} Line {1}, position {2}.</value>
  </data>
  <data name="ReferenceGroup_EmptyAddress" xml:space="preserve">
    <value>Address must be specified.</value>
  </data>
  <data name="ReferenceGroup_ServiceContractMappingMissMatch" xml:space="preserve">
    <value>The type '{0}' in the service contract mapping has different TargetNamespace('{1}') and Name('{2}') than the TargetNamespace('{3}') and Name('{4}') in the service reference file.</value>
  </data>
  <data name="ReferenceGroup_OperationDefinedInOneOfDuplicatedServiceContract" xml:space="preserve">
    <value>The service contract '{0}' is defined in both '{1}' and '{2}', but only one of them contains the operation '{3}'.</value>
  </data>
  <data name="ReferenceGroup_SharedTypeMustBePublic" xml:space="preserve">
    <value>The type '{0}' cannot be used in type sharing because it is not public.</value>
  </data>
  <data name="ReferenceGroup_DuplicatedSchemaItemsIgnored" xml:space="preserve">
    <value>The global {0} ('{1}') has been defined in both '{2}' and '{3}'. The difference between them ('{4}') is ignored.</value>
  </data>
  <data name="ReferenceGroup_InvalidFileName" xml:space="preserve">
    <value>'{0}' is invalid file name.  Absolute or relative path is not supported.</value>
  </data>
  <data name="ReferenceGroup_FieldDefinedInOneOfDuplicatedMessage" xml:space="preserve">
    <value>The message contract '{0}' is defined in both '{1}' and '{2}', but only one contains message part '{3}'.</value>
  </data>
  <data name="ReferenceGroup_OperationDefinedDifferently" xml:space="preserve">
    <value>The operation '{0}' in service contract '{1}' is different in '{2}' and '{3}'. Check the input, output and fault messages of the operation.</value>
  </data>
  <data name="ReferenceGroup_DataContractExcludedAndIncluded" xml:space="preserve">
    <value>The type '{0}' is listed as a shared data contract type, but is also listed in the type sharing exclusion list.</value>
  </data>
  <data name="ReferenceGroup_DuplicatedSchemaItems" xml:space="preserve">
    <value>The global {0} ('{1}') has been defined in both '{2}' and '{3}'. They are different at '{4}'.</value>
  </data>
  <data name="ReferenceGroup_FailedToGenerateCode" xml:space="preserve">
    <value>Failed to generate code for the service reference '{0}'.
{1}</value>
  </data>
  <data name="DataService_NoMetadataFiles" xml:space="preserve">
    <value>No metadata files found or failed to load them for data service '{0}'.</value>
  </data>
  <data name="ReferenceGroup_InvalidSourceId" xml:space="preserve">
    <value>SourceId of a metadata source should be a positive integer.</value>
  </data>
  <data name="ReferenceGroup_TwoExternalFilesWithSameName" xml:space="preserve">
    <value>Two metadata items or extension items in the .svcmap file have the same file name '{0}'.</value>
  </data>
</root>