//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3 2024-08-01 21:01:34

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


    using System;
    using System.Text;
    using WebGrease.Css.Ast;


using System.Collections.Generic;
using Antlr.Runtime;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  WebGrease.Css 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class CssParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "ANGLE", "ATIDENTIFIER", "ATTRIBIDENTIFIER", "ATTRIBNAME", "ATTRIBOPERATOR", "ATTRIBOPERATORVALUE", "ATTRIBVALUE", "AT_NAME", "CHARSET", "CHARSET_SYM", "CIRCLE_BEGIN", "CIRCLE_END", "CLASSIDENTIFIER", "CLASS_IDENT", "COLON", "COLONS", "COMBINATOR", "COMBINATOR_SIMPLE_SELECTOR", "COMBINATOR_SIMPLE_SELECTOR_SEQUENCES", "COMMA", "CURLY_BEGIN", "CURLY_END", "DASHMATCH", "DECLARATION", "DECLARATIONS", "DIMENSION", "DOCUMENT", "DOCUMENT_MATCHNAME", "DOCUMENT_SYM", "DOCUMENT_SYMBOL", "DOMAIN_FUNCTION", "ELEMENT_NAME", "EQUALS", "EXPR", "FORWARD_SLASH", "FREQ", "FROM", "FUNCTIONAL_PSEUDO", "FUNCTIONBASEDVALUE", "FUNCTIONNAME", "FUNCTIONPARAM", "GREATER", "HASHCLASSATNAMEATTRIBPSEUDONEGATION", "HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES", "HASHIDENTIFIER", "HASH_IDENT", "HEXBASEDVALUE", "IDENT", "IDENTBASEDVALUE", "IMPORT", "IMPORTANT", "IMPORTANT_COMMENTS", "IMPORTANT_SYM", "IMPORTS", "IMPORT_SYM", "INCLUDES", "KEYFRAMES", "KEYFRAMES_BLOCK", "KEYFRAMES_BLOCKS", "KEYFRAMES_SELECTOR", "KEYFRAMES_SELECTORS", "KEYFRAMES_SYM", "KEYFRAMES_SYMBOL", "LENGTH", "MEDIA", "MEDIA_EXPRESSION", "MEDIA_EXPRESSIONS", "MEDIA_FEATURE", "MEDIA_QUERY", "MEDIA_QUERY_LIST", "MEDIA_SYM", "MEDIA_TYPE", "MINUS", "MSIE_EXPRESSION", "MSIE_IMAGE_TRANSFORM", "NAMESPACE", "NAMESPACES", "NAMESPACE_PREFIX", "NAMESPACE_SYM", "NEGATIONIDENTIFIER", "NEGATION_ARG", "NOT", "NOT_TEXT", "NUMBER", "NUMBERBASEDVALUE", "ONLY", "ONLY_TEXT", "OPERATOR", "PAGE", "PAGE_SYM", "PERCENTAGE", "PIPE", "PLUS", "PREFIXMATCH", "PROPERTY", "PSEUDOIDENTIFIER", "PSEUDONAME", "PSEUDO_PAGE", "REGEXP_FUNCTION", "RELATIVELENGTH", "REPLACEMENT", "REPLACEMENTTOKEN", "REPLACEMENTTOKENBASEDVALUE", "REPLACEMENTTOKENIDENTIFIER", "RESOLUTION", "RULESET", "RULESETS", "S", "SELECTOR", "SELECTORS_GROUP", "SELECTOR_EXPRESSION", "SELECTOR_NAMESPACE_PREFIX", "SEMICOLON", "SIMPLE_SELECTOR_SEQUENCE", "SPEECH", "SQUARE_BEGIN", "SQUARE_END", "STAR", "STAR_TEXT", "STRING", "STRINGBASEDVALUE", "STYLESHEET", "SUBSTRINGMATCH", "SUFFIXMATCH", "TERM", "TERMWITHOPERATOR", "TERMWITHOPERATORS", "TILDE", "TIME", "TO", "TYPE_SELECTOR", "UNARY", "UNIVERSAL", "URI", "URIBASEDVALUE", "URIHASH", "URLPREFIX_FUNCTION", "WG_DPI", "WG_DPI_SYM", "WHITESPACE", "WS"
	};
	public const int EOF=-1;
	public const int AND=4;
	public const int ANGLE=5;
	public const int ATIDENTIFIER=6;
	public const int ATTRIBIDENTIFIER=7;
	public const int ATTRIBNAME=8;
	public const int ATTRIBOPERATOR=9;
	public const int ATTRIBOPERATORVALUE=10;
	public const int ATTRIBVALUE=11;
	public const int AT_NAME=12;
	public const int CHARSET=13;
	public const int CHARSET_SYM=14;
	public const int CIRCLE_BEGIN=15;
	public const int CIRCLE_END=16;
	public const int CLASSIDENTIFIER=17;
	public const int CLASS_IDENT=18;
	public const int COLON=19;
	public const int COLONS=20;
	public const int COMBINATOR=21;
	public const int COMBINATOR_SIMPLE_SELECTOR=22;
	public const int COMBINATOR_SIMPLE_SELECTOR_SEQUENCES=23;
	public const int COMMA=24;
	public const int CURLY_BEGIN=25;
	public const int CURLY_END=26;
	public const int DASHMATCH=27;
	public const int DECLARATION=28;
	public const int DECLARATIONS=29;
	public const int DIMENSION=30;
	public const int DOCUMENT=31;
	public const int DOCUMENT_MATCHNAME=32;
	public const int DOCUMENT_SYM=33;
	public const int DOCUMENT_SYMBOL=34;
	public const int DOMAIN_FUNCTION=35;
	public const int ELEMENT_NAME=36;
	public const int EQUALS=37;
	public const int EXPR=38;
	public const int FORWARD_SLASH=39;
	public const int FREQ=40;
	public const int FROM=41;
	public const int FUNCTIONAL_PSEUDO=42;
	public const int FUNCTIONBASEDVALUE=43;
	public const int FUNCTIONNAME=44;
	public const int FUNCTIONPARAM=45;
	public const int GREATER=46;
	public const int HASHCLASSATNAMEATTRIBPSEUDONEGATION=47;
	public const int HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES=48;
	public const int HASHIDENTIFIER=49;
	public const int HASH_IDENT=50;
	public const int HEXBASEDVALUE=51;
	public const int IDENT=52;
	public const int IDENTBASEDVALUE=53;
	public const int IMPORT=54;
	public const int IMPORTANT=55;
	public const int IMPORTANT_COMMENTS=56;
	public const int IMPORTANT_SYM=57;
	public const int IMPORTS=58;
	public const int IMPORT_SYM=59;
	public const int INCLUDES=60;
	public const int KEYFRAMES=61;
	public const int KEYFRAMES_BLOCK=62;
	public const int KEYFRAMES_BLOCKS=63;
	public const int KEYFRAMES_SELECTOR=64;
	public const int KEYFRAMES_SELECTORS=65;
	public const int KEYFRAMES_SYM=66;
	public const int KEYFRAMES_SYMBOL=67;
	public const int LENGTH=68;
	public const int MEDIA=69;
	public const int MEDIA_EXPRESSION=70;
	public const int MEDIA_EXPRESSIONS=71;
	public const int MEDIA_FEATURE=72;
	public const int MEDIA_QUERY=73;
	public const int MEDIA_QUERY_LIST=74;
	public const int MEDIA_SYM=75;
	public const int MEDIA_TYPE=76;
	public const int MINUS=77;
	public const int MSIE_EXPRESSION=78;
	public const int MSIE_IMAGE_TRANSFORM=79;
	public const int NAMESPACE=80;
	public const int NAMESPACES=81;
	public const int NAMESPACE_PREFIX=82;
	public const int NAMESPACE_SYM=83;
	public const int NEGATIONIDENTIFIER=84;
	public const int NEGATION_ARG=85;
	public const int NOT=86;
	public const int NOT_TEXT=87;
	public const int NUMBER=88;
	public const int NUMBERBASEDVALUE=89;
	public const int ONLY=90;
	public const int ONLY_TEXT=91;
	public const int OPERATOR=92;
	public const int PAGE=93;
	public const int PAGE_SYM=94;
	public const int PERCENTAGE=95;
	public const int PIPE=96;
	public const int PLUS=97;
	public const int PREFIXMATCH=98;
	public const int PROPERTY=99;
	public const int PSEUDOIDENTIFIER=100;
	public const int PSEUDONAME=101;
	public const int PSEUDO_PAGE=102;
	public const int REGEXP_FUNCTION=103;
	public const int RELATIVELENGTH=104;
	public const int REPLACEMENT=105;
	public const int REPLACEMENTTOKEN=106;
	public const int REPLACEMENTTOKENBASEDVALUE=107;
	public const int REPLACEMENTTOKENIDENTIFIER=108;
	public const int RESOLUTION=109;
	public const int RULESET=110;
	public const int RULESETS=111;
	public const int S=112;
	public const int SELECTOR=113;
	public const int SELECTORS_GROUP=114;
	public const int SELECTOR_EXPRESSION=115;
	public const int SELECTOR_NAMESPACE_PREFIX=116;
	public const int SEMICOLON=117;
	public const int SIMPLE_SELECTOR_SEQUENCE=118;
	public const int SPEECH=119;
	public const int SQUARE_BEGIN=120;
	public const int SQUARE_END=121;
	public const int STAR=122;
	public const int STAR_TEXT=123;
	public const int STRING=124;
	public const int STRINGBASEDVALUE=125;
	public const int STYLESHEET=126;
	public const int SUBSTRINGMATCH=127;
	public const int SUFFIXMATCH=128;
	public const int TERM=129;
	public const int TERMWITHOPERATOR=130;
	public const int TERMWITHOPERATORS=131;
	public const int TILDE=132;
	public const int TIME=133;
	public const int TO=134;
	public const int TYPE_SELECTOR=135;
	public const int UNARY=136;
	public const int UNIVERSAL=137;
	public const int URI=138;
	public const int URIBASEDVALUE=139;
	public const int URIHASH=140;
	public const int URLPREFIX_FUNCTION=141;
	public const int WG_DPI=142;
	public const int WG_DPI_SYM=143;
	public const int WHITESPACE=144;
	public const int WS=145;

	// delegates
	// delegators

	public CssParser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public CssParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);

		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();


		OnCreated();
	}
		
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return CssParser.tokenNames; } }
	public override string GrammarFileName { get { return "..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	public sealed partial class main_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public main_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_main();
	partial void LeaveRule_main();

	// $ANTLR start "main"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:115:1: public main : styleSheet EOF ;
	[GrammarRule("main")]
	public CssParser.main_return main()
	{
		EnterRule_main();
		EnterRule("main", 1);
		TraceIn("main", 1);
		CssParser.main_return retval = new CssParser.main_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken EOF2 = default(CommonToken);
		CssParser.styleSheet_return styleSheet1 = default(CssParser.styleSheet_return);

		object EOF2_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "main");
		DebugLocation(115, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:116:5: ( styleSheet EOF )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:116:7: styleSheet EOF
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(116, 7);
			PushFollow(Follow._styleSheet_in_main653);
			styleSheet1=styleSheet();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, styleSheet1.Tree);
			DebugLocation(117, 5);
			EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_main659); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EOF2_tree = (object)adaptor.Create(EOF2);
			adaptor.AddChild(root_0, EOF2_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("main", 1);
			LeaveRule("main", 1);
			LeaveRule_main();
		}
		DebugLocation(118, 4);
		} finally { DebugExitRule(GrammarFileName, "main"); }
		return retval;

	}
	// $ANTLR end "main"

	private sealed partial class styleSheet_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public styleSheet_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_styleSheet();
	partial void LeaveRule_styleSheet();

	// $ANTLR start "styleSheet"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:125:1: styleSheet : ( ( CHARSET_SYM STRING SEMICOLON )? ( styleimport )* ( namespace )* ( styleSheetRulesOrComment )* ) -> ^( STYLESHEET ( ^( CHARSET ^( STRINGBASEDVALUE STRING ) ) )? ( ^( IMPORTS ( styleimport )* ) )? ( ^( NAMESPACES ( namespace )* ) )? ( styleSheetRulesOrComment )* ) ;
	[GrammarRule("styleSheet")]
	private CssParser.styleSheet_return styleSheet()
	{
		EnterRule_styleSheet();
		EnterRule("styleSheet", 2);
		TraceIn("styleSheet", 2);
		CssParser.styleSheet_return retval = new CssParser.styleSheet_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken CHARSET_SYM3 = default(CommonToken);
		CommonToken STRING4 = default(CommonToken);
		CommonToken SEMICOLON5 = default(CommonToken);
		CssParser.styleimport_return styleimport6 = default(CssParser.styleimport_return);
		CssParser.namespace_return namespace7 = default(CssParser.namespace_return);
		CssParser.styleSheetRulesOrComment_return styleSheetRulesOrComment8 = default(CssParser.styleSheetRulesOrComment_return);

		object CHARSET_SYM3_tree = default(object);
		object STRING4_tree = default(object);
		object SEMICOLON5_tree = default(object);
		RewriteRuleITokenStream stream_CHARSET_SYM=new RewriteRuleITokenStream(adaptor,"token CHARSET_SYM");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleITokenStream stream_SEMICOLON=new RewriteRuleITokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_styleimport=new RewriteRuleSubtreeStream(adaptor,"rule styleimport");
		RewriteRuleSubtreeStream stream_namespace=new RewriteRuleSubtreeStream(adaptor,"rule namespace");
		RewriteRuleSubtreeStream stream_styleSheetRulesOrComment=new RewriteRuleSubtreeStream(adaptor,"rule styleSheetRulesOrComment");
		try { DebugEnterRule(GrammarFileName, "styleSheet");
		DebugLocation(125, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:126:5: ( ( ( CHARSET_SYM STRING SEMICOLON )? ( styleimport )* ( namespace )* ( styleSheetRulesOrComment )* ) -> ^( STYLESHEET ( ^( CHARSET ^( STRINGBASEDVALUE STRING ) ) )? ( ^( IMPORTS ( styleimport )* ) )? ( ^( NAMESPACES ( namespace )* ) )? ( styleSheetRulesOrComment )* ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:126:7: ( ( CHARSET_SYM STRING SEMICOLON )? ( styleimport )* ( namespace )* ( styleSheetRulesOrComment )* )
			{
			DebugLocation(126, 7);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:126:7: ( ( CHARSET_SYM STRING SEMICOLON )? ( styleimport )* ( namespace )* ( styleSheetRulesOrComment )* )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:126:8: ( CHARSET_SYM STRING SEMICOLON )? ( styleimport )* ( namespace )* ( styleSheetRulesOrComment )*
			{
			DebugLocation(126, 8);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:126:8: ( CHARSET_SYM STRING SEMICOLON )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_0 = input.LA(1);

			if ((LA1_0==CHARSET_SYM))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:126:9: CHARSET_SYM STRING SEMICOLON
				{
				DebugLocation(126, 9);
				CHARSET_SYM3=(CommonToken)Match(input,CHARSET_SYM,Follow._CHARSET_SYM_in_styleSheet683); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CHARSET_SYM.Add(CHARSET_SYM3);

				DebugLocation(126, 21);
				STRING4=(CommonToken)Match(input,STRING,Follow._STRING_in_styleSheet685); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING4);

				DebugLocation(126, 28);
				SEMICOLON5=(CommonToken)Match(input,SEMICOLON,Follow._SEMICOLON_in_styleSheet687); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SEMICOLON.Add(SEMICOLON5);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(126, 40);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:126:40: ( styleimport )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==IMPORT_SYM))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:126:40: styleimport
					{
					DebugLocation(126, 40);
					PushFollow(Follow._styleimport_in_styleSheet691);
					styleimport6=styleimport();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_styleimport.Add(styleimport6.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(126, 53);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:126:53: ( namespace )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==NAMESPACE_SYM))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:126:53: namespace
					{
					DebugLocation(126, 53);
					PushFollow(Follow._namespace_in_styleSheet694);
					namespace7=@namespace();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_namespace.Add(namespace7.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(126, 64);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:126:64: ( styleSheetRulesOrComment )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==AT_NAME||(LA4_0>=CLASS_IDENT && LA4_0<=COLON)||LA4_0==DOCUMENT_SYM||LA4_0==HASH_IDENT||LA4_0==IDENT||LA4_0==IMPORTANT_COMMENTS||LA4_0==KEYFRAMES_SYM||LA4_0==MEDIA_SYM||LA4_0==PAGE_SYM||LA4_0==PIPE||LA4_0==REPLACEMENTTOKEN||LA4_0==SQUARE_BEGIN||LA4_0==STAR||LA4_0==WG_DPI_SYM))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:126:64: styleSheetRulesOrComment
					{
					DebugLocation(126, 64);
					PushFollow(Follow._styleSheetRulesOrComment_in_styleSheet697);
					styleSheetRulesOrComment8=styleSheetRulesOrComment();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_styleSheetRulesOrComment.Add(styleSheetRulesOrComment8.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}



			{
			// AST REWRITE
			// elements: STRING, styleimport, namespace, styleSheetRulesOrComment
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 127:5: -> ^( STYLESHEET ( ^( CHARSET ^( STRINGBASEDVALUE STRING ) ) )? ( ^( IMPORTS ( styleimport )* ) )? ( ^( NAMESPACES ( namespace )* ) )? ( styleSheetRulesOrComment )* )
			{
				DebugLocation(127, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:127:8: ^( STYLESHEET ( ^( CHARSET ^( STRINGBASEDVALUE STRING ) ) )? ( ^( IMPORTS ( styleimport )* ) )? ( ^( NAMESPACES ( namespace )* ) )? ( styleSheetRulesOrComment )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(127, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(STYLESHEET, "STYLESHEET"), root_1);

				DebugLocation(127, 21);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:127:21: ( ^( CHARSET ^( STRINGBASEDVALUE STRING ) ) )?
				if (stream_STRING.HasNext)
				{
					DebugLocation(127, 21);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:127:21: ^( CHARSET ^( STRINGBASEDVALUE STRING ) )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(127, 23);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(CHARSET, "CHARSET"), root_2);

					DebugLocation(127, 31);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:127:31: ^( STRINGBASEDVALUE STRING )
					{
					object root_3 = (object)adaptor.Nil();
					DebugLocation(127, 33);
					root_3 = (object)adaptor.BecomeRoot((object)adaptor.Create(STRINGBASEDVALUE, "STRINGBASEDVALUE"), root_3);

					DebugLocation(127, 50);
					adaptor.AddChild(root_3, stream_STRING.NextNode());

					adaptor.AddChild(root_2, root_3);
					}

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_STRING.Reset();
				DebugLocation(127, 60);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:127:60: ( ^( IMPORTS ( styleimport )* ) )?
				if (stream_styleimport.HasNext)
				{
					DebugLocation(127, 60);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:127:60: ^( IMPORTS ( styleimport )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(127, 62);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(IMPORTS, "IMPORTS"), root_2);

					DebugLocation(127, 70);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:127:70: ( styleimport )*
					while ( stream_styleimport.HasNext )
					{
						DebugLocation(127, 70);
						adaptor.AddChild(root_2, stream_styleimport.NextTree());

					}
					stream_styleimport.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_styleimport.Reset();
				DebugLocation(127, 85);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:127:85: ( ^( NAMESPACES ( namespace )* ) )?
				if (stream_namespace.HasNext)
				{
					DebugLocation(127, 85);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:127:85: ^( NAMESPACES ( namespace )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(127, 87);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(NAMESPACES, "NAMESPACES"), root_2);

					DebugLocation(127, 98);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:127:98: ( namespace )*
					while ( stream_namespace.HasNext )
					{
						DebugLocation(127, 98);
						adaptor.AddChild(root_2, stream_namespace.NextTree());

					}
					stream_namespace.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_namespace.Reset();
				DebugLocation(127, 111);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:127:111: ( styleSheetRulesOrComment )*
				while ( stream_styleSheetRulesOrComment.HasNext )
				{
					DebugLocation(127, 111);
					adaptor.AddChild(root_1, stream_styleSheetRulesOrComment.NextTree());

				}
				stream_styleSheetRulesOrComment.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("styleSheet", 2);
			LeaveRule("styleSheet", 2);
			LeaveRule_styleSheet();
		}
		DebugLocation(128, 4);
		} finally { DebugExitRule(GrammarFileName, "styleSheet"); }
		return retval;

	}
	// $ANTLR end "styleSheet"

	private sealed partial class styleSheetRulesOrComment_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public styleSheetRulesOrComment_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_styleSheetRulesOrComment();
	partial void LeaveRule_styleSheetRulesOrComment();

	// $ANTLR start "styleSheetRulesOrComment"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:131:1: styleSheetRulesOrComment : ( IMPORTANT_COMMENTS | styleSheetrules );
	[GrammarRule("styleSheetRulesOrComment")]
	private CssParser.styleSheetRulesOrComment_return styleSheetRulesOrComment()
	{
		EnterRule_styleSheetRulesOrComment();
		EnterRule("styleSheetRulesOrComment", 3);
		TraceIn("styleSheetRulesOrComment", 3);
		CssParser.styleSheetRulesOrComment_return retval = new CssParser.styleSheetRulesOrComment_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken IMPORTANT_COMMENTS9 = default(CommonToken);
		CssParser.styleSheetrules_return styleSheetrules10 = default(CssParser.styleSheetrules_return);

		object IMPORTANT_COMMENTS9_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "styleSheetRulesOrComment");
		DebugLocation(131, 1);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:132:2: ( IMPORTANT_COMMENTS | styleSheetrules )
			int alt5=2;
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==IMPORTANT_COMMENTS))
			{
				alt5 = 1;
			}
			else if ((LA5_0==AT_NAME||(LA5_0>=CLASS_IDENT && LA5_0<=COLON)||LA5_0==DOCUMENT_SYM||LA5_0==HASH_IDENT||LA5_0==IDENT||LA5_0==KEYFRAMES_SYM||LA5_0==MEDIA_SYM||LA5_0==PAGE_SYM||LA5_0==PIPE||LA5_0==REPLACEMENTTOKEN||LA5_0==SQUARE_BEGIN||LA5_0==STAR||LA5_0==WG_DPI_SYM))
			{
				alt5 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:132:4: IMPORTANT_COMMENTS
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(132, 4);
				IMPORTANT_COMMENTS9=(CommonToken)Match(input,IMPORTANT_COMMENTS,Follow._IMPORTANT_COMMENTS_in_styleSheetRulesOrComment756); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IMPORTANT_COMMENTS9_tree = (object)adaptor.Create(IMPORTANT_COMMENTS9);
				adaptor.AddChild(root_0, IMPORTANT_COMMENTS9_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:133:6: styleSheetrules
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(133, 6);
				PushFollow(Follow._styleSheetrules_in_styleSheetRulesOrComment764);
				styleSheetrules10=styleSheetrules();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, styleSheetrules10.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("styleSheetRulesOrComment", 3);
			LeaveRule("styleSheetRulesOrComment", 3);
			LeaveRule_styleSheetRulesOrComment();
		}
		DebugLocation(134, 1);
		} finally { DebugExitRule(GrammarFileName, "styleSheetRulesOrComment"); }
		return retval;

	}
	// $ANTLR end "styleSheetRulesOrComment"

	private sealed partial class styleimport_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public styleimport_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_styleimport();
	partial void LeaveRule_styleimport();

	// $ANTLR start "styleimport"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:141:1: styleimport : IMPORT_SYM stringoruri ( media_query_list )? SEMICOLON -> ^( IMPORT stringoruri ( media_query_list )? ) ;
	[GrammarRule("styleimport")]
	private CssParser.styleimport_return styleimport()
	{
		EnterRule_styleimport();
		EnterRule("styleimport", 4);
		TraceIn("styleimport", 4);
		CssParser.styleimport_return retval = new CssParser.styleimport_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken IMPORT_SYM11 = default(CommonToken);
		CommonToken SEMICOLON14 = default(CommonToken);
		CssParser.stringoruri_return stringoruri12 = default(CssParser.stringoruri_return);
		CssParser.media_query_list_return media_query_list13 = default(CssParser.media_query_list_return);

		object IMPORT_SYM11_tree = default(object);
		object SEMICOLON14_tree = default(object);
		RewriteRuleITokenStream stream_IMPORT_SYM=new RewriteRuleITokenStream(adaptor,"token IMPORT_SYM");
		RewriteRuleITokenStream stream_SEMICOLON=new RewriteRuleITokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_stringoruri=new RewriteRuleSubtreeStream(adaptor,"rule stringoruri");
		RewriteRuleSubtreeStream stream_media_query_list=new RewriteRuleSubtreeStream(adaptor,"rule media_query_list");
		try { DebugEnterRule(GrammarFileName, "styleimport");
		DebugLocation(141, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:142:5: ( IMPORT_SYM stringoruri ( media_query_list )? SEMICOLON -> ^( IMPORT stringoruri ( media_query_list )? ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:142:7: IMPORT_SYM stringoruri ( media_query_list )? SEMICOLON
			{
			DebugLocation(142, 7);
			IMPORT_SYM11=(CommonToken)Match(input,IMPORT_SYM,Follow._IMPORT_SYM_in_styleimport784); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IMPORT_SYM.Add(IMPORT_SYM11);

			DebugLocation(142, 18);
			PushFollow(Follow._stringoruri_in_styleimport786);
			stringoruri12=stringoruri();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stringoruri.Add(stringoruri12.Tree);
			DebugLocation(142, 30);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:142:30: ( media_query_list )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_0 = input.LA(1);

			if ((LA6_0==CIRCLE_BEGIN||LA6_0==IDENT||LA6_0==NOT||LA6_0==ONLY))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:142:30: media_query_list
				{
				DebugLocation(142, 30);
				PushFollow(Follow._media_query_list_in_styleimport788);
				media_query_list13=media_query_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_media_query_list.Add(media_query_list13.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(142, 48);
			SEMICOLON14=(CommonToken)Match(input,SEMICOLON,Follow._SEMICOLON_in_styleimport791); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SEMICOLON.Add(SEMICOLON14);



			{
			// AST REWRITE
			// elements: stringoruri, media_query_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 143:5: -> ^( IMPORT stringoruri ( media_query_list )? )
			{
				DebugLocation(143, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:143:8: ^( IMPORT stringoruri ( media_query_list )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(143, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(IMPORT, "IMPORT"), root_1);

				DebugLocation(143, 17);
				adaptor.AddChild(root_1, stream_stringoruri.NextTree());
				DebugLocation(143, 29);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:143:29: ( media_query_list )?
				if (stream_media_query_list.HasNext)
				{
					DebugLocation(143, 29);
					adaptor.AddChild(root_1, stream_media_query_list.NextTree());

				}
				stream_media_query_list.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("styleimport", 4);
			LeaveRule("styleimport", 4);
			LeaveRule_styleimport();
		}
		DebugLocation(144, 4);
		} finally { DebugExitRule(GrammarFileName, "styleimport"); }
		return retval;

	}
	// $ANTLR end "styleimport"

	private sealed partial class namespace_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public namespace_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_namespace();
	partial void LeaveRule_namespace();

	// $ANTLR start "namespace"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:149:1: namespace : NAMESPACE_SYM ( namespace_prefix )? stringoruri SEMICOLON -> ^( NAMESPACE ( namespace_prefix )? stringoruri ) ;
	[GrammarRule("namespace")]
	private CssParser.namespace_return @namespace()
	{
		EnterRule_namespace();
		EnterRule("namespace", 5);
		TraceIn("namespace", 5);
		CssParser.namespace_return retval = new CssParser.namespace_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken NAMESPACE_SYM15 = default(CommonToken);
		CommonToken SEMICOLON18 = default(CommonToken);
		CssParser.namespace_prefix_return namespace_prefix16 = default(CssParser.namespace_prefix_return);
		CssParser.stringoruri_return stringoruri17 = default(CssParser.stringoruri_return);

		object NAMESPACE_SYM15_tree = default(object);
		object SEMICOLON18_tree = default(object);
		RewriteRuleITokenStream stream_NAMESPACE_SYM=new RewriteRuleITokenStream(adaptor,"token NAMESPACE_SYM");
		RewriteRuleITokenStream stream_SEMICOLON=new RewriteRuleITokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_namespace_prefix=new RewriteRuleSubtreeStream(adaptor,"rule namespace_prefix");
		RewriteRuleSubtreeStream stream_stringoruri=new RewriteRuleSubtreeStream(adaptor,"rule stringoruri");
		try { DebugEnterRule(GrammarFileName, "namespace");
		DebugLocation(149, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:150:5: ( NAMESPACE_SYM ( namespace_prefix )? stringoruri SEMICOLON -> ^( NAMESPACE ( namespace_prefix )? stringoruri ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:150:7: NAMESPACE_SYM ( namespace_prefix )? stringoruri SEMICOLON
			{
			DebugLocation(150, 7);
			NAMESPACE_SYM15=(CommonToken)Match(input,NAMESPACE_SYM,Follow._NAMESPACE_SYM_in_namespace826); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NAMESPACE_SYM.Add(NAMESPACE_SYM15);

			DebugLocation(150, 21);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:150:21: ( namespace_prefix )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==IDENT))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:150:21: namespace_prefix
				{
				DebugLocation(150, 21);
				PushFollow(Follow._namespace_prefix_in_namespace828);
				namespace_prefix16=namespace_prefix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_namespace_prefix.Add(namespace_prefix16.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(150, 39);
			PushFollow(Follow._stringoruri_in_namespace831);
			stringoruri17=stringoruri();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stringoruri.Add(stringoruri17.Tree);
			DebugLocation(150, 51);
			SEMICOLON18=(CommonToken)Match(input,SEMICOLON,Follow._SEMICOLON_in_namespace833); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SEMICOLON.Add(SEMICOLON18);



			{
			// AST REWRITE
			// elements: namespace_prefix, stringoruri
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 151:5: -> ^( NAMESPACE ( namespace_prefix )? stringoruri )
			{
				DebugLocation(151, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:151:8: ^( NAMESPACE ( namespace_prefix )? stringoruri )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(151, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(NAMESPACE, "NAMESPACE"), root_1);

				DebugLocation(151, 20);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:151:20: ( namespace_prefix )?
				if (stream_namespace_prefix.HasNext)
				{
					DebugLocation(151, 20);
					adaptor.AddChild(root_1, stream_namespace_prefix.NextTree());

				}
				stream_namespace_prefix.Reset();
				DebugLocation(151, 38);
				adaptor.AddChild(root_1, stream_stringoruri.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace", 5);
			LeaveRule("namespace", 5);
			LeaveRule_namespace();
		}
		DebugLocation(152, 4);
		} finally { DebugExitRule(GrammarFileName, "namespace"); }
		return retval;

	}
	// $ANTLR end "namespace"

	private sealed partial class namespace_prefix_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public namespace_prefix_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_namespace_prefix();
	partial void LeaveRule_namespace_prefix();

	// $ANTLR start "namespace_prefix"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:154:1: namespace_prefix : IDENT -> ^( NAMESPACE_PREFIX IDENT ) ;
	[GrammarRule("namespace_prefix")]
	private CssParser.namespace_prefix_return namespace_prefix()
	{
		EnterRule_namespace_prefix();
		EnterRule("namespace_prefix", 6);
		TraceIn("namespace_prefix", 6);
		CssParser.namespace_prefix_return retval = new CssParser.namespace_prefix_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken IDENT19 = default(CommonToken);

		object IDENT19_tree = default(object);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");

		try { DebugEnterRule(GrammarFileName, "namespace_prefix");
		DebugLocation(154, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:155:5: ( IDENT -> ^( NAMESPACE_PREFIX IDENT ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:155:7: IDENT
			{
			DebugLocation(155, 7);
			IDENT19=(CommonToken)Match(input,IDENT,Follow._IDENT_in_namespace_prefix865); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT19);



			{
			// AST REWRITE
			// elements: IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 156:5: -> ^( NAMESPACE_PREFIX IDENT )
			{
				DebugLocation(156, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:156:8: ^( NAMESPACE_PREFIX IDENT )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(156, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(NAMESPACE_PREFIX, "NAMESPACE_PREFIX"), root_1);

				DebugLocation(156, 27);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_prefix", 6);
			LeaveRule("namespace_prefix", 6);
			LeaveRule_namespace_prefix();
		}
		DebugLocation(157, 4);
		} finally { DebugExitRule(GrammarFileName, "namespace_prefix"); }
		return retval;

	}
	// $ANTLR end "namespace_prefix"

	private sealed partial class wg_dpi_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public wg_dpi_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_wg_dpi();
	partial void LeaveRule_wg_dpi();

	// $ANTLR start "wg_dpi"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:159:1: wg_dpi : WG_DPI_SYM NUMBER SEMICOLON -> ^( WG_DPI NUMBER ) ;
	[GrammarRule("wg_dpi")]
	private CssParser.wg_dpi_return wg_dpi()
	{
		EnterRule_wg_dpi();
		EnterRule("wg_dpi", 7);
		TraceIn("wg_dpi", 7);
		CssParser.wg_dpi_return retval = new CssParser.wg_dpi_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken WG_DPI_SYM20 = default(CommonToken);
		CommonToken NUMBER21 = default(CommonToken);
		CommonToken SEMICOLON22 = default(CommonToken);

		object WG_DPI_SYM20_tree = default(object);
		object NUMBER21_tree = default(object);
		object SEMICOLON22_tree = default(object);
		RewriteRuleITokenStream stream_WG_DPI_SYM=new RewriteRuleITokenStream(adaptor,"token WG_DPI_SYM");
		RewriteRuleITokenStream stream_NUMBER=new RewriteRuleITokenStream(adaptor,"token NUMBER");
		RewriteRuleITokenStream stream_SEMICOLON=new RewriteRuleITokenStream(adaptor,"token SEMICOLON");

		try { DebugEnterRule(GrammarFileName, "wg_dpi");
		DebugLocation(159, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:160:5: ( WG_DPI_SYM NUMBER SEMICOLON -> ^( WG_DPI NUMBER ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:160:7: WG_DPI_SYM NUMBER SEMICOLON
			{
			DebugLocation(160, 7);
			WG_DPI_SYM20=(CommonToken)Match(input,WG_DPI_SYM,Follow._WG_DPI_SYM_in_wg_dpi894); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WG_DPI_SYM.Add(WG_DPI_SYM20);

			DebugLocation(160, 18);
			NUMBER21=(CommonToken)Match(input,NUMBER,Follow._NUMBER_in_wg_dpi896); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NUMBER.Add(NUMBER21);

			DebugLocation(160, 25);
			SEMICOLON22=(CommonToken)Match(input,SEMICOLON,Follow._SEMICOLON_in_wg_dpi898); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SEMICOLON.Add(SEMICOLON22);



			{
			// AST REWRITE
			// elements: NUMBER
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 161:5: -> ^( WG_DPI NUMBER )
			{
				DebugLocation(161, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:161:8: ^( WG_DPI NUMBER )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(161, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(WG_DPI, "WG_DPI"), root_1);

				DebugLocation(161, 17);
				adaptor.AddChild(root_1, stream_NUMBER.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("wg_dpi", 7);
			LeaveRule("wg_dpi", 7);
			LeaveRule_wg_dpi();
		}
		DebugLocation(162, 4);
		} finally { DebugExitRule(GrammarFileName, "wg_dpi"); }
		return retval;

	}
	// $ANTLR end "wg_dpi"

	private sealed partial class media_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public media_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_media();
	partial void LeaveRule_media();

	// $ANTLR start "media"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:167:1: media : MEDIA_SYM ( media_query_list )? CURLY_BEGIN ( ruleset | page )* CURLY_END -> ^( MEDIA ( media_query_list )? ( ^( RULESETS ( ruleset )* ) )? ( ^( PAGE ( page )* ) )? ) ;
	[GrammarRule("media")]
	private CssParser.media_return media()
	{
		EnterRule_media();
		EnterRule("media", 8);
		TraceIn("media", 8);
		CssParser.media_return retval = new CssParser.media_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken MEDIA_SYM23 = default(CommonToken);
		CommonToken CURLY_BEGIN25 = default(CommonToken);
		CommonToken CURLY_END28 = default(CommonToken);
		CssParser.media_query_list_return media_query_list24 = default(CssParser.media_query_list_return);
		CssParser.ruleset_return ruleset26 = default(CssParser.ruleset_return);
		CssParser.page_return page27 = default(CssParser.page_return);

		object MEDIA_SYM23_tree = default(object);
		object CURLY_BEGIN25_tree = default(object);
		object CURLY_END28_tree = default(object);
		RewriteRuleITokenStream stream_MEDIA_SYM=new RewriteRuleITokenStream(adaptor,"token MEDIA_SYM");
		RewriteRuleITokenStream stream_CURLY_BEGIN=new RewriteRuleITokenStream(adaptor,"token CURLY_BEGIN");
		RewriteRuleITokenStream stream_CURLY_END=new RewriteRuleITokenStream(adaptor,"token CURLY_END");
		RewriteRuleSubtreeStream stream_media_query_list=new RewriteRuleSubtreeStream(adaptor,"rule media_query_list");
		RewriteRuleSubtreeStream stream_ruleset=new RewriteRuleSubtreeStream(adaptor,"rule ruleset");
		RewriteRuleSubtreeStream stream_page=new RewriteRuleSubtreeStream(adaptor,"rule page");
		try { DebugEnterRule(GrammarFileName, "media");
		DebugLocation(167, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:168:5: ( MEDIA_SYM ( media_query_list )? CURLY_BEGIN ( ruleset | page )* CURLY_END -> ^( MEDIA ( media_query_list )? ( ^( RULESETS ( ruleset )* ) )? ( ^( PAGE ( page )* ) )? ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:168:7: MEDIA_SYM ( media_query_list )? CURLY_BEGIN ( ruleset | page )* CURLY_END
			{
			DebugLocation(168, 7);
			MEDIA_SYM23=(CommonToken)Match(input,MEDIA_SYM,Follow._MEDIA_SYM_in_media930); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_MEDIA_SYM.Add(MEDIA_SYM23);

			DebugLocation(168, 17);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:168:17: ( media_query_list )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==CIRCLE_BEGIN||LA8_0==IDENT||LA8_0==NOT||LA8_0==ONLY))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:168:17: media_query_list
				{
				DebugLocation(168, 17);
				PushFollow(Follow._media_query_list_in_media932);
				media_query_list24=media_query_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_media_query_list.Add(media_query_list24.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(168, 35);
			CURLY_BEGIN25=(CommonToken)Match(input,CURLY_BEGIN,Follow._CURLY_BEGIN_in_media935); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CURLY_BEGIN.Add(CURLY_BEGIN25);

			DebugLocation(168, 47);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:168:47: ( ruleset | page )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=3;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==AT_NAME||(LA9_0>=CLASS_IDENT && LA9_0<=COLON)||LA9_0==HASH_IDENT||LA9_0==IDENT||LA9_0==PIPE||LA9_0==REPLACEMENTTOKEN||LA9_0==SQUARE_BEGIN||LA9_0==STAR))
				{
					alt9 = 1;
				}
				else if ((LA9_0==PAGE_SYM))
				{
					alt9 = 2;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:168:49: ruleset
					{
					DebugLocation(168, 49);
					PushFollow(Follow._ruleset_in_media939);
					ruleset26=ruleset();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ruleset.Add(ruleset26.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:168:59: page
					{
					DebugLocation(168, 59);
					PushFollow(Follow._page_in_media943);
					page27=page();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_page.Add(page27.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(168, 67);
			CURLY_END28=(CommonToken)Match(input,CURLY_END,Follow._CURLY_END_in_media948); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CURLY_END.Add(CURLY_END28);



			{
			// AST REWRITE
			// elements: media_query_list, ruleset, page
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 169:5: -> ^( MEDIA ( media_query_list )? ( ^( RULESETS ( ruleset )* ) )? ( ^( PAGE ( page )* ) )? )
			{
				DebugLocation(169, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:169:8: ^( MEDIA ( media_query_list )? ( ^( RULESETS ( ruleset )* ) )? ( ^( PAGE ( page )* ) )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(169, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(MEDIA, "MEDIA"), root_1);

				DebugLocation(169, 16);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:169:16: ( media_query_list )?
				if (stream_media_query_list.HasNext)
				{
					DebugLocation(169, 16);
					adaptor.AddChild(root_1, stream_media_query_list.NextTree());

				}
				stream_media_query_list.Reset();
				DebugLocation(169, 34);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:169:34: ( ^( RULESETS ( ruleset )* ) )?
				if (stream_ruleset.HasNext)
				{
					DebugLocation(169, 34);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:169:34: ^( RULESETS ( ruleset )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(169, 36);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(RULESETS, "RULESETS"), root_2);

					DebugLocation(169, 45);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:169:45: ( ruleset )*
					while ( stream_ruleset.HasNext )
					{
						DebugLocation(169, 45);
						adaptor.AddChild(root_2, stream_ruleset.NextTree());

					}
					stream_ruleset.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ruleset.Reset();
				DebugLocation(169, 56);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:169:56: ( ^( PAGE ( page )* ) )?
				if (stream_page.HasNext)
				{
					DebugLocation(169, 56);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:169:56: ^( PAGE ( page )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(169, 58);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(PAGE, "PAGE"), root_2);

					DebugLocation(169, 63);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:169:63: ( page )*
					while ( stream_page.HasNext )
					{
						DebugLocation(169, 63);
						adaptor.AddChild(root_2, stream_page.NextTree());

					}
					stream_page.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_page.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("media", 8);
			LeaveRule("media", 8);
			LeaveRule_media();
		}
		DebugLocation(170, 4);
		} finally { DebugExitRule(GrammarFileName, "media"); }
		return retval;

	}
	// $ANTLR end "media"

	private sealed partial class media_query_list_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public media_query_list_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_media_query_list();
	partial void LeaveRule_media_query_list();

	// $ANTLR start "media_query_list"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:175:1: media_query_list : media_query ( COMMA media_query )* -> ^( MEDIA_QUERY_LIST ( media_query )* ) ;
	[GrammarRule("media_query_list")]
	private CssParser.media_query_list_return media_query_list()
	{
		EnterRule_media_query_list();
		EnterRule("media_query_list", 9);
		TraceIn("media_query_list", 9);
		CssParser.media_query_list_return retval = new CssParser.media_query_list_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken COMMA30 = default(CommonToken);
		CssParser.media_query_return media_query29 = default(CssParser.media_query_return);
		CssParser.media_query_return media_query31 = default(CssParser.media_query_return);

		object COMMA30_tree = default(object);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_media_query=new RewriteRuleSubtreeStream(adaptor,"rule media_query");
		try { DebugEnterRule(GrammarFileName, "media_query_list");
		DebugLocation(175, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:176:5: ( media_query ( COMMA media_query )* -> ^( MEDIA_QUERY_LIST ( media_query )* ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:176:7: media_query ( COMMA media_query )*
			{
			DebugLocation(176, 7);
			PushFollow(Follow._media_query_in_media_query_list997);
			media_query29=media_query();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_media_query.Add(media_query29.Tree);
			DebugLocation(176, 19);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:176:19: ( COMMA media_query )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==COMMA))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:176:20: COMMA media_query
					{
					DebugLocation(176, 20);
					COMMA30=(CommonToken)Match(input,COMMA,Follow._COMMA_in_media_query_list1000); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA30);

					DebugLocation(176, 26);
					PushFollow(Follow._media_query_in_media_query_list1002);
					media_query31=media_query();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_media_query.Add(media_query31.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: media_query
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 177:5: -> ^( MEDIA_QUERY_LIST ( media_query )* )
			{
				DebugLocation(177, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:177:8: ^( MEDIA_QUERY_LIST ( media_query )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(177, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(MEDIA_QUERY_LIST, "MEDIA_QUERY_LIST"), root_1);

				DebugLocation(177, 27);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:177:27: ( media_query )*
				while ( stream_media_query.HasNext )
				{
					DebugLocation(177, 27);
					adaptor.AddChild(root_1, stream_media_query.NextTree());

				}
				stream_media_query.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("media_query_list", 9);
			LeaveRule("media_query_list", 9);
			LeaveRule_media_query_list();
		}
		DebugLocation(178, 4);
		} finally { DebugExitRule(GrammarFileName, "media_query_list"); }
		return retval;

	}
	// $ANTLR end "media_query_list"

	private sealed partial class media_query_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public media_query_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_media_query();
	partial void LeaveRule_media_query();

	// $ANTLR start "media_query"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:184:1: media_query : ( ( ONLY | NOT )? media_type ( AND media_expression )* -> ^( MEDIA_QUERY ( ^( ONLY_TEXT ONLY ) )? ( ^( NOT_TEXT NOT ) )? media_type ( ^( MEDIA_EXPRESSIONS ( media_expression )* ) )? ) | media_expression ( AND media_expression )* -> ^( MEDIA_QUERY ^( MEDIA_EXPRESSIONS ( media_expression )* ) ) );
	[GrammarRule("media_query")]
	private CssParser.media_query_return media_query()
	{
		EnterRule_media_query();
		EnterRule("media_query", 10);
		TraceIn("media_query", 10);
		CssParser.media_query_return retval = new CssParser.media_query_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken ONLY32 = default(CommonToken);
		CommonToken NOT33 = default(CommonToken);
		CommonToken AND35 = default(CommonToken);
		CommonToken AND38 = default(CommonToken);
		CssParser.media_type_return media_type34 = default(CssParser.media_type_return);
		CssParser.media_expression_return media_expression36 = default(CssParser.media_expression_return);
		CssParser.media_expression_return media_expression37 = default(CssParser.media_expression_return);
		CssParser.media_expression_return media_expression39 = default(CssParser.media_expression_return);

		object ONLY32_tree = default(object);
		object NOT33_tree = default(object);
		object AND35_tree = default(object);
		object AND38_tree = default(object);
		RewriteRuleITokenStream stream_ONLY=new RewriteRuleITokenStream(adaptor,"token ONLY");
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");
		RewriteRuleSubtreeStream stream_media_type=new RewriteRuleSubtreeStream(adaptor,"rule media_type");
		RewriteRuleSubtreeStream stream_media_expression=new RewriteRuleSubtreeStream(adaptor,"rule media_expression");
		try { DebugEnterRule(GrammarFileName, "media_query");
		DebugLocation(184, 1);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:185:2: ( ( ONLY | NOT )? media_type ( AND media_expression )* -> ^( MEDIA_QUERY ( ^( ONLY_TEXT ONLY ) )? ( ^( NOT_TEXT NOT ) )? media_type ( ^( MEDIA_EXPRESSIONS ( media_expression )* ) )? ) | media_expression ( AND media_expression )* -> ^( MEDIA_QUERY ^( MEDIA_EXPRESSIONS ( media_expression )* ) ) )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==IDENT||LA14_0==NOT||LA14_0==ONLY))
			{
				alt14 = 1;
			}
			else if ((LA14_0==CIRCLE_BEGIN))
			{
				alt14 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:185:4: ( ONLY | NOT )? media_type ( AND media_expression )*
				{
				DebugLocation(185, 4);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:185:4: ( ONLY | NOT )?
				int alt11=3;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==ONLY))
				{
					alt11 = 1;
				}
				else if ((LA11_0==NOT))
				{
					alt11 = 2;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:185:5: ONLY
					{
					DebugLocation(185, 5);
					ONLY32=(CommonToken)Match(input,ONLY,Follow._ONLY_in_media_query1036); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ONLY.Add(ONLY32);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:185:12: NOT
					{
					DebugLocation(185, 12);
					NOT33=(CommonToken)Match(input,NOT,Follow._NOT_in_media_query1040); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NOT.Add(NOT33);


					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(185, 18);
				PushFollow(Follow._media_type_in_media_query1044);
				media_type34=media_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_media_type.Add(media_type34.Tree);
				DebugLocation(185, 29);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:185:29: ( AND media_expression )*
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, false);
					int LA12_0 = input.LA(1);

					if ((LA12_0==AND))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch ( alt12 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:185:30: AND media_expression
						{
						DebugLocation(185, 30);
						AND35=(CommonToken)Match(input,AND,Follow._AND_in_media_query1047); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_AND.Add(AND35);

						DebugLocation(185, 34);
						PushFollow(Follow._media_expression_in_media_query1049);
						media_expression36=media_expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_media_expression.Add(media_expression36.Tree);

						}
						break;

					default:
						goto loop12;
					}
				}

				loop12:
					;

				} finally { DebugExitSubRule(12); }



				{
				// AST REWRITE
				// elements: ONLY, NOT, media_type, media_expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 186:2: -> ^( MEDIA_QUERY ( ^( ONLY_TEXT ONLY ) )? ( ^( NOT_TEXT NOT ) )? media_type ( ^( MEDIA_EXPRESSIONS ( media_expression )* ) )? )
				{
					DebugLocation(186, 5);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:186:5: ^( MEDIA_QUERY ( ^( ONLY_TEXT ONLY ) )? ( ^( NOT_TEXT NOT ) )? media_type ( ^( MEDIA_EXPRESSIONS ( media_expression )* ) )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(186, 7);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(MEDIA_QUERY, "MEDIA_QUERY"), root_1);

					DebugLocation(186, 19);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:186:19: ( ^( ONLY_TEXT ONLY ) )?
					if (stream_ONLY.HasNext)
					{
						DebugLocation(186, 19);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:186:19: ^( ONLY_TEXT ONLY )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(186, 21);
						root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(ONLY_TEXT, "ONLY_TEXT"), root_2);

						DebugLocation(186, 31);
						adaptor.AddChild(root_2, stream_ONLY.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ONLY.Reset();
					DebugLocation(186, 38);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:186:38: ( ^( NOT_TEXT NOT ) )?
					if (stream_NOT.HasNext)
					{
						DebugLocation(186, 38);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:186:38: ^( NOT_TEXT NOT )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(186, 40);
						root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(NOT_TEXT, "NOT_TEXT"), root_2);

						DebugLocation(186, 49);
						adaptor.AddChild(root_2, stream_NOT.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_NOT.Reset();
					DebugLocation(186, 55);
					adaptor.AddChild(root_1, stream_media_type.NextTree());
					DebugLocation(186, 66);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:186:66: ( ^( MEDIA_EXPRESSIONS ( media_expression )* ) )?
					if (stream_media_expression.HasNext)
					{
						DebugLocation(186, 66);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:186:66: ^( MEDIA_EXPRESSIONS ( media_expression )* )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(186, 68);
						root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(MEDIA_EXPRESSIONS, "MEDIA_EXPRESSIONS"), root_2);

						DebugLocation(186, 86);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:186:86: ( media_expression )*
						while ( stream_media_expression.HasNext )
						{
							DebugLocation(186, 86);
							adaptor.AddChild(root_2, stream_media_expression.NextTree());

						}
						stream_media_expression.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_media_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:187:4: media_expression ( AND media_expression )*
				{
				DebugLocation(187, 4);
				PushFollow(Follow._media_expression_in_media_query1087);
				media_expression37=media_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_media_expression.Add(media_expression37.Tree);
				DebugLocation(187, 21);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:187:21: ( AND media_expression )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_0 = input.LA(1);

					if ((LA13_0==AND))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:187:22: AND media_expression
						{
						DebugLocation(187, 22);
						AND38=(CommonToken)Match(input,AND,Follow._AND_in_media_query1090); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_AND.Add(AND38);

						DebugLocation(187, 26);
						PushFollow(Follow._media_expression_in_media_query1092);
						media_expression39=media_expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_media_expression.Add(media_expression39.Tree);

						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }



				{
				// AST REWRITE
				// elements: media_expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 188:2: -> ^( MEDIA_QUERY ^( MEDIA_EXPRESSIONS ( media_expression )* ) )
				{
					DebugLocation(188, 5);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:188:5: ^( MEDIA_QUERY ^( MEDIA_EXPRESSIONS ( media_expression )* ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(188, 7);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(MEDIA_QUERY, "MEDIA_QUERY"), root_1);

					DebugLocation(188, 19);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:188:19: ^( MEDIA_EXPRESSIONS ( media_expression )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(188, 21);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(MEDIA_EXPRESSIONS, "MEDIA_EXPRESSIONS"), root_2);

					DebugLocation(188, 39);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:188:39: ( media_expression )*
					while ( stream_media_expression.HasNext )
					{
						DebugLocation(188, 39);
						adaptor.AddChild(root_2, stream_media_expression.NextTree());

					}
					stream_media_expression.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("media_query", 10);
			LeaveRule("media_query", 10);
			LeaveRule_media_query();
		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "media_query"); }
		return retval;

	}
	// $ANTLR end "media_query"

	private sealed partial class media_type_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public media_type_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_media_type();
	partial void LeaveRule_media_type();

	// $ANTLR start "media_type"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:194:1: media_type : IDENT -> ^( MEDIA_TYPE IDENT ) ;
	[GrammarRule("media_type")]
	private CssParser.media_type_return media_type()
	{
		EnterRule_media_type();
		EnterRule("media_type", 11);
		TraceIn("media_type", 11);
		CssParser.media_type_return retval = new CssParser.media_type_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken IDENT40 = default(CommonToken);

		object IDENT40_tree = default(object);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");

		try { DebugEnterRule(GrammarFileName, "media_type");
		DebugLocation(194, 1);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:195:2: ( IDENT -> ^( MEDIA_TYPE IDENT ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:195:4: IDENT
			{
			DebugLocation(195, 4);
			IDENT40=(CommonToken)Match(input,IDENT,Follow._IDENT_in_media_type1122); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT40);



			{
			// AST REWRITE
			// elements: IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 196:2: -> ^( MEDIA_TYPE IDENT )
			{
				DebugLocation(196, 5);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:196:5: ^( MEDIA_TYPE IDENT )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(196, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(MEDIA_TYPE, "MEDIA_TYPE"), root_1);

				DebugLocation(196, 18);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("media_type", 11);
			LeaveRule("media_type", 11);
			LeaveRule_media_type();
		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "media_type"); }
		return retval;

	}
	// $ANTLR end "media_type"

	private sealed partial class media_expression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public media_expression_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_media_expression();
	partial void LeaveRule_media_expression();

	// $ANTLR start "media_expression"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:202:1: media_expression : CIRCLE_BEGIN media_feature ( COLON expr )? CIRCLE_END -> ^( MEDIA_EXPRESSION media_feature ( expr )? ) ;
	[GrammarRule("media_expression")]
	private CssParser.media_expression_return media_expression()
	{
		EnterRule_media_expression();
		EnterRule("media_expression", 12);
		TraceIn("media_expression", 12);
		CssParser.media_expression_return retval = new CssParser.media_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken CIRCLE_BEGIN41 = default(CommonToken);
		CommonToken COLON43 = default(CommonToken);
		CommonToken CIRCLE_END45 = default(CommonToken);
		CssParser.media_feature_return media_feature42 = default(CssParser.media_feature_return);
		CssParser.expr_return expr44 = default(CssParser.expr_return);

		object CIRCLE_BEGIN41_tree = default(object);
		object COLON43_tree = default(object);
		object CIRCLE_END45_tree = default(object);
		RewriteRuleITokenStream stream_CIRCLE_BEGIN=new RewriteRuleITokenStream(adaptor,"token CIRCLE_BEGIN");
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_CIRCLE_END=new RewriteRuleITokenStream(adaptor,"token CIRCLE_END");
		RewriteRuleSubtreeStream stream_media_feature=new RewriteRuleSubtreeStream(adaptor,"rule media_feature");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "media_expression");
		DebugLocation(202, 1);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:203:2: ( CIRCLE_BEGIN media_feature ( COLON expr )? CIRCLE_END -> ^( MEDIA_EXPRESSION media_feature ( expr )? ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:203:4: CIRCLE_BEGIN media_feature ( COLON expr )? CIRCLE_END
			{
			DebugLocation(203, 4);
			CIRCLE_BEGIN41=(CommonToken)Match(input,CIRCLE_BEGIN,Follow._CIRCLE_BEGIN_in_media_expression1145); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CIRCLE_BEGIN.Add(CIRCLE_BEGIN41);

			DebugLocation(203, 17);
			PushFollow(Follow._media_feature_in_media_expression1147);
			media_feature42=media_feature();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_media_feature.Add(media_feature42.Tree);
			DebugLocation(203, 31);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:203:31: ( COLON expr )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==COLON))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:203:32: COLON expr
				{
				DebugLocation(203, 32);
				COLON43=(CommonToken)Match(input,COLON,Follow._COLON_in_media_expression1150); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON43);

				DebugLocation(203, 38);
				PushFollow(Follow._expr_in_media_expression1152);
				expr44=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr44.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(203, 45);
			CIRCLE_END45=(CommonToken)Match(input,CIRCLE_END,Follow._CIRCLE_END_in_media_expression1156); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CIRCLE_END.Add(CIRCLE_END45);



			{
			// AST REWRITE
			// elements: media_feature, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 204:2: -> ^( MEDIA_EXPRESSION media_feature ( expr )? )
			{
				DebugLocation(204, 5);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:204:5: ^( MEDIA_EXPRESSION media_feature ( expr )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(204, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(MEDIA_EXPRESSION, "MEDIA_EXPRESSION"), root_1);

				DebugLocation(204, 24);
				adaptor.AddChild(root_1, stream_media_feature.NextTree());
				DebugLocation(204, 38);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:204:38: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(204, 38);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("media_expression", 12);
			LeaveRule("media_expression", 12);
			LeaveRule_media_expression();
		}
		DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "media_expression"); }
		return retval;

	}
	// $ANTLR end "media_expression"

	private sealed partial class media_feature_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public media_feature_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_media_feature();
	partial void LeaveRule_media_feature();

	// $ANTLR start "media_feature"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:210:1: media_feature : ( IDENT -> ^( MEDIA_FEATURE IDENT ) | REPLACEMENTTOKEN -> ^( MEDIA_FEATURE REPLACEMENTTOKEN ) );
	[GrammarRule("media_feature")]
	private CssParser.media_feature_return media_feature()
	{
		EnterRule_media_feature();
		EnterRule("media_feature", 13);
		TraceIn("media_feature", 13);
		CssParser.media_feature_return retval = new CssParser.media_feature_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken IDENT46 = default(CommonToken);
		CommonToken REPLACEMENTTOKEN47 = default(CommonToken);

		object IDENT46_tree = default(object);
		object REPLACEMENTTOKEN47_tree = default(object);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_REPLACEMENTTOKEN=new RewriteRuleITokenStream(adaptor,"token REPLACEMENTTOKEN");

		try { DebugEnterRule(GrammarFileName, "media_feature");
		DebugLocation(210, 1);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:211:2: ( IDENT -> ^( MEDIA_FEATURE IDENT ) | REPLACEMENTTOKEN -> ^( MEDIA_FEATURE REPLACEMENTTOKEN ) )
			int alt16=2;
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==IDENT))
			{
				alt16 = 1;
			}
			else if ((LA16_0==REPLACEMENTTOKEN))
			{
				alt16 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:211:4: IDENT
				{
				DebugLocation(211, 4);
				IDENT46=(CommonToken)Match(input,IDENT,Follow._IDENT_in_media_feature1183); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT46);



				{
				// AST REWRITE
				// elements: IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 212:2: -> ^( MEDIA_FEATURE IDENT )
				{
					DebugLocation(212, 5);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:212:5: ^( MEDIA_FEATURE IDENT )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(212, 7);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(MEDIA_FEATURE, "MEDIA_FEATURE"), root_1);

					DebugLocation(212, 21);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:213:4: REPLACEMENTTOKEN
				{
				DebugLocation(213, 4);
				REPLACEMENTTOKEN47=(CommonToken)Match(input,REPLACEMENTTOKEN,Follow._REPLACEMENTTOKEN_in_media_feature1197); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_REPLACEMENTTOKEN.Add(REPLACEMENTTOKEN47);



				{
				// AST REWRITE
				// elements: REPLACEMENTTOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 214:2: -> ^( MEDIA_FEATURE REPLACEMENTTOKEN )
				{
					DebugLocation(214, 5);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:214:5: ^( MEDIA_FEATURE REPLACEMENTTOKEN )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(214, 7);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(MEDIA_FEATURE, "MEDIA_FEATURE"), root_1);

					DebugLocation(214, 21);
					adaptor.AddChild(root_1, stream_REPLACEMENTTOKEN.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("media_feature", 13);
			LeaveRule("media_feature", 13);
			LeaveRule_media_feature();
		}
		DebugLocation(215, 1);
		} finally { DebugExitRule(GrammarFileName, "media_feature"); }
		return retval;

	}
	// $ANTLR end "media_feature"

	private sealed partial class page_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public page_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_page();
	partial void LeaveRule_page();

	// $ANTLR start "page"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:221:1: page : PAGE_SYM ( pseudo_page )? CURLY_BEGIN ( declaration ( SEMICOLON )? )* CURLY_END -> ^( PAGE ( pseudo_page )? ( ^( DECLARATIONS ( declaration )* ) )? ) ;
	[GrammarRule("page")]
	private CssParser.page_return page()
	{
		EnterRule_page();
		EnterRule("page", 14);
		TraceIn("page", 14);
		CssParser.page_return retval = new CssParser.page_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken PAGE_SYM48 = default(CommonToken);
		CommonToken CURLY_BEGIN50 = default(CommonToken);
		CommonToken SEMICOLON52 = default(CommonToken);
		CommonToken CURLY_END53 = default(CommonToken);
		CssParser.pseudo_page_return pseudo_page49 = default(CssParser.pseudo_page_return);
		CssParser.declaration_return declaration51 = default(CssParser.declaration_return);

		object PAGE_SYM48_tree = default(object);
		object CURLY_BEGIN50_tree = default(object);
		object SEMICOLON52_tree = default(object);
		object CURLY_END53_tree = default(object);
		RewriteRuleITokenStream stream_PAGE_SYM=new RewriteRuleITokenStream(adaptor,"token PAGE_SYM");
		RewriteRuleITokenStream stream_CURLY_BEGIN=new RewriteRuleITokenStream(adaptor,"token CURLY_BEGIN");
		RewriteRuleITokenStream stream_SEMICOLON=new RewriteRuleITokenStream(adaptor,"token SEMICOLON");
		RewriteRuleITokenStream stream_CURLY_END=new RewriteRuleITokenStream(adaptor,"token CURLY_END");
		RewriteRuleSubtreeStream stream_pseudo_page=new RewriteRuleSubtreeStream(adaptor,"rule pseudo_page");
		RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "page");
		DebugLocation(221, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:222:5: ( PAGE_SYM ( pseudo_page )? CURLY_BEGIN ( declaration ( SEMICOLON )? )* CURLY_END -> ^( PAGE ( pseudo_page )? ( ^( DECLARATIONS ( declaration )* ) )? ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:222:7: PAGE_SYM ( pseudo_page )? CURLY_BEGIN ( declaration ( SEMICOLON )? )* CURLY_END
			{
			DebugLocation(222, 7);
			PAGE_SYM48=(CommonToken)Match(input,PAGE_SYM,Follow._PAGE_SYM_in_page1224); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PAGE_SYM.Add(PAGE_SYM48);

			DebugLocation(222, 16);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:222:16: ( pseudo_page )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==COLON))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:222:16: pseudo_page
				{
				DebugLocation(222, 16);
				PushFollow(Follow._pseudo_page_in_page1226);
				pseudo_page49=pseudo_page();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_pseudo_page.Add(pseudo_page49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(222, 29);
			CURLY_BEGIN50=(CommonToken)Match(input,CURLY_BEGIN,Follow._CURLY_BEGIN_in_page1229); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CURLY_BEGIN.Add(CURLY_BEGIN50);

			DebugLocation(222, 41);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:222:41: ( declaration ( SEMICOLON )? )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==IDENT||LA19_0==IMPORTANT_COMMENTS||LA19_0==REPLACEMENTTOKEN||LA19_0==STAR))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:222:42: declaration ( SEMICOLON )?
					{
					DebugLocation(222, 42);
					PushFollow(Follow._declaration_in_page1232);
					declaration51=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_declaration.Add(declaration51.Tree);
					DebugLocation(222, 54);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:222:54: ( SEMICOLON )?
					int alt18=2;
					try { DebugEnterSubRule(18);
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==SEMICOLON))
					{
						alt18 = 1;
					}
					} finally { DebugExitDecision(18); }
					switch (alt18)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:222:54: SEMICOLON
						{
						DebugLocation(222, 54);
						SEMICOLON52=(CommonToken)Match(input,SEMICOLON,Follow._SEMICOLON_in_page1234); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SEMICOLON.Add(SEMICOLON52);


						}
						break;

					}
					} finally { DebugExitSubRule(18); }


					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }

			DebugLocation(222, 67);
			CURLY_END53=(CommonToken)Match(input,CURLY_END,Follow._CURLY_END_in_page1239); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CURLY_END.Add(CURLY_END53);



			{
			// AST REWRITE
			// elements: pseudo_page, declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 223:5: -> ^( PAGE ( pseudo_page )? ( ^( DECLARATIONS ( declaration )* ) )? )
			{
				DebugLocation(223, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:223:8: ^( PAGE ( pseudo_page )? ( ^( DECLARATIONS ( declaration )* ) )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(223, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PAGE, "PAGE"), root_1);

				DebugLocation(223, 15);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:223:15: ( pseudo_page )?
				if (stream_pseudo_page.HasNext)
				{
					DebugLocation(223, 15);
					adaptor.AddChild(root_1, stream_pseudo_page.NextTree());

				}
				stream_pseudo_page.Reset();
				DebugLocation(223, 28);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:223:28: ( ^( DECLARATIONS ( declaration )* ) )?
				if (stream_declaration.HasNext)
				{
					DebugLocation(223, 28);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:223:28: ^( DECLARATIONS ( declaration )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(223, 30);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(DECLARATIONS, "DECLARATIONS"), root_2);

					DebugLocation(223, 43);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:223:43: ( declaration )*
					while ( stream_declaration.HasNext )
					{
						DebugLocation(223, 43);
						adaptor.AddChild(root_2, stream_declaration.NextTree());

					}
					stream_declaration.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("page", 14);
			LeaveRule("page", 14);
			LeaveRule_page();
		}
		DebugLocation(224, 4);
		} finally { DebugExitRule(GrammarFileName, "page"); }
		return retval;

	}
	// $ANTLR end "page"

	private sealed partial class pseudo_page_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pseudo_page_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_pseudo_page();
	partial void LeaveRule_pseudo_page();

	// $ANTLR start "pseudo_page"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:229:1: pseudo_page : COLON IDENT -> ^( PSEUDO_PAGE COLON IDENT ) ;
	[GrammarRule("pseudo_page")]
	private CssParser.pseudo_page_return pseudo_page()
	{
		EnterRule_pseudo_page();
		EnterRule("pseudo_page", 15);
		TraceIn("pseudo_page", 15);
		CssParser.pseudo_page_return retval = new CssParser.pseudo_page_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken COLON54 = default(CommonToken);
		CommonToken IDENT55 = default(CommonToken);

		object COLON54_tree = default(object);
		object IDENT55_tree = default(object);
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");

		try { DebugEnterRule(GrammarFileName, "pseudo_page");
		DebugLocation(229, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:230:5: ( COLON IDENT -> ^( PSEUDO_PAGE COLON IDENT ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:230:7: COLON IDENT
			{
			DebugLocation(230, 7);
			COLON54=(CommonToken)Match(input,COLON,Follow._COLON_in_pseudo_page1280); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_COLON.Add(COLON54);

			DebugLocation(230, 13);
			IDENT55=(CommonToken)Match(input,IDENT,Follow._IDENT_in_pseudo_page1282); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT55);



			{
			// AST REWRITE
			// elements: COLON, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 231:5: -> ^( PSEUDO_PAGE COLON IDENT )
			{
				DebugLocation(231, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:231:8: ^( PSEUDO_PAGE COLON IDENT )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(231, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PSEUDO_PAGE, "PSEUDO_PAGE"), root_1);

				DebugLocation(231, 22);
				adaptor.AddChild(root_1, stream_COLON.NextNode());
				DebugLocation(231, 28);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pseudo_page", 15);
			LeaveRule("pseudo_page", 15);
			LeaveRule_pseudo_page();
		}
		DebugLocation(232, 4);
		} finally { DebugExitRule(GrammarFileName, "pseudo_page"); }
		return retval;

	}
	// $ANTLR end "pseudo_page"

	private sealed partial class operator_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public operator_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:237:1: operator : ( FORWARD_SLASH | COMMA | STAR | EQUALS );
	[GrammarRule("operator")]
	private CssParser.operator_return @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 16);
		TraceIn("operator", 16);
		CssParser.operator_return retval = new CssParser.operator_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken set56 = default(CommonToken);

		object set56_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(237, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:238:5: ( FORWARD_SLASH | COMMA | STAR | EQUALS )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(238, 5);
			set56=(CommonToken)input.LT(1);
			if (input.LA(1)==COMMA||input.LA(1)==EQUALS||input.LA(1)==FORWARD_SLASH||input.LA(1)==STAR)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set56));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 16);
			LeaveRule("operator", 16);
			LeaveRule_operator();
		}
		DebugLocation(239, 4);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	private sealed partial class unary_operator_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public unary_operator_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_unary_operator();
	partial void LeaveRule_unary_operator();

	// $ANTLR start "unary_operator"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:244:1: unary_operator : ( MINUS -> ^( UNARY MINUS ) | PLUS -> ^( UNARY PLUS ) );
	[GrammarRule("unary_operator")]
	private CssParser.unary_operator_return unary_operator()
	{
		EnterRule_unary_operator();
		EnterRule("unary_operator", 17);
		TraceIn("unary_operator", 17);
		CssParser.unary_operator_return retval = new CssParser.unary_operator_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken MINUS57 = default(CommonToken);
		CommonToken PLUS58 = default(CommonToken);

		object MINUS57_tree = default(object);
		object PLUS58_tree = default(object);
		RewriteRuleITokenStream stream_MINUS=new RewriteRuleITokenStream(adaptor,"token MINUS");
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");

		try { DebugEnterRule(GrammarFileName, "unary_operator");
		DebugLocation(244, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:245:5: ( MINUS -> ^( UNARY MINUS ) | PLUS -> ^( UNARY PLUS ) )
			int alt20=2;
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==MINUS))
			{
				alt20 = 1;
			}
			else if ((LA20_0==PLUS))
			{
				alt20 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:245:7: MINUS
				{
				DebugLocation(245, 7);
				MINUS57=(CommonToken)Match(input,MINUS,Follow._MINUS_in_unary_operator1349); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MINUS.Add(MINUS57);



				{
				// AST REWRITE
				// elements: MINUS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 245:13: -> ^( UNARY MINUS )
				{
					DebugLocation(245, 16);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:245:16: ^( UNARY MINUS )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(245, 18);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(UNARY, "UNARY"), root_1);

					DebugLocation(245, 24);
					adaptor.AddChild(root_1, stream_MINUS.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:246:7: PLUS
				{
				DebugLocation(246, 7);
				PLUS58=(CommonToken)Match(input,PLUS,Follow._PLUS_in_unary_operator1365); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PLUS.Add(PLUS58);



				{
				// AST REWRITE
				// elements: PLUS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 246:12: -> ^( UNARY PLUS )
				{
					DebugLocation(246, 15);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:246:15: ^( UNARY PLUS )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(246, 17);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(UNARY, "UNARY"), root_1);

					DebugLocation(246, 23);
					adaptor.AddChild(root_1, stream_PLUS.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_operator", 17);
			LeaveRule("unary_operator", 17);
			LeaveRule_unary_operator();
		}
		DebugLocation(247, 4);
		} finally { DebugExitRule(GrammarFileName, "unary_operator"); }
		return retval;

	}
	// $ANTLR end "unary_operator"

	private sealed partial class property_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public property_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_property();
	partial void LeaveRule_property();

	// $ANTLR start "property"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:252:1: property : ( ( STAR )? IDENT ( IMPORTANT_COMMENTS )* -> ^( PROPERTY ( STAR )? IDENT ( IMPORTANT_COMMENTS )* ) | REPLACEMENTTOKEN -> ^( PROPERTY REPLACEMENTTOKEN ) );
	[GrammarRule("property")]
	private CssParser.property_return property()
	{
		EnterRule_property();
		EnterRule("property", 18);
		TraceIn("property", 18);
		CssParser.property_return retval = new CssParser.property_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken STAR59 = default(CommonToken);
		CommonToken IDENT60 = default(CommonToken);
		CommonToken IMPORTANT_COMMENTS61 = default(CommonToken);
		CommonToken REPLACEMENTTOKEN62 = default(CommonToken);

		object STAR59_tree = default(object);
		object IDENT60_tree = default(object);
		object IMPORTANT_COMMENTS61_tree = default(object);
		object REPLACEMENTTOKEN62_tree = default(object);
		RewriteRuleITokenStream stream_STAR=new RewriteRuleITokenStream(adaptor,"token STAR");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_IMPORTANT_COMMENTS=new RewriteRuleITokenStream(adaptor,"token IMPORTANT_COMMENTS");
		RewriteRuleITokenStream stream_REPLACEMENTTOKEN=new RewriteRuleITokenStream(adaptor,"token REPLACEMENTTOKEN");

		try { DebugEnterRule(GrammarFileName, "property");
		DebugLocation(252, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:253:5: ( ( STAR )? IDENT ( IMPORTANT_COMMENTS )* -> ^( PROPERTY ( STAR )? IDENT ( IMPORTANT_COMMENTS )* ) | REPLACEMENTTOKEN -> ^( PROPERTY REPLACEMENTTOKEN ) )
			int alt23=2;
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==IDENT||LA23_0==STAR))
			{
				alt23 = 1;
			}
			else if ((LA23_0==REPLACEMENTTOKEN))
			{
				alt23 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:253:7: ( STAR )? IDENT ( IMPORTANT_COMMENTS )*
				{
				DebugLocation(253, 7);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:253:7: ( STAR )?
				int alt21=2;
				try { DebugEnterSubRule(21);
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==STAR))
				{
					alt21 = 1;
				}
				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:253:8: STAR
					{
					DebugLocation(253, 8);
					STAR59=(CommonToken)Match(input,STAR,Follow._STAR_in_property1394); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STAR.Add(STAR59);


					}
					break;

				}
				} finally { DebugExitSubRule(21); }

				DebugLocation(253, 15);
				IDENT60=(CommonToken)Match(input,IDENT,Follow._IDENT_in_property1398); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT60);

				DebugLocation(253, 21);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:253:21: ( IMPORTANT_COMMENTS )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==IMPORTANT_COMMENTS))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:253:21: IMPORTANT_COMMENTS
						{
						DebugLocation(253, 21);
						IMPORTANT_COMMENTS61=(CommonToken)Match(input,IMPORTANT_COMMENTS,Follow._IMPORTANT_COMMENTS_in_property1400); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IMPORTANT_COMMENTS.Add(IMPORTANT_COMMENTS61);


						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }



				{
				// AST REWRITE
				// elements: STAR, IDENT, IMPORTANT_COMMENTS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 254:5: -> ^( PROPERTY ( STAR )? IDENT ( IMPORTANT_COMMENTS )* )
				{
					DebugLocation(254, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:254:8: ^( PROPERTY ( STAR )? IDENT ( IMPORTANT_COMMENTS )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(254, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PROPERTY, "PROPERTY"), root_1);

					DebugLocation(254, 19);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:254:19: ( STAR )?
					if (stream_STAR.HasNext)
					{
						DebugLocation(254, 19);
						adaptor.AddChild(root_1, stream_STAR.NextNode());

					}
					stream_STAR.Reset();
					DebugLocation(254, 25);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());
					DebugLocation(254, 31);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:254:31: ( IMPORTANT_COMMENTS )*
					while ( stream_IMPORTANT_COMMENTS.HasNext )
					{
						DebugLocation(254, 31);
						adaptor.AddChild(root_1, stream_IMPORTANT_COMMENTS.NextNode());

					}
					stream_IMPORTANT_COMMENTS.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:255:3: REPLACEMENTTOKEN
				{
				DebugLocation(255, 3);
				REPLACEMENTTOKEN62=(CommonToken)Match(input,REPLACEMENTTOKEN,Follow._REPLACEMENTTOKEN_in_property1424); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_REPLACEMENTTOKEN.Add(REPLACEMENTTOKEN62);



				{
				// AST REWRITE
				// elements: REPLACEMENTTOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 256:2: -> ^( PROPERTY REPLACEMENTTOKEN )
				{
					DebugLocation(256, 5);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:256:5: ^( PROPERTY REPLACEMENTTOKEN )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(256, 7);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PROPERTY, "PROPERTY"), root_1);

					DebugLocation(256, 16);
					adaptor.AddChild(root_1, stream_REPLACEMENTTOKEN.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("property", 18);
			LeaveRule("property", 18);
			LeaveRule_property();
		}
		DebugLocation(257, 4);
		} finally { DebugExitRule(GrammarFileName, "property"); }
		return retval;

	}
	// $ANTLR end "property"

	private sealed partial class ruleset_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public ruleset_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_ruleset();
	partial void LeaveRule_ruleset();

	// $ANTLR start "ruleset"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:263:1: ruleset : selectors_group CURLY_BEGIN ( declaration ( SEMICOLON )? )* ( IMPORTANT_COMMENTS )* CURLY_END -> ^( RULESET selectors_group ( ^( DECLARATIONS ( declaration )* ) )? ( IMPORTANT_COMMENTS )* ) ;
	[GrammarRule("ruleset")]
	private CssParser.ruleset_return ruleset()
	{
		EnterRule_ruleset();
		EnterRule("ruleset", 19);
		TraceIn("ruleset", 19);
		CssParser.ruleset_return retval = new CssParser.ruleset_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken CURLY_BEGIN64 = default(CommonToken);
		CommonToken SEMICOLON66 = default(CommonToken);
		CommonToken IMPORTANT_COMMENTS67 = default(CommonToken);
		CommonToken CURLY_END68 = default(CommonToken);
		CssParser.selectors_group_return selectors_group63 = default(CssParser.selectors_group_return);
		CssParser.declaration_return declaration65 = default(CssParser.declaration_return);

		object CURLY_BEGIN64_tree = default(object);
		object SEMICOLON66_tree = default(object);
		object IMPORTANT_COMMENTS67_tree = default(object);
		object CURLY_END68_tree = default(object);
		RewriteRuleITokenStream stream_CURLY_BEGIN=new RewriteRuleITokenStream(adaptor,"token CURLY_BEGIN");
		RewriteRuleITokenStream stream_SEMICOLON=new RewriteRuleITokenStream(adaptor,"token SEMICOLON");
		RewriteRuleITokenStream stream_IMPORTANT_COMMENTS=new RewriteRuleITokenStream(adaptor,"token IMPORTANT_COMMENTS");
		RewriteRuleITokenStream stream_CURLY_END=new RewriteRuleITokenStream(adaptor,"token CURLY_END");
		RewriteRuleSubtreeStream stream_selectors_group=new RewriteRuleSubtreeStream(adaptor,"rule selectors_group");
		RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "ruleset");
		DebugLocation(263, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:264:5: ( selectors_group CURLY_BEGIN ( declaration ( SEMICOLON )? )* ( IMPORTANT_COMMENTS )* CURLY_END -> ^( RULESET selectors_group ( ^( DECLARATIONS ( declaration )* ) )? ( IMPORTANT_COMMENTS )* ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:264:7: selectors_group CURLY_BEGIN ( declaration ( SEMICOLON )? )* ( IMPORTANT_COMMENTS )* CURLY_END
			{
			DebugLocation(264, 7);
			PushFollow(Follow._selectors_group_in_ruleset1454);
			selectors_group63=selectors_group();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectors_group.Add(selectors_group63.Tree);
			DebugLocation(265, 5);
			CURLY_BEGIN64=(CommonToken)Match(input,CURLY_BEGIN,Follow._CURLY_BEGIN_in_ruleset1460); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CURLY_BEGIN.Add(CURLY_BEGIN64);

			DebugLocation(266, 5);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:266:5: ( declaration ( SEMICOLON )? )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				try
				{
					alt25 = dfa25.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:266:6: declaration ( SEMICOLON )?
					{
					DebugLocation(266, 6);
					PushFollow(Follow._declaration_in_ruleset1467);
					declaration65=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_declaration.Add(declaration65.Tree);
					DebugLocation(266, 18);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:266:18: ( SEMICOLON )?
					int alt24=2;
					try { DebugEnterSubRule(24);
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==SEMICOLON))
					{
						alt24 = 1;
					}
					} finally { DebugExitDecision(24); }
					switch (alt24)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:266:18: SEMICOLON
						{
						DebugLocation(266, 18);
						SEMICOLON66=(CommonToken)Match(input,SEMICOLON,Follow._SEMICOLON_in_ruleset1469); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SEMICOLON.Add(SEMICOLON66);


						}
						break;

					}
					} finally { DebugExitSubRule(24); }


					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(267, 2);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:267:2: ( IMPORTANT_COMMENTS )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==IMPORTANT_COMMENTS))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:267:2: IMPORTANT_COMMENTS
					{
					DebugLocation(267, 2);
					IMPORTANT_COMMENTS67=(CommonToken)Match(input,IMPORTANT_COMMENTS,Follow._IMPORTANT_COMMENTS_in_ruleset1475); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IMPORTANT_COMMENTS.Add(IMPORTANT_COMMENTS67);


					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }

			DebugLocation(268, 5);
			CURLY_END68=(CommonToken)Match(input,CURLY_END,Follow._CURLY_END_in_ruleset1482); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CURLY_END.Add(CURLY_END68);



			{
			// AST REWRITE
			// elements: selectors_group, declaration, IMPORTANT_COMMENTS
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 269:5: -> ^( RULESET selectors_group ( ^( DECLARATIONS ( declaration )* ) )? ( IMPORTANT_COMMENTS )* )
			{
				DebugLocation(269, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:269:8: ^( RULESET selectors_group ( ^( DECLARATIONS ( declaration )* ) )? ( IMPORTANT_COMMENTS )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(269, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(RULESET, "RULESET"), root_1);

				DebugLocation(269, 18);
				adaptor.AddChild(root_1, stream_selectors_group.NextTree());
				DebugLocation(269, 34);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:269:34: ( ^( DECLARATIONS ( declaration )* ) )?
				if (stream_declaration.HasNext)
				{
					DebugLocation(269, 34);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:269:34: ^( DECLARATIONS ( declaration )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(269, 36);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(DECLARATIONS, "DECLARATIONS"), root_2);

					DebugLocation(269, 49);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:269:49: ( declaration )*
					while ( stream_declaration.HasNext )
					{
						DebugLocation(269, 49);
						adaptor.AddChild(root_2, stream_declaration.NextTree());

					}
					stream_declaration.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_declaration.Reset();
				DebugLocation(269, 64);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:269:64: ( IMPORTANT_COMMENTS )*
				while ( stream_IMPORTANT_COMMENTS.HasNext )
				{
					DebugLocation(269, 64);
					adaptor.AddChild(root_1, stream_IMPORTANT_COMMENTS.NextNode());

				}
				stream_IMPORTANT_COMMENTS.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ruleset", 19);
			LeaveRule("ruleset", 19);
			LeaveRule_ruleset();
		}
		DebugLocation(270, 4);
		} finally { DebugExitRule(GrammarFileName, "ruleset"); }
		return retval;

	}
	// $ANTLR end "ruleset"

	private sealed partial class selectors_group_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public selectors_group_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_selectors_group();
	partial void LeaveRule_selectors_group();

	// $ANTLR start "selectors_group"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:275:1: selectors_group : selector ( COMMA selector )* -> ^( SELECTORS_GROUP ( selector )* ) ;
	[GrammarRule("selectors_group")]
	private CssParser.selectors_group_return selectors_group()
	{
		EnterRule_selectors_group();
		EnterRule("selectors_group", 20);
		TraceIn("selectors_group", 20);
		CssParser.selectors_group_return retval = new CssParser.selectors_group_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken COMMA70 = default(CommonToken);
		CssParser.selector_return selector69 = default(CssParser.selector_return);
		CssParser.selector_return selector71 = default(CssParser.selector_return);

		object COMMA70_tree = default(object);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
		try { DebugEnterRule(GrammarFileName, "selectors_group");
		DebugLocation(275, 2);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:276:3: ( selector ( COMMA selector )* -> ^( SELECTORS_GROUP ( selector )* ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:276:5: selector ( COMMA selector )*
			{
			DebugLocation(276, 5);
			PushFollow(Follow._selector_in_selectors_group1523);
			selector69=selector();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector.Add(selector69.Tree);
			DebugLocation(276, 14);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:276:14: ( COMMA selector )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==COMMA))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:276:15: COMMA selector
					{
					DebugLocation(276, 15);
					COMMA70=(CommonToken)Match(input,COMMA,Follow._COMMA_in_selectors_group1526); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA70);

					DebugLocation(276, 21);
					PushFollow(Follow._selector_in_selectors_group1528);
					selector71=selector();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector.Add(selector71.Tree);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }



			{
			// AST REWRITE
			// elements: selector
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 277:3: -> ^( SELECTORS_GROUP ( selector )* )
			{
				DebugLocation(277, 6);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:277:6: ^( SELECTORS_GROUP ( selector )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(277, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(SELECTORS_GROUP, "SELECTORS_GROUP"), root_1);

				DebugLocation(277, 24);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:277:24: ( selector )*
				while ( stream_selector.HasNext )
				{
					DebugLocation(277, 24);
					adaptor.AddChild(root_1, stream_selector.NextTree());

				}
				stream_selector.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectors_group", 20);
			LeaveRule("selectors_group", 20);
			LeaveRule_selectors_group();
		}
		DebugLocation(278, 2);
		} finally { DebugExitRule(GrammarFileName, "selectors_group"); }
		return retval;

	}
	// $ANTLR end "selectors_group"

	private sealed partial class selector_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public selector_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_selector();
	partial void LeaveRule_selector();

	// $ANTLR start "selector"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:283:1: selector : simple_selector_sequence ( combinator_simple_selector_sequence )* -> ^( SELECTOR simple_selector_sequence ( ^( COMBINATOR_SIMPLE_SELECTOR_SEQUENCES ( combinator_simple_selector_sequence )* ) )? ) ;
	[GrammarRule("selector")]
	private CssParser.selector_return selector()
	{
		EnterRule_selector();
		EnterRule("selector", 21);
		TraceIn("selector", 21);
		CssParser.selector_return retval = new CssParser.selector_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CssParser.simple_selector_sequence_return simple_selector_sequence72 = default(CssParser.simple_selector_sequence_return);
		CssParser.combinator_simple_selector_sequence_return combinator_simple_selector_sequence73 = default(CssParser.combinator_simple_selector_sequence_return);

		RewriteRuleSubtreeStream stream_simple_selector_sequence=new RewriteRuleSubtreeStream(adaptor,"rule simple_selector_sequence");
		RewriteRuleSubtreeStream stream_combinator_simple_selector_sequence=new RewriteRuleSubtreeStream(adaptor,"rule combinator_simple_selector_sequence");
		try { DebugEnterRule(GrammarFileName, "selector");
		DebugLocation(283, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:284:5: ( simple_selector_sequence ( combinator_simple_selector_sequence )* -> ^( SELECTOR simple_selector_sequence ( ^( COMBINATOR_SIMPLE_SELECTOR_SEQUENCES ( combinator_simple_selector_sequence )* ) )? ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:284:7: simple_selector_sequence ( combinator_simple_selector_sequence )*
			{
			DebugLocation(284, 7);
			PushFollow(Follow._simple_selector_sequence_in_selector1559);
			simple_selector_sequence72=simple_selector_sequence();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_simple_selector_sequence.Add(simple_selector_sequence72.Tree);
			DebugLocation(284, 32);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:284:32: ( combinator_simple_selector_sequence )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==AT_NAME||(LA28_0>=CLASS_IDENT && LA28_0<=COLON)||LA28_0==GREATER||LA28_0==HASH_IDENT||LA28_0==IDENT||(LA28_0>=PIPE && LA28_0<=PLUS)||LA28_0==REPLACEMENTTOKEN||LA28_0==SQUARE_BEGIN||LA28_0==STAR||LA28_0==TILDE||LA28_0==WS))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:284:33: combinator_simple_selector_sequence
					{
					DebugLocation(284, 33);
					PushFollow(Follow._combinator_simple_selector_sequence_in_selector1562);
					combinator_simple_selector_sequence73=combinator_simple_selector_sequence();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_combinator_simple_selector_sequence.Add(combinator_simple_selector_sequence73.Tree);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: simple_selector_sequence, combinator_simple_selector_sequence
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 285:5: -> ^( SELECTOR simple_selector_sequence ( ^( COMBINATOR_SIMPLE_SELECTOR_SEQUENCES ( combinator_simple_selector_sequence )* ) )? )
			{
				DebugLocation(285, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:285:8: ^( SELECTOR simple_selector_sequence ( ^( COMBINATOR_SIMPLE_SELECTOR_SEQUENCES ( combinator_simple_selector_sequence )* ) )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(285, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(SELECTOR, "SELECTOR"), root_1);

				DebugLocation(285, 19);
				adaptor.AddChild(root_1, stream_simple_selector_sequence.NextTree());
				DebugLocation(285, 44);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:285:44: ( ^( COMBINATOR_SIMPLE_SELECTOR_SEQUENCES ( combinator_simple_selector_sequence )* ) )?
				if (stream_combinator_simple_selector_sequence.HasNext)
				{
					DebugLocation(285, 44);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:285:44: ^( COMBINATOR_SIMPLE_SELECTOR_SEQUENCES ( combinator_simple_selector_sequence )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(285, 46);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(COMBINATOR_SIMPLE_SELECTOR_SEQUENCES, "COMBINATOR_SIMPLE_SELECTOR_SEQUENCES"), root_2);

					DebugLocation(285, 83);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:285:83: ( combinator_simple_selector_sequence )*
					while ( stream_combinator_simple_selector_sequence.HasNext )
					{
						DebugLocation(285, 83);
						adaptor.AddChild(root_2, stream_combinator_simple_selector_sequence.NextTree());

					}
					stream_combinator_simple_selector_sequence.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_combinator_simple_selector_sequence.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector", 21);
			LeaveRule("selector", 21);
			LeaveRule_selector();
		}
		DebugLocation(286, 4);
		} finally { DebugExitRule(GrammarFileName, "selector"); }
		return retval;

	}
	// $ANTLR end "selector"

	private sealed partial class combinator_simple_selector_sequence_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public combinator_simple_selector_sequence_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_combinator_simple_selector_sequence();
	partial void LeaveRule_combinator_simple_selector_sequence();

	// $ANTLR start "combinator_simple_selector_sequence"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:288:1: combinator_simple_selector_sequence : combinator simple_selector_sequence -> ^( COMBINATOR_SIMPLE_SELECTOR combinator simple_selector_sequence ) ;
	[GrammarRule("combinator_simple_selector_sequence")]
	private CssParser.combinator_simple_selector_sequence_return combinator_simple_selector_sequence()
	{
		EnterRule_combinator_simple_selector_sequence();
		EnterRule("combinator_simple_selector_sequence", 22);
		TraceIn("combinator_simple_selector_sequence", 22);
		CssParser.combinator_simple_selector_sequence_return retval = new CssParser.combinator_simple_selector_sequence_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CssParser.combinator_return combinator74 = default(CssParser.combinator_return);
		CssParser.simple_selector_sequence_return simple_selector_sequence75 = default(CssParser.simple_selector_sequence_return);

		RewriteRuleSubtreeStream stream_combinator=new RewriteRuleSubtreeStream(adaptor,"rule combinator");
		RewriteRuleSubtreeStream stream_simple_selector_sequence=new RewriteRuleSubtreeStream(adaptor,"rule simple_selector_sequence");
		try { DebugEnterRule(GrammarFileName, "combinator_simple_selector_sequence");
		DebugLocation(288, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:289:5: ( combinator simple_selector_sequence -> ^( COMBINATOR_SIMPLE_SELECTOR combinator simple_selector_sequence ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:289:7: combinator simple_selector_sequence
			{
			DebugLocation(289, 7);
			PushFollow(Follow._combinator_in_combinator_simple_selector_sequence1601);
			combinator74=combinator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_combinator.Add(combinator74.Tree);
			DebugLocation(289, 18);
			PushFollow(Follow._simple_selector_sequence_in_combinator_simple_selector_sequence1603);
			simple_selector_sequence75=simple_selector_sequence();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_simple_selector_sequence.Add(simple_selector_sequence75.Tree);


			{
			// AST REWRITE
			// elements: combinator, simple_selector_sequence
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 290:6: -> ^( COMBINATOR_SIMPLE_SELECTOR combinator simple_selector_sequence )
			{
				DebugLocation(290, 9);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:290:9: ^( COMBINATOR_SIMPLE_SELECTOR combinator simple_selector_sequence )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(290, 11);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COMBINATOR_SIMPLE_SELECTOR, "COMBINATOR_SIMPLE_SELECTOR"), root_1);

				DebugLocation(290, 38);
				adaptor.AddChild(root_1, stream_combinator.NextTree());
				DebugLocation(290, 49);
				adaptor.AddChild(root_1, stream_simple_selector_sequence.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("combinator_simple_selector_sequence", 22);
			LeaveRule("combinator_simple_selector_sequence", 22);
			LeaveRule_combinator_simple_selector_sequence();
		}
		DebugLocation(291, 4);
		} finally { DebugExitRule(GrammarFileName, "combinator_simple_selector_sequence"); }
		return retval;

	}
	// $ANTLR end "combinator_simple_selector_sequence"

	private sealed partial class combinator_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public combinator_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_combinator();
	partial void LeaveRule_combinator();

	// $ANTLR start "combinator"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:297:1: combinator : ( (combinatorValue= PLUS |combinatorValue= GREATER |combinatorValue= TILDE ) -> ^( COMBINATOR $combinatorValue) | whitespace -> ^( COMBINATOR whitespace ) );
	[GrammarRule("combinator")]
	private CssParser.combinator_return combinator()
	{
		EnterRule_combinator();
		EnterRule("combinator", 23);
		TraceIn("combinator", 23);
		CssParser.combinator_return retval = new CssParser.combinator_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken combinatorValue = default(CommonToken);
		CssParser.whitespace_return whitespace76 = default(CssParser.whitespace_return);

		object combinatorValue_tree = default(object);
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleITokenStream stream_GREATER=new RewriteRuleITokenStream(adaptor,"token GREATER");
		RewriteRuleITokenStream stream_TILDE=new RewriteRuleITokenStream(adaptor,"token TILDE");
		RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
		try { DebugEnterRule(GrammarFileName, "combinator");
		DebugLocation(297, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:298:5: ( (combinatorValue= PLUS |combinatorValue= GREATER |combinatorValue= TILDE ) -> ^( COMBINATOR $combinatorValue) | whitespace -> ^( COMBINATOR whitespace ) )
			int alt30=2;
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==GREATER||LA30_0==PLUS||LA30_0==TILDE))
			{
				alt30 = 1;
			}
			else if ((LA30_0==AT_NAME||(LA30_0>=CLASS_IDENT && LA30_0<=COLON)||LA30_0==HASH_IDENT||LA30_0==IDENT||LA30_0==PIPE||LA30_0==REPLACEMENTTOKEN||LA30_0==SQUARE_BEGIN||LA30_0==STAR||LA30_0==WS))
			{
				alt30 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:298:7: (combinatorValue= PLUS |combinatorValue= GREATER |combinatorValue= TILDE )
				{
				DebugLocation(298, 7);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:298:7: (combinatorValue= PLUS |combinatorValue= GREATER |combinatorValue= TILDE )
				int alt29=3;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				switch (input.LA(1))
				{
				case PLUS:
					{
					alt29 = 1;
					}
					break;
				case GREATER:
					{
					alt29 = 2;
					}
					break;
				case TILDE:
					{
					alt29 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:298:8: combinatorValue= PLUS
					{
					DebugLocation(298, 24);
					combinatorValue=(CommonToken)Match(input,PLUS,Follow._PLUS_in_combinator1644); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_PLUS.Add(combinatorValue);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:299:6: combinatorValue= GREATER
					{
					DebugLocation(299, 22);
					combinatorValue=(CommonToken)Match(input,GREATER,Follow._GREATER_in_combinator1655); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_GREATER.Add(combinatorValue);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:300:6: combinatorValue= TILDE
					{
					DebugLocation(300, 22);
					combinatorValue=(CommonToken)Match(input,TILDE,Follow._TILDE_in_combinator1666); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_TILDE.Add(combinatorValue);


					}
					break;

				}
				} finally { DebugExitSubRule(29); }



				{
				// AST REWRITE
				// elements: combinatorValue
				// token labels: combinatorValue
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_combinatorValue=new RewriteRuleITokenStream(adaptor,"token combinatorValue",combinatorValue);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 301:5: -> ^( COMBINATOR $combinatorValue)
				{
					DebugLocation(301, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:301:8: ^( COMBINATOR $combinatorValue)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(301, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COMBINATOR, "COMBINATOR"), root_1);

					DebugLocation(301, 22);
					adaptor.AddChild(root_1, stream_combinatorValue.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:302:6: whitespace
				{
				DebugLocation(302, 6);
				PushFollow(Follow._whitespace_in_combinator1687);
				whitespace76=whitespace();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_whitespace.Add(whitespace76.Tree);


				{
				// AST REWRITE
				// elements: whitespace
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 303:5: -> ^( COMBINATOR whitespace )
				{
					DebugLocation(303, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:303:8: ^( COMBINATOR whitespace )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(303, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COMBINATOR, "COMBINATOR"), root_1);

					DebugLocation(303, 21);
					adaptor.AddChild(root_1, stream_whitespace.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("combinator", 23);
			LeaveRule("combinator", 23);
			LeaveRule_combinator();
		}
		DebugLocation(304, 4);
		} finally { DebugExitRule(GrammarFileName, "combinator"); }
		return retval;

	}
	// $ANTLR end "combinator"

	private sealed partial class whitespace_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public whitespace_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_whitespace();
	partial void LeaveRule_whitespace();

	// $ANTLR start "whitespace"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:306:1: whitespace : ( (ws= ( ( WS )=> WS ) )? ) -> ^( WHITESPACE $ws) ;
	[GrammarRule("whitespace")]
	private CssParser.whitespace_return whitespace()
	{
		EnterRule_whitespace();
		EnterRule("whitespace", 24);
		TraceIn("whitespace", 24);
		CssParser.whitespace_return retval = new CssParser.whitespace_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken ws = default(CommonToken);
		CommonToken WS77 = default(CommonToken);

		object ws_tree = default(object);
		object WS77_tree = default(object);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");

		try { DebugEnterRule(GrammarFileName, "whitespace");
		DebugLocation(306, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:307:5: ( ( (ws= ( ( WS )=> WS ) )? ) -> ^( WHITESPACE $ws) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:307:7: ( (ws= ( ( WS )=> WS ) )? )
			{
			DebugLocation(307, 7);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:307:7: ( (ws= ( ( WS )=> WS ) )? )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:307:8: (ws= ( ( WS )=> WS ) )?
			{
			DebugLocation(307, 11);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:307:11: (ws= ( ( WS )=> WS ) )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==WS))
			{
				int LA31_1 = input.LA(2);

				if ((EvaluatePredicate(synpred1_CssParser_fragment)))
				{
					alt31 = 1;
				}
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:307:11: ws= ( ( WS )=> WS )
				{
				DebugLocation(307, 11);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:307:13: ( ( WS )=> WS )
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:307:14: ( WS )=> WS
				{
				DebugLocation(307, 22);
				WS77=(CommonToken)Match(input,WS,Follow._WS_in_whitespace1728); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS77);


				}


				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(308, 5);
			if (state.backtracking == 0)
			{

				        ws = GetWhitespaceToken();
				    
			}

			}



			{
			// AST REWRITE
			// elements: ws
			// token labels: ws
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_ws=new RewriteRuleITokenStream(adaptor,"token ws",ws);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 311:5: -> ^( WHITESPACE $ws)
			{
				DebugLocation(311, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:311:8: ^( WHITESPACE $ws)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(311, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(WHITESPACE, "WHITESPACE"), root_1);

				DebugLocation(311, 22);
				adaptor.AddChild(root_1, stream_ws.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whitespace", 24);
			LeaveRule("whitespace", 24);
			LeaveRule_whitespace();
		}
		DebugLocation(312, 4);
		} finally { DebugExitRule(GrammarFileName, "whitespace"); }
		return retval;

	}
	// $ANTLR end "whitespace"

	private sealed partial class simple_selector_sequence_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public simple_selector_sequence_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_simple_selector_sequence();
	partial void LeaveRule_simple_selector_sequence();

	// $ANTLR start "simple_selector_sequence"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:322:1: simple_selector_sequence : ( ( ( ( universal )=> universal ) | ( ( type_selector )=> type_selector ) ) whitespace ( ( hashclassatnameattribpseudonegation )=> hashclassatnameattribpseudonegation )? -> ^( SIMPLE_SELECTOR_SEQUENCE ( type_selector )? ( universal )? ( whitespace )? ( ^( HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES hashclassatnameattribpseudonegation ) )? ) | ( hashclassatnameattribpseudonegation )=> hashclassatnameattribpseudonegation -> ^( SIMPLE_SELECTOR_SEQUENCE ^( HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES hashclassatnameattribpseudonegation ) ) );
	[GrammarRule("simple_selector_sequence")]
	private CssParser.simple_selector_sequence_return simple_selector_sequence()
	{
		EnterRule_simple_selector_sequence();
		EnterRule("simple_selector_sequence", 25);
		TraceIn("simple_selector_sequence", 25);
		CssParser.simple_selector_sequence_return retval = new CssParser.simple_selector_sequence_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CssParser.universal_return universal78 = default(CssParser.universal_return);
		CssParser.type_selector_return type_selector79 = default(CssParser.type_selector_return);
		CssParser.whitespace_return whitespace80 = default(CssParser.whitespace_return);
		CssParser.hashclassatnameattribpseudonegation_return hashclassatnameattribpseudonegation81 = default(CssParser.hashclassatnameattribpseudonegation_return);
		CssParser.hashclassatnameattribpseudonegation_return hashclassatnameattribpseudonegation82 = default(CssParser.hashclassatnameattribpseudonegation_return);

		RewriteRuleSubtreeStream stream_universal=new RewriteRuleSubtreeStream(adaptor,"rule universal");
		RewriteRuleSubtreeStream stream_type_selector=new RewriteRuleSubtreeStream(adaptor,"rule type_selector");
		RewriteRuleSubtreeStream stream_whitespace=new RewriteRuleSubtreeStream(adaptor,"rule whitespace");
		RewriteRuleSubtreeStream stream_hashclassatnameattribpseudonegation=new RewriteRuleSubtreeStream(adaptor,"rule hashclassatnameattribpseudonegation");
		try { DebugEnterRule(GrammarFileName, "simple_selector_sequence");
		DebugLocation(322, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:5: ( ( ( ( universal )=> universal ) | ( ( type_selector )=> type_selector ) ) whitespace ( ( hashclassatnameattribpseudonegation )=> hashclassatnameattribpseudonegation )? -> ^( SIMPLE_SELECTOR_SEQUENCE ( type_selector )? ( universal )? ( whitespace )? ( ^( HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES hashclassatnameattribpseudonegation ) )? ) | ( hashclassatnameattribpseudonegation )=> hashclassatnameattribpseudonegation -> ^( SIMPLE_SELECTOR_SEQUENCE ^( HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES hashclassatnameattribpseudonegation ) ) )
			int alt34=2;
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==IDENT||LA34_0==PIPE||LA34_0==STAR))
			{
				alt34 = 1;
			}
			else if ((LA34_0==REPLACEMENTTOKEN) && (EvaluatePredicate(synpred5_CssParser_fragment)))
			{
				alt34 = 2;
			}
			else if ((LA34_0==HASH_IDENT) && (EvaluatePredicate(synpred5_CssParser_fragment)))
			{
				alt34 = 2;
			}
			else if ((LA34_0==CLASS_IDENT) && (EvaluatePredicate(synpred5_CssParser_fragment)))
			{
				alt34 = 2;
			}
			else if ((LA34_0==AT_NAME) && (EvaluatePredicate(synpred5_CssParser_fragment)))
			{
				alt34 = 2;
			}
			else if ((LA34_0==SQUARE_BEGIN) && (EvaluatePredicate(synpred5_CssParser_fragment)))
			{
				alt34 = 2;
			}
			else if ((LA34_0==COLON) && (EvaluatePredicate(synpred5_CssParser_fragment)))
			{
				alt34 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:7: ( ( ( universal )=> universal ) | ( ( type_selector )=> type_selector ) ) whitespace ( ( hashclassatnameattribpseudonegation )=> hashclassatnameattribpseudonegation )?
				{
				DebugLocation(323, 7);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:7: ( ( ( universal )=> universal ) | ( ( type_selector )=> type_selector ) )
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				switch (input.LA(1))
				{
				case IDENT:
					{
					int LA32_1 = input.LA(2);

					if ((EvaluatePredicate(synpred2_CssParser_fragment)))
					{
						alt32 = 1;
					}
					else if ((EvaluatePredicate(synpred3_CssParser_fragment)))
					{
						alt32 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 32, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case STAR:
					{
					int LA32_2 = input.LA(2);

					if ((EvaluatePredicate(synpred2_CssParser_fragment)))
					{
						alt32 = 1;
					}
					else if ((EvaluatePredicate(synpred3_CssParser_fragment)))
					{
						alt32 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 32, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case PIPE:
					{
					int LA32_3 = input.LA(2);

					if ((LA32_3==STAR))
					{
						int LA32_6 = input.LA(3);

						if ((EvaluatePredicate(synpred2_CssParser_fragment)))
						{
							alt32 = 1;
						}
						else if ((EvaluatePredicate(synpred3_CssParser_fragment)))
						{
							alt32 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 32, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA32_3==IDENT) && (EvaluatePredicate(synpred3_CssParser_fragment)))
					{
						alt32 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 32, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:8: ( ( universal )=> universal )
					{
					DebugLocation(323, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:8: ( ( universal )=> universal )
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:9: ( universal )=> universal
					{
					DebugLocation(323, 24);
					PushFollow(Follow._universal_in_simple_selector_sequence1783);
					universal78=universal();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_universal.Add(universal78.Tree);

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:35: ( ( type_selector )=> type_selector )
					{
					DebugLocation(323, 35);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:35: ( ( type_selector )=> type_selector )
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:36: ( type_selector )=> type_selector
					{
					DebugLocation(323, 55);
					PushFollow(Follow._type_selector_in_simple_selector_sequence1793);
					type_selector79=type_selector();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_selector.Add(type_selector79.Tree);

					}


					}
					break;

				}
				} finally { DebugExitSubRule(32); }

				DebugLocation(323, 71);
				PushFollow(Follow._whitespace_in_simple_selector_sequence1797);
				whitespace80=whitespace();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_whitespace.Add(whitespace80.Tree);
				DebugLocation(323, 82);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:82: ( ( hashclassatnameattribpseudonegation )=> hashclassatnameattribpseudonegation )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				try
				{
					alt33 = dfa33.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:83: ( hashclassatnameattribpseudonegation )=> hashclassatnameattribpseudonegation
					{
					DebugLocation(323, 124);
					PushFollow(Follow._hashclassatnameattribpseudonegation_in_simple_selector_sequence1806);
					hashclassatnameattribpseudonegation81=hashclassatnameattribpseudonegation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_hashclassatnameattribpseudonegation.Add(hashclassatnameattribpseudonegation81.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(33); }



				{
				// AST REWRITE
				// elements: type_selector, universal, whitespace, hashclassatnameattribpseudonegation
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 324:5: -> ^( SIMPLE_SELECTOR_SEQUENCE ( type_selector )? ( universal )? ( whitespace )? ( ^( HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES hashclassatnameattribpseudonegation ) )? )
				{
					DebugLocation(324, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:324:8: ^( SIMPLE_SELECTOR_SEQUENCE ( type_selector )? ( universal )? ( whitespace )? ( ^( HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES hashclassatnameattribpseudonegation ) )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(324, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(SIMPLE_SELECTOR_SEQUENCE, "SIMPLE_SELECTOR_SEQUENCE"), root_1);

					DebugLocation(324, 35);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:324:35: ( type_selector )?
					if (stream_type_selector.HasNext)
					{
						DebugLocation(324, 35);
						adaptor.AddChild(root_1, stream_type_selector.NextTree());

					}
					stream_type_selector.Reset();
					DebugLocation(324, 50);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:324:50: ( universal )?
					if (stream_universal.HasNext)
					{
						DebugLocation(324, 50);
						adaptor.AddChild(root_1, stream_universal.NextTree());

					}
					stream_universal.Reset();
					DebugLocation(324, 61);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:324:61: ( whitespace )?
					if (stream_whitespace.HasNext)
					{
						DebugLocation(324, 61);
						adaptor.AddChild(root_1, stream_whitespace.NextTree());

					}
					stream_whitespace.Reset();
					DebugLocation(324, 73);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:324:73: ( ^( HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES hashclassatnameattribpseudonegation ) )?
					if (stream_hashclassatnameattribpseudonegation.HasNext)
					{
						DebugLocation(324, 73);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:324:73: ^( HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES hashclassatnameattribpseudonegation )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(324, 75);
						root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES, "HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES"), root_2);

						DebugLocation(324, 116);
						adaptor.AddChild(root_2, stream_hashclassatnameattribpseudonegation.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_hashclassatnameattribpseudonegation.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:325:7: ( hashclassatnameattribpseudonegation )=> hashclassatnameattribpseudonegation
				{
				DebugLocation(325, 48);
				PushFollow(Follow._hashclassatnameattribpseudonegation_in_simple_selector_sequence1848);
				hashclassatnameattribpseudonegation82=hashclassatnameattribpseudonegation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_hashclassatnameattribpseudonegation.Add(hashclassatnameattribpseudonegation82.Tree);


				{
				// AST REWRITE
				// elements: hashclassatnameattribpseudonegation
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 326:5: -> ^( SIMPLE_SELECTOR_SEQUENCE ^( HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES hashclassatnameattribpseudonegation ) )
				{
					DebugLocation(326, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:326:8: ^( SIMPLE_SELECTOR_SEQUENCE ^( HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES hashclassatnameattribpseudonegation ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(326, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(SIMPLE_SELECTOR_SEQUENCE, "SIMPLE_SELECTOR_SEQUENCE"), root_1);

					DebugLocation(326, 35);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:326:35: ^( HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES hashclassatnameattribpseudonegation )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(326, 37);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES, "HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES"), root_2);

					DebugLocation(326, 78);
					adaptor.AddChild(root_2, stream_hashclassatnameattribpseudonegation.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simple_selector_sequence", 25);
			LeaveRule("simple_selector_sequence", 25);
			LeaveRule_simple_selector_sequence();
		}
		DebugLocation(327, 4);
		} finally { DebugExitRule(GrammarFileName, "simple_selector_sequence"); }
		return retval;

	}
	// $ANTLR end "simple_selector_sequence"

	private sealed partial class hashclassatnameattribpseudonegation_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public hashclassatnameattribpseudonegation_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_hashclassatnameattribpseudonegation();
	partial void LeaveRule_hashclassatnameattribpseudonegation();

	// $ANTLR start "hashclassatnameattribpseudonegation"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:329:1: hashclassatnameattribpseudonegation : ( REPLACEMENTTOKEN -> ^( REPLACEMENTTOKEN ^( REPLACEMENTTOKENIDENTIFIER REPLACEMENTTOKEN ) ) | hash -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION hash ) | class -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION class ) | atname -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION atname ) | attrib -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION attrib ) | pseudo -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION pseudo ) | negation -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION negation ) );
	[GrammarRule("hashclassatnameattribpseudonegation")]
	private CssParser.hashclassatnameattribpseudonegation_return hashclassatnameattribpseudonegation()
	{
		EnterRule_hashclassatnameattribpseudonegation();
		EnterRule("hashclassatnameattribpseudonegation", 26);
		TraceIn("hashclassatnameattribpseudonegation", 26);
		CssParser.hashclassatnameattribpseudonegation_return retval = new CssParser.hashclassatnameattribpseudonegation_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken REPLACEMENTTOKEN83 = default(CommonToken);
		CssParser.hash_return hash84 = default(CssParser.hash_return);
		CssParser.class_return class85 = default(CssParser.class_return);
		CssParser.atname_return atname86 = default(CssParser.atname_return);
		CssParser.attrib_return attrib87 = default(CssParser.attrib_return);
		CssParser.pseudo_return pseudo88 = default(CssParser.pseudo_return);
		CssParser.negation_return negation89 = default(CssParser.negation_return);

		object REPLACEMENTTOKEN83_tree = default(object);
		RewriteRuleITokenStream stream_REPLACEMENTTOKEN=new RewriteRuleITokenStream(adaptor,"token REPLACEMENTTOKEN");
		RewriteRuleSubtreeStream stream_hash=new RewriteRuleSubtreeStream(adaptor,"rule hash");
		RewriteRuleSubtreeStream stream_class=new RewriteRuleSubtreeStream(adaptor,"rule class");
		RewriteRuleSubtreeStream stream_atname=new RewriteRuleSubtreeStream(adaptor,"rule atname");
		RewriteRuleSubtreeStream stream_attrib=new RewriteRuleSubtreeStream(adaptor,"rule attrib");
		RewriteRuleSubtreeStream stream_pseudo=new RewriteRuleSubtreeStream(adaptor,"rule pseudo");
		RewriteRuleSubtreeStream stream_negation=new RewriteRuleSubtreeStream(adaptor,"rule negation");
		try { DebugEnterRule(GrammarFileName, "hashclassatnameattribpseudonegation");
		DebugLocation(329, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:330:2: ( REPLACEMENTTOKEN -> ^( REPLACEMENTTOKEN ^( REPLACEMENTTOKENIDENTIFIER REPLACEMENTTOKEN ) ) | hash -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION hash ) | class -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION class ) | atname -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION atname ) | attrib -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION attrib ) | pseudo -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION pseudo ) | negation -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION negation ) )
			int alt35=7;
			try { DebugEnterDecision(35, false);
			switch (input.LA(1))
			{
			case REPLACEMENTTOKEN:
				{
				alt35 = 1;
				}
				break;
			case HASH_IDENT:
				{
				alt35 = 2;
				}
				break;
			case CLASS_IDENT:
				{
				alt35 = 3;
				}
				break;
			case AT_NAME:
				{
				alt35 = 4;
				}
				break;
			case SQUARE_BEGIN:
				{
				alt35 = 5;
				}
				break;
			case COLON:
				{
				int LA35_6 = input.LA(2);

				if ((LA35_6==NOT))
				{
					alt35 = 7;
				}
				else if ((LA35_6==COLON||LA35_6==FROM||LA35_6==IDENT||LA35_6==MSIE_IMAGE_TRANSFORM||LA35_6==TO))
				{
					alt35 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:330:4: REPLACEMENTTOKEN
				{
				DebugLocation(330, 4);
				REPLACEMENTTOKEN83=(CommonToken)Match(input,REPLACEMENTTOKEN,Follow._REPLACEMENTTOKEN_in_hashclassatnameattribpseudonegation1878); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_REPLACEMENTTOKEN.Add(REPLACEMENTTOKEN83);



				{
				// AST REWRITE
				// elements: REPLACEMENTTOKEN, REPLACEMENTTOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 331:5: -> ^( REPLACEMENTTOKEN ^( REPLACEMENTTOKENIDENTIFIER REPLACEMENTTOKEN ) )
				{
					DebugLocation(331, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:331:8: ^( REPLACEMENTTOKEN ^( REPLACEMENTTOKENIDENTIFIER REPLACEMENTTOKEN ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(331, 10);
					root_1 = (object)adaptor.BecomeRoot(stream_REPLACEMENTTOKEN.NextNode(), root_1);

					DebugLocation(331, 27);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:331:27: ^( REPLACEMENTTOKENIDENTIFIER REPLACEMENTTOKEN )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(331, 29);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(REPLACEMENTTOKENIDENTIFIER, "REPLACEMENTTOKENIDENTIFIER"), root_2);

					DebugLocation(331, 56);
					adaptor.AddChild(root_2, stream_REPLACEMENTTOKEN.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:332:7: hash
				{
				DebugLocation(332, 7);
				PushFollow(Follow._hash_in_hashclassatnameattribpseudonegation1902);
				hash84=hash();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_hash.Add(hash84.Tree);


				{
				// AST REWRITE
				// elements: hash
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 333:5: -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION hash )
				{
					DebugLocation(333, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:333:8: ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION hash )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(333, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(HASHCLASSATNAMEATTRIBPSEUDONEGATION, "HASHCLASSATNAMEATTRIBPSEUDONEGATION"), root_1);

					DebugLocation(333, 46);
					adaptor.AddChild(root_1, stream_hash.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:334:7: class
				{
				DebugLocation(334, 7);
				PushFollow(Follow._class_in_hashclassatnameattribpseudonegation1922);
				class85=@class();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_class.Add(class85.Tree);


				{
				// AST REWRITE
				// elements: class
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 335:5: -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION class )
				{
					DebugLocation(335, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:335:8: ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION class )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(335, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(HASHCLASSATNAMEATTRIBPSEUDONEGATION, "HASHCLASSATNAMEATTRIBPSEUDONEGATION"), root_1);

					DebugLocation(335, 46);
					adaptor.AddChild(root_1, stream_class.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:336:7: atname
				{
				DebugLocation(336, 7);
				PushFollow(Follow._atname_in_hashclassatnameattribpseudonegation1942);
				atname86=atname();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_atname.Add(atname86.Tree);


				{
				// AST REWRITE
				// elements: atname
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 337:5: -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION atname )
				{
					DebugLocation(337, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:337:8: ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION atname )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(337, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(HASHCLASSATNAMEATTRIBPSEUDONEGATION, "HASHCLASSATNAMEATTRIBPSEUDONEGATION"), root_1);

					DebugLocation(337, 46);
					adaptor.AddChild(root_1, stream_atname.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:338:7: attrib
				{
				DebugLocation(338, 7);
				PushFollow(Follow._attrib_in_hashclassatnameattribpseudonegation1962);
				attrib87=attrib();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attrib.Add(attrib87.Tree);


				{
				// AST REWRITE
				// elements: attrib
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 339:5: -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION attrib )
				{
					DebugLocation(339, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:339:8: ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION attrib )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(339, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(HASHCLASSATNAMEATTRIBPSEUDONEGATION, "HASHCLASSATNAMEATTRIBPSEUDONEGATION"), root_1);

					DebugLocation(339, 46);
					adaptor.AddChild(root_1, stream_attrib.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:340:7: pseudo
				{
				DebugLocation(340, 7);
				PushFollow(Follow._pseudo_in_hashclassatnameattribpseudonegation1982);
				pseudo88=pseudo();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_pseudo.Add(pseudo88.Tree);


				{
				// AST REWRITE
				// elements: pseudo
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 341:5: -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION pseudo )
				{
					DebugLocation(341, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:341:8: ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION pseudo )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(341, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(HASHCLASSATNAMEATTRIBPSEUDONEGATION, "HASHCLASSATNAMEATTRIBPSEUDONEGATION"), root_1);

					DebugLocation(341, 46);
					adaptor.AddChild(root_1, stream_pseudo.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:342:7: negation
				{
				DebugLocation(342, 7);
				PushFollow(Follow._negation_in_hashclassatnameattribpseudonegation2002);
				negation89=negation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_negation.Add(negation89.Tree);


				{
				// AST REWRITE
				// elements: negation
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 343:5: -> ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION negation )
				{
					DebugLocation(343, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:343:8: ^( HASHCLASSATNAMEATTRIBPSEUDONEGATION negation )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(343, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(HASHCLASSATNAMEATTRIBPSEUDONEGATION, "HASHCLASSATNAMEATTRIBPSEUDONEGATION"), root_1);

					DebugLocation(343, 46);
					adaptor.AddChild(root_1, stream_negation.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hashclassatnameattribpseudonegation", 26);
			LeaveRule("hashclassatnameattribpseudonegation", 26);
			LeaveRule_hashclassatnameattribpseudonegation();
		}
		DebugLocation(344, 4);
		} finally { DebugExitRule(GrammarFileName, "hashclassatnameattribpseudonegation"); }
		return retval;

	}
	// $ANTLR end "hashclassatnameattribpseudonegation"

	private sealed partial class type_selector_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public type_selector_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_type_selector();
	partial void LeaveRule_type_selector();

	// $ANTLR start "type_selector"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:355:1: type_selector : ( ( selector_namespace_prefix )=> selector_namespace_prefix )? element_name -> ^( TYPE_SELECTOR ( selector_namespace_prefix )? element_name ) ;
	[GrammarRule("type_selector")]
	private CssParser.type_selector_return type_selector()
	{
		EnterRule_type_selector();
		EnterRule("type_selector", 27);
		TraceIn("type_selector", 27);
		CssParser.type_selector_return retval = new CssParser.type_selector_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CssParser.selector_namespace_prefix_return selector_namespace_prefix90 = default(CssParser.selector_namespace_prefix_return);
		CssParser.element_name_return element_name91 = default(CssParser.element_name_return);

		RewriteRuleSubtreeStream stream_selector_namespace_prefix=new RewriteRuleSubtreeStream(adaptor,"rule selector_namespace_prefix");
		RewriteRuleSubtreeStream stream_element_name=new RewriteRuleSubtreeStream(adaptor,"rule element_name");
		try { DebugEnterRule(GrammarFileName, "type_selector");
		DebugLocation(355, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:356:5: ( ( ( selector_namespace_prefix )=> selector_namespace_prefix )? element_name -> ^( TYPE_SELECTOR ( selector_namespace_prefix )? element_name ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:356:7: ( ( selector_namespace_prefix )=> selector_namespace_prefix )? element_name
			{
			DebugLocation(356, 7);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:356:7: ( ( selector_namespace_prefix )=> selector_namespace_prefix )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==IDENT))
			{
				int LA36_1 = input.LA(2);

				if ((EvaluatePredicate(synpred6_CssParser_fragment)))
				{
					alt36 = 1;
				}
			}
			else if ((LA36_0==STAR))
			{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_CssParser_fragment)))
				{
					alt36 = 1;
				}
			}
			else if ((LA36_0==PIPE) && (EvaluatePredicate(synpred6_CssParser_fragment)))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:356:8: ( selector_namespace_prefix )=> selector_namespace_prefix
				{
				DebugLocation(356, 39);
				PushFollow(Follow._selector_namespace_prefix_in_type_selector2047);
				selector_namespace_prefix90=selector_namespace_prefix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selector_namespace_prefix.Add(selector_namespace_prefix90.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(356, 67);
			PushFollow(Follow._element_name_in_type_selector2051);
			element_name91=element_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_element_name.Add(element_name91.Tree);


			{
			// AST REWRITE
			// elements: selector_namespace_prefix, element_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 357:5: -> ^( TYPE_SELECTOR ( selector_namespace_prefix )? element_name )
			{
				DebugLocation(357, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:357:8: ^( TYPE_SELECTOR ( selector_namespace_prefix )? element_name )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(357, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TYPE_SELECTOR, "TYPE_SELECTOR"), root_1);

				DebugLocation(357, 24);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:357:24: ( selector_namespace_prefix )?
				if (stream_selector_namespace_prefix.HasNext)
				{
					DebugLocation(357, 24);
					adaptor.AddChild(root_1, stream_selector_namespace_prefix.NextTree());

				}
				stream_selector_namespace_prefix.Reset();
				DebugLocation(357, 51);
				adaptor.AddChild(root_1, stream_element_name.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_selector", 27);
			LeaveRule("type_selector", 27);
			LeaveRule_type_selector();
		}
		DebugLocation(358, 4);
		} finally { DebugExitRule(GrammarFileName, "type_selector"); }
		return retval;

	}
	// $ANTLR end "type_selector"

	private sealed partial class selector_namespace_prefix_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public selector_namespace_prefix_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_selector_namespace_prefix();
	partial void LeaveRule_selector_namespace_prefix();

	// $ANTLR start "selector_namespace_prefix"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:364:1: selector_namespace_prefix : ( element_name )? PIPE -> ^( SELECTOR_NAMESPACE_PREFIX ( element_name )? ) ;
	[GrammarRule("selector_namespace_prefix")]
	private CssParser.selector_namespace_prefix_return selector_namespace_prefix()
	{
		EnterRule_selector_namespace_prefix();
		EnterRule("selector_namespace_prefix", 28);
		TraceIn("selector_namespace_prefix", 28);
		CssParser.selector_namespace_prefix_return retval = new CssParser.selector_namespace_prefix_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken PIPE93 = default(CommonToken);
		CssParser.element_name_return element_name92 = default(CssParser.element_name_return);

		object PIPE93_tree = default(object);
		RewriteRuleITokenStream stream_PIPE=new RewriteRuleITokenStream(adaptor,"token PIPE");
		RewriteRuleSubtreeStream stream_element_name=new RewriteRuleSubtreeStream(adaptor,"rule element_name");
		try { DebugEnterRule(GrammarFileName, "selector_namespace_prefix");
		DebugLocation(364, 2);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:365:3: ( ( element_name )? PIPE -> ^( SELECTOR_NAMESPACE_PREFIX ( element_name )? ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:365:5: ( element_name )? PIPE
			{
			DebugLocation(365, 5);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:365:5: ( element_name )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==IDENT||LA37_0==STAR))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:365:5: element_name
				{
				DebugLocation(365, 5);
				PushFollow(Follow._element_name_in_selector_namespace_prefix2085);
				element_name92=element_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_element_name.Add(element_name92.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(365, 19);
			PIPE93=(CommonToken)Match(input,PIPE,Follow._PIPE_in_selector_namespace_prefix2088); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PIPE.Add(PIPE93);



			{
			// AST REWRITE
			// elements: element_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 366:3: -> ^( SELECTOR_NAMESPACE_PREFIX ( element_name )? )
			{
				DebugLocation(366, 6);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:366:6: ^( SELECTOR_NAMESPACE_PREFIX ( element_name )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(366, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(SELECTOR_NAMESPACE_PREFIX, "SELECTOR_NAMESPACE_PREFIX"), root_1);

				DebugLocation(366, 34);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:366:34: ( element_name )?
				if (stream_element_name.HasNext)
				{
					DebugLocation(366, 34);
					adaptor.AddChild(root_1, stream_element_name.NextTree());

				}
				stream_element_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_namespace_prefix", 28);
			LeaveRule("selector_namespace_prefix", 28);
			LeaveRule_selector_namespace_prefix();
		}
		DebugLocation(367, 2);
		} finally { DebugExitRule(GrammarFileName, "selector_namespace_prefix"); }
		return retval;

	}
	// $ANTLR end "selector_namespace_prefix"

	private sealed partial class element_name_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public element_name_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_element_name();
	partial void LeaveRule_element_name();

	// $ANTLR start "element_name"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:372:1: element_name : ( IDENT -> ^( ELEMENT_NAME IDENT ) | STAR -> ^( ELEMENT_NAME STAR ) );
	[GrammarRule("element_name")]
	private CssParser.element_name_return element_name()
	{
		EnterRule_element_name();
		EnterRule("element_name", 29);
		TraceIn("element_name", 29);
		CssParser.element_name_return retval = new CssParser.element_name_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken IDENT94 = default(CommonToken);
		CommonToken STAR95 = default(CommonToken);

		object IDENT94_tree = default(object);
		object STAR95_tree = default(object);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_STAR=new RewriteRuleITokenStream(adaptor,"token STAR");

		try { DebugEnterRule(GrammarFileName, "element_name");
		DebugLocation(372, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:373:5: ( IDENT -> ^( ELEMENT_NAME IDENT ) | STAR -> ^( ELEMENT_NAME STAR ) )
			int alt38=2;
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==IDENT))
			{
				alt38 = 1;
			}
			else if ((LA38_0==STAR))
			{
				alt38 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:373:7: IDENT
				{
				DebugLocation(373, 7);
				IDENT94=(CommonToken)Match(input,IDENT,Follow._IDENT_in_element_name2117); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT94);



				{
				// AST REWRITE
				// elements: IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 374:5: -> ^( ELEMENT_NAME IDENT )
				{
					DebugLocation(374, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:374:8: ^( ELEMENT_NAME IDENT )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(374, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ELEMENT_NAME, "ELEMENT_NAME"), root_1);

					DebugLocation(374, 23);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:375:7: STAR
				{
				DebugLocation(375, 7);
				STAR95=(CommonToken)Match(input,STAR,Follow._STAR_in_element_name2137); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STAR.Add(STAR95);



				{
				// AST REWRITE
				// elements: STAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 376:5: -> ^( ELEMENT_NAME STAR )
				{
					DebugLocation(376, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:376:8: ^( ELEMENT_NAME STAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(376, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ELEMENT_NAME, "ELEMENT_NAME"), root_1);

					DebugLocation(376, 23);
					adaptor.AddChild(root_1, stream_STAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("element_name", 29);
			LeaveRule("element_name", 29);
			LeaveRule_element_name();
		}
		DebugLocation(377, 4);
		} finally { DebugExitRule(GrammarFileName, "element_name"); }
		return retval;

	}
	// $ANTLR end "element_name"

	private sealed partial class universal_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public universal_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_universal();
	partial void LeaveRule_universal();

	// $ANTLR start "universal"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:382:1: universal : ( ( selector_namespace_prefix )=> selector_namespace_prefix )? STAR -> ^( UNIVERSAL ( selector_namespace_prefix )? ) ;
	[GrammarRule("universal")]
	private CssParser.universal_return universal()
	{
		EnterRule_universal();
		EnterRule("universal", 30);
		TraceIn("universal", 30);
		CssParser.universal_return retval = new CssParser.universal_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken STAR97 = default(CommonToken);
		CssParser.selector_namespace_prefix_return selector_namespace_prefix96 = default(CssParser.selector_namespace_prefix_return);

		object STAR97_tree = default(object);
		RewriteRuleITokenStream stream_STAR=new RewriteRuleITokenStream(adaptor,"token STAR");
		RewriteRuleSubtreeStream stream_selector_namespace_prefix=new RewriteRuleSubtreeStream(adaptor,"rule selector_namespace_prefix");
		try { DebugEnterRule(GrammarFileName, "universal");
		DebugLocation(382, 2);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:383:3: ( ( ( selector_namespace_prefix )=> selector_namespace_prefix )? STAR -> ^( UNIVERSAL ( selector_namespace_prefix )? ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:383:5: ( ( selector_namespace_prefix )=> selector_namespace_prefix )? STAR
			{
			DebugLocation(383, 5);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:383:5: ( ( selector_namespace_prefix )=> selector_namespace_prefix )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==IDENT) && (EvaluatePredicate(synpred7_CssParser_fragment)))
			{
				alt39 = 1;
			}
			else if ((LA39_0==STAR))
			{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred7_CssParser_fragment)))
				{
					alt39 = 1;
				}
			}
			else if ((LA39_0==PIPE) && (EvaluatePredicate(synpred7_CssParser_fragment)))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:383:6: ( selector_namespace_prefix )=> selector_namespace_prefix
				{
				DebugLocation(383, 37);
				PushFollow(Follow._selector_namespace_prefix_in_universal2174);
				selector_namespace_prefix96=selector_namespace_prefix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selector_namespace_prefix.Add(selector_namespace_prefix96.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(383, 65);
			STAR97=(CommonToken)Match(input,STAR,Follow._STAR_in_universal2178); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STAR.Add(STAR97);



			{
			// AST REWRITE
			// elements: selector_namespace_prefix
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 384:3: -> ^( UNIVERSAL ( selector_namespace_prefix )? )
			{
				DebugLocation(384, 6);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:384:6: ^( UNIVERSAL ( selector_namespace_prefix )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(384, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(UNIVERSAL, "UNIVERSAL"), root_1);

				DebugLocation(384, 18);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:384:18: ( selector_namespace_prefix )?
				if (stream_selector_namespace_prefix.HasNext)
				{
					DebugLocation(384, 18);
					adaptor.AddChild(root_1, stream_selector_namespace_prefix.NextTree());

				}
				stream_selector_namespace_prefix.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("universal", 30);
			LeaveRule("universal", 30);
			LeaveRule_universal();
		}
		DebugLocation(385, 2);
		} finally { DebugExitRule(GrammarFileName, "universal"); }
		return retval;

	}
	// $ANTLR end "universal"

	private sealed partial class class_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public class_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_class();
	partial void LeaveRule_class();

	// $ANTLR start "class"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:390:1: class : CLASS_IDENT -> ^( CLASSIDENTIFIER CLASS_IDENT ) ;
	[GrammarRule("class")]
	private CssParser.class_return @class()
	{
		EnterRule_class();
		EnterRule("class", 31);
		TraceIn("class", 31);
		CssParser.class_return retval = new CssParser.class_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken CLASS_IDENT98 = default(CommonToken);

		object CLASS_IDENT98_tree = default(object);
		RewriteRuleITokenStream stream_CLASS_IDENT=new RewriteRuleITokenStream(adaptor,"token CLASS_IDENT");

		try { DebugEnterRule(GrammarFileName, "class");
		DebugLocation(390, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:391:5: ( CLASS_IDENT -> ^( CLASSIDENTIFIER CLASS_IDENT ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:391:7: CLASS_IDENT
			{
			DebugLocation(391, 7);
			CLASS_IDENT98=(CommonToken)Match(input,CLASS_IDENT,Follow._CLASS_IDENT_in_class2207); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLASS_IDENT.Add(CLASS_IDENT98);



			{
			// AST REWRITE
			// elements: CLASS_IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 392:5: -> ^( CLASSIDENTIFIER CLASS_IDENT )
			{
				DebugLocation(392, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:392:8: ^( CLASSIDENTIFIER CLASS_IDENT )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(392, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CLASSIDENTIFIER, "CLASSIDENTIFIER"), root_1);

				DebugLocation(392, 26);
				adaptor.AddChild(root_1, stream_CLASS_IDENT.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class", 31);
			LeaveRule("class", 31);
			LeaveRule_class();
		}
		DebugLocation(393, 4);
		} finally { DebugExitRule(GrammarFileName, "class"); }
		return retval;

	}
	// $ANTLR end "class"

	private sealed partial class attrib_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public attrib_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_attrib();
	partial void LeaveRule_attrib();

	// $ANTLR start "attrib"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:405:1: attrib : SQUARE_BEGIN ( selector_namespace_prefix )? attributeName= IDENT ( (attributeOperator= PREFIXMATCH |attributeOperator= SUFFIXMATCH |attributeOperator= SUBSTRINGMATCH |attributeOperator= EQUALS |attributeOperator= INCLUDES |attributeOperator= DASHMATCH ) (attribvalue= IDENT | STRING ) )? SQUARE_END -> ^( ATTRIBIDENTIFIER ( selector_namespace_prefix )? ^( ATTRIBNAME $attributeName) ( ^( ATTRIBOPERATORVALUE ^( ATTRIBOPERATOR $attributeOperator) ^( ATTRIBVALUE ( $attribvalue)? ( ^( STRINGBASEDVALUE STRING ) )? ) ) )? ) ;
	[GrammarRule("attrib")]
	private CssParser.attrib_return attrib()
	{
		EnterRule_attrib();
		EnterRule("attrib", 32);
		TraceIn("attrib", 32);
		CssParser.attrib_return retval = new CssParser.attrib_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken attributeName = default(CommonToken);
		CommonToken attributeOperator = default(CommonToken);
		CommonToken attribvalue = default(CommonToken);
		CommonToken SQUARE_BEGIN99 = default(CommonToken);
		CommonToken STRING101 = default(CommonToken);
		CommonToken SQUARE_END102 = default(CommonToken);
		CssParser.selector_namespace_prefix_return selector_namespace_prefix100 = default(CssParser.selector_namespace_prefix_return);

		object attributeName_tree = default(object);
		object attributeOperator_tree = default(object);
		object attribvalue_tree = default(object);
		object SQUARE_BEGIN99_tree = default(object);
		object STRING101_tree = default(object);
		object SQUARE_END102_tree = default(object);
		RewriteRuleITokenStream stream_SQUARE_BEGIN=new RewriteRuleITokenStream(adaptor,"token SQUARE_BEGIN");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_PREFIXMATCH=new RewriteRuleITokenStream(adaptor,"token PREFIXMATCH");
		RewriteRuleITokenStream stream_SUFFIXMATCH=new RewriteRuleITokenStream(adaptor,"token SUFFIXMATCH");
		RewriteRuleITokenStream stream_SUBSTRINGMATCH=new RewriteRuleITokenStream(adaptor,"token SUBSTRINGMATCH");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_INCLUDES=new RewriteRuleITokenStream(adaptor,"token INCLUDES");
		RewriteRuleITokenStream stream_DASHMATCH=new RewriteRuleITokenStream(adaptor,"token DASHMATCH");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleITokenStream stream_SQUARE_END=new RewriteRuleITokenStream(adaptor,"token SQUARE_END");
		RewriteRuleSubtreeStream stream_selector_namespace_prefix=new RewriteRuleSubtreeStream(adaptor,"rule selector_namespace_prefix");
		try { DebugEnterRule(GrammarFileName, "attrib");
		DebugLocation(405, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:406:5: ( SQUARE_BEGIN ( selector_namespace_prefix )? attributeName= IDENT ( (attributeOperator= PREFIXMATCH |attributeOperator= SUFFIXMATCH |attributeOperator= SUBSTRINGMATCH |attributeOperator= EQUALS |attributeOperator= INCLUDES |attributeOperator= DASHMATCH ) (attribvalue= IDENT | STRING ) )? SQUARE_END -> ^( ATTRIBIDENTIFIER ( selector_namespace_prefix )? ^( ATTRIBNAME $attributeName) ( ^( ATTRIBOPERATORVALUE ^( ATTRIBOPERATOR $attributeOperator) ^( ATTRIBVALUE ( $attribvalue)? ( ^( STRINGBASEDVALUE STRING ) )? ) ) )? ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:406:7: SQUARE_BEGIN ( selector_namespace_prefix )? attributeName= IDENT ( (attributeOperator= PREFIXMATCH |attributeOperator= SUFFIXMATCH |attributeOperator= SUBSTRINGMATCH |attributeOperator= EQUALS |attributeOperator= INCLUDES |attributeOperator= DASHMATCH ) (attribvalue= IDENT | STRING ) )? SQUARE_END
			{
			DebugLocation(406, 7);
			SQUARE_BEGIN99=(CommonToken)Match(input,SQUARE_BEGIN,Follow._SQUARE_BEGIN_in_attrib2246); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SQUARE_BEGIN.Add(SQUARE_BEGIN99);

			DebugLocation(407, 9);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:407:9: ( selector_namespace_prefix )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==IDENT))
			{
				int LA40_1 = input.LA(2);

				if ((LA40_1==PIPE))
				{
					alt40 = 1;
				}
			}
			else if ((LA40_0==PIPE||LA40_0==STAR))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:407:9: selector_namespace_prefix
				{
				DebugLocation(407, 9);
				PushFollow(Follow._selector_namespace_prefix_in_attrib2257);
				selector_namespace_prefix100=selector_namespace_prefix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selector_namespace_prefix.Add(selector_namespace_prefix100.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(407, 49);
			attributeName=(CommonToken)Match(input,IDENT,Follow._IDENT_in_attrib2262); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(attributeName);

			DebugLocation(408, 9);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:408:9: ( (attributeOperator= PREFIXMATCH |attributeOperator= SUFFIXMATCH |attributeOperator= SUBSTRINGMATCH |attributeOperator= EQUALS |attributeOperator= INCLUDES |attributeOperator= DASHMATCH ) (attribvalue= IDENT | STRING ) )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==DASHMATCH||LA43_0==EQUALS||LA43_0==INCLUDES||LA43_0==PREFIXMATCH||(LA43_0>=SUBSTRINGMATCH && LA43_0<=SUFFIXMATCH)))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:409:13: (attributeOperator= PREFIXMATCH |attributeOperator= SUFFIXMATCH |attributeOperator= SUBSTRINGMATCH |attributeOperator= EQUALS |attributeOperator= INCLUDES |attributeOperator= DASHMATCH ) (attribvalue= IDENT | STRING )
				{
				DebugLocation(409, 13);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:409:13: (attributeOperator= PREFIXMATCH |attributeOperator= SUFFIXMATCH |attributeOperator= SUBSTRINGMATCH |attributeOperator= EQUALS |attributeOperator= INCLUDES |attributeOperator= DASHMATCH )
				int alt41=6;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				switch (input.LA(1))
				{
				case PREFIXMATCH:
					{
					alt41 = 1;
					}
					break;
				case SUFFIXMATCH:
					{
					alt41 = 2;
					}
					break;
				case SUBSTRINGMATCH:
					{
					alt41 = 3;
					}
					break;
				case EQUALS:
					{
					alt41 = 4;
					}
					break;
				case INCLUDES:
					{
					alt41 = 5;
					}
					break;
				case DASHMATCH:
					{
					alt41 = 6;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:409:14: attributeOperator= PREFIXMATCH
					{
					DebugLocation(409, 31);
					attributeOperator=(CommonToken)Match(input,PREFIXMATCH,Follow._PREFIXMATCH_in_attrib2289); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_PREFIXMATCH.Add(attributeOperator);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:409:44: attributeOperator= SUFFIXMATCH
					{
					DebugLocation(409, 61);
					attributeOperator=(CommonToken)Match(input,SUFFIXMATCH,Follow._SUFFIXMATCH_in_attrib2293); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SUFFIXMATCH.Add(attributeOperator);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:409:74: attributeOperator= SUBSTRINGMATCH
					{
					DebugLocation(409, 91);
					attributeOperator=(CommonToken)Match(input,SUBSTRINGMATCH,Follow._SUBSTRINGMATCH_in_attrib2297); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SUBSTRINGMATCH.Add(attributeOperator);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:409:107: attributeOperator= EQUALS
					{
					DebugLocation(409, 124);
					attributeOperator=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_attrib2301); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_EQUALS.Add(attributeOperator);


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:409:132: attributeOperator= INCLUDES
					{
					DebugLocation(409, 149);
					attributeOperator=(CommonToken)Match(input,INCLUDES,Follow._INCLUDES_in_attrib2305); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INCLUDES.Add(attributeOperator);


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:409:159: attributeOperator= DASHMATCH
					{
					DebugLocation(409, 176);
					attributeOperator=(CommonToken)Match(input,DASHMATCH,Follow._DASHMATCH_in_attrib2309); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DASHMATCH.Add(attributeOperator);


					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(410, 13);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:410:13: (attribvalue= IDENT | STRING )
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==IDENT))
				{
					alt42 = 1;
				}
				else if ((LA42_0==STRING))
				{
					alt42 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:410:14: attribvalue= IDENT
					{
					DebugLocation(410, 25);
					attribvalue=(CommonToken)Match(input,IDENT,Follow._IDENT_in_attrib2327); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(attribvalue);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:410:32: STRING
					{
					DebugLocation(410, 32);
					STRING101=(CommonToken)Match(input,STRING,Follow._STRING_in_attrib2329); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING.Add(STRING101);


					}
					break;

				}
				} finally { DebugExitSubRule(42); }


				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(412, 5);
			SQUARE_END102=(CommonToken)Match(input,SQUARE_END,Follow._SQUARE_END_in_attrib2347); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SQUARE_END.Add(SQUARE_END102);



			{
			// AST REWRITE
			// elements: selector_namespace_prefix, attributeName, attributeOperator, attribvalue, STRING
			// token labels: attributeName, attributeOperator, attribvalue
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_attributeName=new RewriteRuleITokenStream(adaptor,"token attributeName",attributeName);
			RewriteRuleITokenStream stream_attributeOperator=new RewriteRuleITokenStream(adaptor,"token attributeOperator",attributeOperator);
			RewriteRuleITokenStream stream_attribvalue=new RewriteRuleITokenStream(adaptor,"token attribvalue",attribvalue);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 413:5: -> ^( ATTRIBIDENTIFIER ( selector_namespace_prefix )? ^( ATTRIBNAME $attributeName) ( ^( ATTRIBOPERATORVALUE ^( ATTRIBOPERATOR $attributeOperator) ^( ATTRIBVALUE ( $attribvalue)? ( ^( STRINGBASEDVALUE STRING ) )? ) ) )? )
			{
				DebugLocation(413, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:413:8: ^( ATTRIBIDENTIFIER ( selector_namespace_prefix )? ^( ATTRIBNAME $attributeName) ( ^( ATTRIBOPERATORVALUE ^( ATTRIBOPERATOR $attributeOperator) ^( ATTRIBVALUE ( $attribvalue)? ( ^( STRINGBASEDVALUE STRING ) )? ) ) )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(413, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ATTRIBIDENTIFIER, "ATTRIBIDENTIFIER"), root_1);

				DebugLocation(413, 27);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:413:27: ( selector_namespace_prefix )?
				if (stream_selector_namespace_prefix.HasNext)
				{
					DebugLocation(413, 27);
					adaptor.AddChild(root_1, stream_selector_namespace_prefix.NextTree());

				}
				stream_selector_namespace_prefix.Reset();
				DebugLocation(413, 54);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:413:54: ^( ATTRIBNAME $attributeName)
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(413, 56);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(ATTRIBNAME, "ATTRIBNAME"), root_2);

				DebugLocation(413, 68);
				adaptor.AddChild(root_2, stream_attributeName.NextNode());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(413, 83);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:413:83: ( ^( ATTRIBOPERATORVALUE ^( ATTRIBOPERATOR $attributeOperator) ^( ATTRIBVALUE ( $attribvalue)? ( ^( STRINGBASEDVALUE STRING ) )? ) ) )?
				if (stream_attributeOperator.HasNext||stream_attribvalue.HasNext||stream_STRING.HasNext)
				{
					DebugLocation(413, 83);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:413:83: ^( ATTRIBOPERATORVALUE ^( ATTRIBOPERATOR $attributeOperator) ^( ATTRIBVALUE ( $attribvalue)? ( ^( STRINGBASEDVALUE STRING ) )? ) )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(413, 85);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(ATTRIBOPERATORVALUE, "ATTRIBOPERATORVALUE"), root_2);

					DebugLocation(413, 105);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:413:105: ^( ATTRIBOPERATOR $attributeOperator)
					{
					object root_3 = (object)adaptor.Nil();
					DebugLocation(413, 107);
					root_3 = (object)adaptor.BecomeRoot((object)adaptor.Create(ATTRIBOPERATOR, "ATTRIBOPERATOR"), root_3);

					DebugLocation(413, 123);
					adaptor.AddChild(root_3, stream_attributeOperator.NextNode());

					adaptor.AddChild(root_2, root_3);
					}
					DebugLocation(413, 142);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:413:142: ^( ATTRIBVALUE ( $attribvalue)? ( ^( STRINGBASEDVALUE STRING ) )? )
					{
					object root_3 = (object)adaptor.Nil();
					DebugLocation(413, 144);
					root_3 = (object)adaptor.BecomeRoot((object)adaptor.Create(ATTRIBVALUE, "ATTRIBVALUE"), root_3);

					DebugLocation(413, 157);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:413:157: ( $attribvalue)?
					if (stream_attribvalue.HasNext)
					{
						DebugLocation(413, 157);
						adaptor.AddChild(root_3, stream_attribvalue.NextNode());

					}
					stream_attribvalue.Reset();
					DebugLocation(413, 170);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:413:170: ( ^( STRINGBASEDVALUE STRING ) )?
					if (stream_STRING.HasNext)
					{
						DebugLocation(413, 170);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:413:170: ^( STRINGBASEDVALUE STRING )
						{
						object root_4 = (object)adaptor.Nil();
						DebugLocation(413, 172);
						root_4 = (object)adaptor.BecomeRoot((object)adaptor.Create(STRINGBASEDVALUE, "STRINGBASEDVALUE"), root_4);

						DebugLocation(413, 189);
						adaptor.AddChild(root_4, stream_STRING.NextNode());

						adaptor.AddChild(root_3, root_4);
						}

					}
					stream_STRING.Reset();

					adaptor.AddChild(root_2, root_3);
					}

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_attributeOperator.Reset();
				stream_attribvalue.Reset();
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attrib", 32);
			LeaveRule("attrib", 32);
			LeaveRule_attrib();
		}
		DebugLocation(414, 4);
		} finally { DebugExitRule(GrammarFileName, "attrib"); }
		return retval;

	}
	// $ANTLR end "attrib"

	private sealed partial class pseudo_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pseudo_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_pseudo();
	partial void LeaveRule_pseudo();

	// $ANTLR start "pseudo"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:423:1: pseudo : (c1= COLON (c2= COLON )? pseudoName= IDENT -> ^( PSEUDOIDENTIFIER ^( COLONS $c1 ( $c2)? ) ^( PSEUDONAME $pseudoName) ) |c1= COLON (c2= COLON )? functional_pseudo -> ^( PSEUDOIDENTIFIER ^( COLONS $c1 ( $c2)? ) functional_pseudo ) );
	[GrammarRule("pseudo")]
	private CssParser.pseudo_return pseudo()
	{
		EnterRule_pseudo();
		EnterRule("pseudo", 33);
		TraceIn("pseudo", 33);
		CssParser.pseudo_return retval = new CssParser.pseudo_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken c1 = default(CommonToken);
		CommonToken c2 = default(CommonToken);
		CommonToken pseudoName = default(CommonToken);
		CssParser.functional_pseudo_return functional_pseudo103 = default(CssParser.functional_pseudo_return);

		object c1_tree = default(object);
		object c2_tree = default(object);
		object pseudoName_tree = default(object);
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleSubtreeStream stream_functional_pseudo=new RewriteRuleSubtreeStream(adaptor,"rule functional_pseudo");
		try { DebugEnterRule(GrammarFileName, "pseudo");
		DebugLocation(423, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:424:5: (c1= COLON (c2= COLON )? pseudoName= IDENT -> ^( PSEUDOIDENTIFIER ^( COLONS $c1 ( $c2)? ) ^( PSEUDONAME $pseudoName) ) |c1= COLON (c2= COLON )? functional_pseudo -> ^( PSEUDOIDENTIFIER ^( COLONS $c1 ( $c2)? ) functional_pseudo ) )
			int alt46=2;
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if ((LA46_0==COLON))
			{
				switch (input.LA(2))
				{
				case COLON:
					{
					int LA46_2 = input.LA(3);

					if ((LA46_2==IDENT))
					{
						int LA46_3 = input.LA(4);

						if ((LA46_3==CIRCLE_BEGIN))
						{
							alt46 = 2;
						}
						else if ((LA46_3==EOF||LA46_3==AT_NAME||LA46_3==CIRCLE_END||(LA46_3>=CLASS_IDENT && LA46_3<=COLON)||(LA46_3>=COMMA && LA46_3<=CURLY_BEGIN)||LA46_3==GREATER||LA46_3==HASH_IDENT||LA46_3==IDENT||(LA46_3>=PIPE && LA46_3<=PLUS)||LA46_3==REPLACEMENTTOKEN||LA46_3==SQUARE_BEGIN||LA46_3==STAR||LA46_3==TILDE||LA46_3==WS))
						{
							alt46 = 1;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 46, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA46_2==FROM||LA46_2==MSIE_IMAGE_TRANSFORM||LA46_2==TO))
					{
						alt46 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 46, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					int LA46_3 = input.LA(3);

					if ((LA46_3==CIRCLE_BEGIN))
					{
						alt46 = 2;
					}
					else if ((LA46_3==EOF||LA46_3==AT_NAME||LA46_3==CIRCLE_END||(LA46_3>=CLASS_IDENT && LA46_3<=COLON)||(LA46_3>=COMMA && LA46_3<=CURLY_BEGIN)||LA46_3==GREATER||LA46_3==HASH_IDENT||LA46_3==IDENT||(LA46_3>=PIPE && LA46_3<=PLUS)||LA46_3==REPLACEMENTTOKEN||LA46_3==SQUARE_BEGIN||LA46_3==STAR||LA46_3==TILDE||LA46_3==WS))
					{
						alt46 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 46, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case FROM:
				case MSIE_IMAGE_TRANSFORM:
				case TO:
					{
					alt46 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 46, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:424:7: c1= COLON (c2= COLON )? pseudoName= IDENT
				{
				DebugLocation(424, 9);
				c1=(CommonToken)Match(input,COLON,Follow._COLON_in_pseudo2420); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(c1);

				DebugLocation(424, 18);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:424:18: (c2= COLON )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==COLON))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:424:18: c2= COLON
					{
					DebugLocation(424, 18);
					c2=(CommonToken)Match(input,COLON,Follow._COLON_in_pseudo2424); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COLON.Add(c2);


					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(424, 36);
				pseudoName=(CommonToken)Match(input,IDENT,Follow._IDENT_in_pseudo2429); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(pseudoName);



				{
				// AST REWRITE
				// elements: c1, c2, pseudoName
				// token labels: c1, c2, pseudoName
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_c1=new RewriteRuleITokenStream(adaptor,"token c1",c1);
				RewriteRuleITokenStream stream_c2=new RewriteRuleITokenStream(adaptor,"token c2",c2);
				RewriteRuleITokenStream stream_pseudoName=new RewriteRuleITokenStream(adaptor,"token pseudoName",pseudoName);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 425:5: -> ^( PSEUDOIDENTIFIER ^( COLONS $c1 ( $c2)? ) ^( PSEUDONAME $pseudoName) )
				{
					DebugLocation(425, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:425:8: ^( PSEUDOIDENTIFIER ^( COLONS $c1 ( $c2)? ) ^( PSEUDONAME $pseudoName) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(425, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PSEUDOIDENTIFIER, "PSEUDOIDENTIFIER"), root_1);

					DebugLocation(425, 27);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:425:27: ^( COLONS $c1 ( $c2)? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(425, 29);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLONS, "COLONS"), root_2);

					DebugLocation(425, 37);
					adaptor.AddChild(root_2, stream_c1.NextNode());
					DebugLocation(425, 41);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:425:41: ( $c2)?
					if (stream_c2.HasNext)
					{
						DebugLocation(425, 41);
						adaptor.AddChild(root_2, stream_c2.NextNode());

					}
					stream_c2.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(425, 46);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:425:46: ^( PSEUDONAME $pseudoName)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(425, 48);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(PSEUDONAME, "PSEUDONAME"), root_2);

					DebugLocation(425, 60);
					adaptor.AddChild(root_2, stream_pseudoName.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:426:7: c1= COLON (c2= COLON )? functional_pseudo
				{
				DebugLocation(426, 9);
				c1=(CommonToken)Match(input,COLON,Follow._COLON_in_pseudo2467); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(c1);

				DebugLocation(426, 18);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:426:18: (c2= COLON )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==COLON))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:426:18: c2= COLON
					{
					DebugLocation(426, 18);
					c2=(CommonToken)Match(input,COLON,Follow._COLON_in_pseudo2471); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COLON.Add(c2);


					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(426, 26);
				PushFollow(Follow._functional_pseudo_in_pseudo2474);
				functional_pseudo103=functional_pseudo();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_functional_pseudo.Add(functional_pseudo103.Tree);


				{
				// AST REWRITE
				// elements: c1, c2, functional_pseudo
				// token labels: c1, c2
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_c1=new RewriteRuleITokenStream(adaptor,"token c1",c1);
				RewriteRuleITokenStream stream_c2=new RewriteRuleITokenStream(adaptor,"token c2",c2);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 427:5: -> ^( PSEUDOIDENTIFIER ^( COLONS $c1 ( $c2)? ) functional_pseudo )
				{
					DebugLocation(427, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:427:8: ^( PSEUDOIDENTIFIER ^( COLONS $c1 ( $c2)? ) functional_pseudo )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(427, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PSEUDOIDENTIFIER, "PSEUDOIDENTIFIER"), root_1);

					DebugLocation(427, 27);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:427:27: ^( COLONS $c1 ( $c2)? )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(427, 29);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLONS, "COLONS"), root_2);

					DebugLocation(427, 37);
					adaptor.AddChild(root_2, stream_c1.NextNode());
					DebugLocation(427, 41);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:427:41: ( $c2)?
					if (stream_c2.HasNext)
					{
						DebugLocation(427, 41);
						adaptor.AddChild(root_2, stream_c2.NextNode());

					}
					stream_c2.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(427, 46);
					adaptor.AddChild(root_1, stream_functional_pseudo.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pseudo", 33);
			LeaveRule("pseudo", 33);
			LeaveRule_pseudo();
		}
		DebugLocation(428, 4);
		} finally { DebugExitRule(GrammarFileName, "pseudo"); }
		return retval;

	}
	// $ANTLR end "pseudo"

	private sealed partial class functional_pseudo_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public functional_pseudo_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_functional_pseudo();
	partial void LeaveRule_functional_pseudo();

	// $ANTLR start "functional_pseudo"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:433:1: functional_pseudo : beginfunc selectorexpression CIRCLE_END -> ^( FUNCTIONAL_PSEUDO beginfunc ^( SELECTOR_EXPRESSION selectorexpression ) ) ;
	[GrammarRule("functional_pseudo")]
	private CssParser.functional_pseudo_return functional_pseudo()
	{
		EnterRule_functional_pseudo();
		EnterRule("functional_pseudo", 34);
		TraceIn("functional_pseudo", 34);
		CssParser.functional_pseudo_return retval = new CssParser.functional_pseudo_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken CIRCLE_END106 = default(CommonToken);
		CssParser.beginfunc_return beginfunc104 = default(CssParser.beginfunc_return);
		CssParser.selectorexpression_return selectorexpression105 = default(CssParser.selectorexpression_return);

		object CIRCLE_END106_tree = default(object);
		RewriteRuleITokenStream stream_CIRCLE_END=new RewriteRuleITokenStream(adaptor,"token CIRCLE_END");
		RewriteRuleSubtreeStream stream_beginfunc=new RewriteRuleSubtreeStream(adaptor,"rule beginfunc");
		RewriteRuleSubtreeStream stream_selectorexpression=new RewriteRuleSubtreeStream(adaptor,"rule selectorexpression");
		try { DebugEnterRule(GrammarFileName, "functional_pseudo");
		DebugLocation(433, 2);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:434:3: ( beginfunc selectorexpression CIRCLE_END -> ^( FUNCTIONAL_PSEUDO beginfunc ^( SELECTOR_EXPRESSION selectorexpression ) ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:434:5: beginfunc selectorexpression CIRCLE_END
			{
			DebugLocation(434, 5);
			PushFollow(Follow._beginfunc_in_functional_pseudo2515);
			beginfunc104=beginfunc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_beginfunc.Add(beginfunc104.Tree);
			DebugLocation(434, 15);
			PushFollow(Follow._selectorexpression_in_functional_pseudo2517);
			selectorexpression105=selectorexpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectorexpression.Add(selectorexpression105.Tree);
			DebugLocation(434, 34);
			CIRCLE_END106=(CommonToken)Match(input,CIRCLE_END,Follow._CIRCLE_END_in_functional_pseudo2519); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CIRCLE_END.Add(CIRCLE_END106);



			{
			// AST REWRITE
			// elements: beginfunc, selectorexpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 435:3: -> ^( FUNCTIONAL_PSEUDO beginfunc ^( SELECTOR_EXPRESSION selectorexpression ) )
			{
				DebugLocation(435, 6);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:435:6: ^( FUNCTIONAL_PSEUDO beginfunc ^( SELECTOR_EXPRESSION selectorexpression ) )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(435, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNCTIONAL_PSEUDO, "FUNCTIONAL_PSEUDO"), root_1);

				DebugLocation(435, 26);
				adaptor.AddChild(root_1, stream_beginfunc.NextTree());
				DebugLocation(435, 36);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:435:36: ^( SELECTOR_EXPRESSION selectorexpression )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(435, 38);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(SELECTOR_EXPRESSION, "SELECTOR_EXPRESSION"), root_2);

				DebugLocation(435, 58);
				adaptor.AddChild(root_2, stream_selectorexpression.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functional_pseudo", 34);
			LeaveRule("functional_pseudo", 34);
			LeaveRule_functional_pseudo();
		}
		DebugLocation(436, 2);
		} finally { DebugExitRule(GrammarFileName, "functional_pseudo"); }
		return retval;

	}
	// $ANTLR end "functional_pseudo"

	private sealed partial class selectorexpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public selectorexpression_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_selectorexpression();
	partial void LeaveRule_selectorexpression();

	// $ANTLR start "selectorexpression"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:443:1: selectorexpression : ( PLUS | MINUS | DIMENSION | NUMBER | STRING | IDENT | REPLACEMENT )+ ;
	[GrammarRule("selectorexpression")]
	private CssParser.selectorexpression_return selectorexpression()
	{
		EnterRule_selectorexpression();
		EnterRule("selectorexpression", 35);
		TraceIn("selectorexpression", 35);
		CssParser.selectorexpression_return retval = new CssParser.selectorexpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken set107 = default(CommonToken);

		object set107_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "selectorexpression");
		DebugLocation(443, 2);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:446:3: ( ( PLUS | MINUS | DIMENSION | NUMBER | STRING | IDENT | REPLACEMENT )+ )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:446:5: ( PLUS | MINUS | DIMENSION | NUMBER | STRING | IDENT | REPLACEMENT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(446, 5);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:446:5: ( PLUS | MINUS | DIMENSION | NUMBER | STRING | IDENT | REPLACEMENT )+
			int cnt47=0;
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==DIMENSION||LA47_0==IDENT||LA47_0==MINUS||LA47_0==NUMBER||LA47_0==PLUS||LA47_0==REPLACEMENT||LA47_0==STRING))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:
					{
					DebugLocation(446, 5);
					set107=(CommonToken)input.LT(1);
					if (input.LA(1)==DIMENSION||input.LA(1)==IDENT||input.LA(1)==MINUS||input.LA(1)==NUMBER||input.LA(1)==PLUS||input.LA(1)==REPLACEMENT||input.LA(1)==STRING)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set107));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					if (cnt47 >= 1)
						goto loop47;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee47 = new EarlyExitException( 47, input );
					DebugRecognitionException(eee47);
					throw eee47;
				}
				cnt47++;
			}
			loop47:
				;

			} finally { DebugExitSubRule(47); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectorexpression", 35);
			LeaveRule("selectorexpression", 35);
			LeaveRule_selectorexpression();
		}
		DebugLocation(447, 2);
		} finally { DebugExitRule(GrammarFileName, "selectorexpression"); }
		return retval;

	}
	// $ANTLR end "selectorexpression"

	private sealed partial class negation_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public negation_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_negation();
	partial void LeaveRule_negation();

	// $ANTLR start "negation"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:452:1: negation : ( COLON ) NOT ( CIRCLE_BEGIN ) negation_arg CIRCLE_END -> ^( NEGATIONIDENTIFIER ^( NEGATION_ARG negation_arg ) ) ;
	[GrammarRule("negation")]
	private CssParser.negation_return negation()
	{
		EnterRule_negation();
		EnterRule("negation", 36);
		TraceIn("negation", 36);
		CssParser.negation_return retval = new CssParser.negation_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken COLON108 = default(CommonToken);
		CommonToken NOT109 = default(CommonToken);
		CommonToken CIRCLE_BEGIN110 = default(CommonToken);
		CommonToken CIRCLE_END112 = default(CommonToken);
		CssParser.negation_arg_return negation_arg111 = default(CssParser.negation_arg_return);

		object COLON108_tree = default(object);
		object NOT109_tree = default(object);
		object CIRCLE_BEGIN110_tree = default(object);
		object CIRCLE_END112_tree = default(object);
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleITokenStream stream_CIRCLE_BEGIN=new RewriteRuleITokenStream(adaptor,"token CIRCLE_BEGIN");
		RewriteRuleITokenStream stream_CIRCLE_END=new RewriteRuleITokenStream(adaptor,"token CIRCLE_END");
		RewriteRuleSubtreeStream stream_negation_arg=new RewriteRuleSubtreeStream(adaptor,"rule negation_arg");
		try { DebugEnterRule(GrammarFileName, "negation");
		DebugLocation(452, 2);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:453:3: ( ( COLON ) NOT ( CIRCLE_BEGIN ) negation_arg CIRCLE_END -> ^( NEGATIONIDENTIFIER ^( NEGATION_ARG negation_arg ) ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:453:6: ( COLON ) NOT ( CIRCLE_BEGIN ) negation_arg CIRCLE_END
			{
			DebugLocation(453, 6);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:453:6: ( COLON )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:453:7: COLON
			{
			DebugLocation(453, 7);
			COLON108=(CommonToken)Match(input,COLON,Follow._COLON_in_negation2594); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_COLON.Add(COLON108);


			}

			DebugLocation(453, 13);
			NOT109=(CommonToken)Match(input,NOT,Follow._NOT_in_negation2596); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NOT.Add(NOT109);

			DebugLocation(453, 16);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:453:16: ( CIRCLE_BEGIN )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:453:17: CIRCLE_BEGIN
			{
			DebugLocation(453, 17);
			CIRCLE_BEGIN110=(CommonToken)Match(input,CIRCLE_BEGIN,Follow._CIRCLE_BEGIN_in_negation2598); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CIRCLE_BEGIN.Add(CIRCLE_BEGIN110);


			}

			DebugLocation(453, 31);
			PushFollow(Follow._negation_arg_in_negation2601);
			negation_arg111=negation_arg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_negation_arg.Add(negation_arg111.Tree);
			DebugLocation(453, 44);
			CIRCLE_END112=(CommonToken)Match(input,CIRCLE_END,Follow._CIRCLE_END_in_negation2603); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CIRCLE_END.Add(CIRCLE_END112);



			{
			// AST REWRITE
			// elements: negation_arg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 454:3: -> ^( NEGATIONIDENTIFIER ^( NEGATION_ARG negation_arg ) )
			{
				DebugLocation(454, 6);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:454:6: ^( NEGATIONIDENTIFIER ^( NEGATION_ARG negation_arg ) )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(454, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(NEGATIONIDENTIFIER, "NEGATIONIDENTIFIER"), root_1);

				DebugLocation(454, 27);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:454:27: ^( NEGATION_ARG negation_arg )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(454, 29);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(NEGATION_ARG, "NEGATION_ARG"), root_2);

				DebugLocation(454, 42);
				adaptor.AddChild(root_2, stream_negation_arg.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("negation", 36);
			LeaveRule("negation", 36);
			LeaveRule_negation();
		}
		DebugLocation(455, 2);
		} finally { DebugExitRule(GrammarFileName, "negation"); }
		return retval;

	}
	// $ANTLR end "negation"

	private sealed partial class negation_arg_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public negation_arg_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_negation_arg();
	partial void LeaveRule_negation_arg();

	// $ANTLR start "negation_arg"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:460:1: negation_arg : ( ( ( universal )=> universal ) | type_selector | hash | class | attrib | pseudo );
	[GrammarRule("negation_arg")]
	private CssParser.negation_arg_return negation_arg()
	{
		EnterRule_negation_arg();
		EnterRule("negation_arg", 37);
		TraceIn("negation_arg", 37);
		CssParser.negation_arg_return retval = new CssParser.negation_arg_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CssParser.universal_return universal113 = default(CssParser.universal_return);
		CssParser.type_selector_return type_selector114 = default(CssParser.type_selector_return);
		CssParser.hash_return hash115 = default(CssParser.hash_return);
		CssParser.class_return class116 = default(CssParser.class_return);
		CssParser.attrib_return attrib117 = default(CssParser.attrib_return);
		CssParser.pseudo_return pseudo118 = default(CssParser.pseudo_return);


		try { DebugEnterRule(GrammarFileName, "negation_arg");
		DebugLocation(460, 2);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:461:3: ( ( ( universal )=> universal ) | type_selector | hash | class | attrib | pseudo )
			int alt48=6;
			try { DebugEnterDecision(48, false);
			try
			{
				alt48 = dfa48.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:461:5: ( ( universal )=> universal )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(461, 5);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:461:5: ( ( universal )=> universal )
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:461:6: ( universal )=> universal
				{
				DebugLocation(461, 21);
				PushFollow(Follow._universal_in_negation_arg2640);
				universal113=universal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, universal113.Tree);

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:461:32: type_selector
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(461, 32);
				PushFollow(Follow._type_selector_in_negation_arg2643);
				type_selector114=type_selector();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_selector114.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:461:46: hash
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(461, 46);
				PushFollow(Follow._hash_in_negation_arg2645);
				hash115=hash();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, hash115.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:461:51: class
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(461, 51);
				PushFollow(Follow._class_in_negation_arg2647);
				class116=@class();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class116.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:461:57: attrib
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(461, 57);
				PushFollow(Follow._attrib_in_negation_arg2649);
				attrib117=attrib();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attrib117.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:461:64: pseudo
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(461, 64);
				PushFollow(Follow._pseudo_in_negation_arg2651);
				pseudo118=pseudo();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pseudo118.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("negation_arg", 37);
			LeaveRule("negation_arg", 37);
			LeaveRule_negation_arg();
		}
		DebugLocation(462, 2);
		} finally { DebugExitRule(GrammarFileName, "negation_arg"); }
		return retval;

	}
	// $ANTLR end "negation_arg"

	private sealed partial class atname_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public atname_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_atname();
	partial void LeaveRule_atname();

	// $ANTLR start "atname"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:464:1: atname : AT_NAME -> ^( ATIDENTIFIER AT_NAME ) ;
	[GrammarRule("atname")]
	private CssParser.atname_return atname()
	{
		EnterRule_atname();
		EnterRule("atname", 38);
		TraceIn("atname", 38);
		CssParser.atname_return retval = new CssParser.atname_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken AT_NAME119 = default(CommonToken);

		object AT_NAME119_tree = default(object);
		RewriteRuleITokenStream stream_AT_NAME=new RewriteRuleITokenStream(adaptor,"token AT_NAME");

		try { DebugEnterRule(GrammarFileName, "atname");
		DebugLocation(464, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:465:5: ( AT_NAME -> ^( ATIDENTIFIER AT_NAME ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:465:7: AT_NAME
			{
			DebugLocation(465, 7);
			AT_NAME119=(CommonToken)Match(input,AT_NAME,Follow._AT_NAME_in_atname2666); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AT_NAME.Add(AT_NAME119);



			{
			// AST REWRITE
			// elements: AT_NAME
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 466:5: -> ^( ATIDENTIFIER AT_NAME )
			{
				DebugLocation(466, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:466:8: ^( ATIDENTIFIER AT_NAME )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(466, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ATIDENTIFIER, "ATIDENTIFIER"), root_1);

				DebugLocation(466, 23);
				adaptor.AddChild(root_1, stream_AT_NAME.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atname", 38);
			LeaveRule("atname", 38);
			LeaveRule_atname();
		}
		DebugLocation(467, 4);
		} finally { DebugExitRule(GrammarFileName, "atname"); }
		return retval;

	}
	// $ANTLR end "atname"

	private sealed partial class declaration_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public declaration_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_declaration();
	partial void LeaveRule_declaration();

	// $ANTLR start "declaration"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:472:1: declaration : ( IMPORTANT_COMMENTS )* property COLON expr ( prio )? -> ^( DECLARATION ( IMPORTANT_COMMENTS )* property expr ( prio )? ) ;
	[GrammarRule("declaration")]
	private CssParser.declaration_return declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 39);
		TraceIn("declaration", 39);
		CssParser.declaration_return retval = new CssParser.declaration_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken IMPORTANT_COMMENTS120 = default(CommonToken);
		CommonToken COLON122 = default(CommonToken);
		CssParser.property_return property121 = default(CssParser.property_return);
		CssParser.expr_return expr123 = default(CssParser.expr_return);
		CssParser.prio_return prio124 = default(CssParser.prio_return);

		object IMPORTANT_COMMENTS120_tree = default(object);
		object COLON122_tree = default(object);
		RewriteRuleITokenStream stream_IMPORTANT_COMMENTS=new RewriteRuleITokenStream(adaptor,"token IMPORTANT_COMMENTS");
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_property=new RewriteRuleSubtreeStream(adaptor,"rule property");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_prio=new RewriteRuleSubtreeStream(adaptor,"rule prio");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(472, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:473:5: ( ( IMPORTANT_COMMENTS )* property COLON expr ( prio )? -> ^( DECLARATION ( IMPORTANT_COMMENTS )* property expr ( prio )? ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:473:7: ( IMPORTANT_COMMENTS )* property COLON expr ( prio )?
			{
			DebugLocation(473, 7);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:473:7: ( IMPORTANT_COMMENTS )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==IMPORTANT_COMMENTS))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:473:7: IMPORTANT_COMMENTS
					{
					DebugLocation(473, 7);
					IMPORTANT_COMMENTS120=(CommonToken)Match(input,IMPORTANT_COMMENTS,Follow._IMPORTANT_COMMENTS_in_declaration2698); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IMPORTANT_COMMENTS.Add(IMPORTANT_COMMENTS120);


					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }

			DebugLocation(473, 27);
			PushFollow(Follow._property_in_declaration2701);
			property121=property();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_property.Add(property121.Tree);
			DebugLocation(473, 36);
			COLON122=(CommonToken)Match(input,COLON,Follow._COLON_in_declaration2703); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_COLON.Add(COLON122);

			DebugLocation(473, 42);
			PushFollow(Follow._expr_in_declaration2705);
			expr123=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr123.Tree);
			DebugLocation(473, 47);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:473:47: ( prio )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==IMPORTANT_SYM))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:473:47: prio
				{
				DebugLocation(473, 47);
				PushFollow(Follow._prio_in_declaration2707);
				prio124=prio();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prio.Add(prio124.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(50); }



			{
			// AST REWRITE
			// elements: IMPORTANT_COMMENTS, property, expr, prio
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 474:5: -> ^( DECLARATION ( IMPORTANT_COMMENTS )* property expr ( prio )? )
			{
				DebugLocation(474, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:474:8: ^( DECLARATION ( IMPORTANT_COMMENTS )* property expr ( prio )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(474, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DECLARATION, "DECLARATION"), root_1);

				DebugLocation(474, 22);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:474:22: ( IMPORTANT_COMMENTS )*
				while ( stream_IMPORTANT_COMMENTS.HasNext )
				{
					DebugLocation(474, 22);
					adaptor.AddChild(root_1, stream_IMPORTANT_COMMENTS.NextNode());

				}
				stream_IMPORTANT_COMMENTS.Reset();
				DebugLocation(474, 42);
				adaptor.AddChild(root_1, stream_property.NextTree());
				DebugLocation(474, 51);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(474, 56);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:474:56: ( prio )?
				if (stream_prio.HasNext)
				{
					DebugLocation(474, 56);
					adaptor.AddChild(root_1, stream_prio.NextTree());

				}
				stream_prio.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 39);
			LeaveRule("declaration", 39);
			LeaveRule_declaration();
		}
		DebugLocation(475, 4);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"

	private sealed partial class stringoruri_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public stringoruri_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_stringoruri();
	partial void LeaveRule_stringoruri();

	// $ANTLR start "stringoruri"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:477:1: stringoruri : ( STRING -> ^( STRINGBASEDVALUE STRING ) | URI -> ^( URIBASEDVALUE URI ) );
	[GrammarRule("stringoruri")]
	private CssParser.stringoruri_return stringoruri()
	{
		EnterRule_stringoruri();
		EnterRule("stringoruri", 40);
		TraceIn("stringoruri", 40);
		CssParser.stringoruri_return retval = new CssParser.stringoruri_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken STRING125 = default(CommonToken);
		CommonToken URI126 = default(CommonToken);

		object STRING125_tree = default(object);
		object URI126_tree = default(object);
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleITokenStream stream_URI=new RewriteRuleITokenStream(adaptor,"token URI");

		try { DebugEnterRule(GrammarFileName, "stringoruri");
		DebugLocation(477, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:478:5: ( STRING -> ^( STRINGBASEDVALUE STRING ) | URI -> ^( URIBASEDVALUE URI ) )
			int alt51=2;
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==STRING))
			{
				alt51 = 1;
			}
			else if ((LA51_0==URI))
			{
				alt51 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:478:7: STRING
				{
				DebugLocation(478, 7);
				STRING125=(CommonToken)Match(input,STRING,Follow._STRING_in_stringoruri2747); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING125);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 479:5: -> ^( STRINGBASEDVALUE STRING )
				{
					DebugLocation(479, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:479:8: ^( STRINGBASEDVALUE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(479, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(STRINGBASEDVALUE, "STRINGBASEDVALUE"), root_1);

					DebugLocation(479, 27);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:480:7: URI
				{
				DebugLocation(480, 7);
				URI126=(CommonToken)Match(input,URI,Follow._URI_in_stringoruri2767); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_URI.Add(URI126);



				{
				// AST REWRITE
				// elements: URI
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 481:5: -> ^( URIBASEDVALUE URI )
				{
					DebugLocation(481, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:481:8: ^( URIBASEDVALUE URI )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(481, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(URIBASEDVALUE, "URIBASEDVALUE"), root_1);

					DebugLocation(481, 24);
					adaptor.AddChild(root_1, stream_URI.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stringoruri", 40);
			LeaveRule("stringoruri", 40);
			LeaveRule_stringoruri();
		}
		DebugLocation(482, 4);
		} finally { DebugExitRule(GrammarFileName, "stringoruri"); }
		return retval;

	}
	// $ANTLR end "stringoruri"

	private sealed partial class styleSheetrules_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public styleSheetrules_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_styleSheetrules();
	partial void LeaveRule_styleSheetrules();

	// $ANTLR start "styleSheetrules"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:484:1: styleSheetrules : ( ruleset | media | page | keyframes | document | wg_dpi );
	[GrammarRule("styleSheetrules")]
	private CssParser.styleSheetrules_return styleSheetrules()
	{
		EnterRule_styleSheetrules();
		EnterRule("styleSheetrules", 41);
		TraceIn("styleSheetrules", 41);
		CssParser.styleSheetrules_return retval = new CssParser.styleSheetrules_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CssParser.ruleset_return ruleset127 = default(CssParser.ruleset_return);
		CssParser.media_return media128 = default(CssParser.media_return);
		CssParser.page_return page129 = default(CssParser.page_return);
		CssParser.keyframes_return keyframes130 = default(CssParser.keyframes_return);
		CssParser.document_return document131 = default(CssParser.document_return);
		CssParser.wg_dpi_return wg_dpi132 = default(CssParser.wg_dpi_return);


		try { DebugEnterRule(GrammarFileName, "styleSheetrules");
		DebugLocation(484, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:485:5: ( ruleset | media | page | keyframes | document | wg_dpi )
			int alt52=6;
			try { DebugEnterDecision(52, false);
			switch (input.LA(1))
			{
			case AT_NAME:
			case CLASS_IDENT:
			case COLON:
			case HASH_IDENT:
			case IDENT:
			case PIPE:
			case REPLACEMENTTOKEN:
			case SQUARE_BEGIN:
			case STAR:
				{
				alt52 = 1;
				}
				break;
			case MEDIA_SYM:
				{
				alt52 = 2;
				}
				break;
			case PAGE_SYM:
				{
				alt52 = 3;
				}
				break;
			case KEYFRAMES_SYM:
				{
				alt52 = 4;
				}
				break;
			case DOCUMENT_SYM:
				{
				alt52 = 5;
				}
				break;
			case WG_DPI_SYM:
				{
				alt52 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:485:7: ruleset
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(485, 7);
				PushFollow(Follow._ruleset_in_styleSheetrules2796);
				ruleset127=ruleset();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ruleset127.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:485:15: media
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(485, 15);
				PushFollow(Follow._media_in_styleSheetrules2798);
				media128=media();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, media128.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:485:21: page
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(485, 21);
				PushFollow(Follow._page_in_styleSheetrules2800);
				page129=page();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, page129.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:485:26: keyframes
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(485, 26);
				PushFollow(Follow._keyframes_in_styleSheetrules2802);
				keyframes130=keyframes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, keyframes130.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:485:36: document
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(485, 36);
				PushFollow(Follow._document_in_styleSheetrules2804);
				document131=document();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, document131.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:485:45: wg_dpi
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(485, 45);
				PushFollow(Follow._wg_dpi_in_styleSheetrules2806);
				wg_dpi132=wg_dpi();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, wg_dpi132.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("styleSheetrules", 41);
			LeaveRule("styleSheetrules", 41);
			LeaveRule_styleSheetrules();
		}
		DebugLocation(486, 4);
		} finally { DebugExitRule(GrammarFileName, "styleSheetrules"); }
		return retval;

	}
	// $ANTLR end "styleSheetrules"

	private sealed partial class prio_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public prio_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_prio();
	partial void LeaveRule_prio();

	// $ANTLR start "prio"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:491:1: prio : IMPORTANT_SYM -> ^( IMPORTANT IMPORTANT_SYM ) ;
	[GrammarRule("prio")]
	private CssParser.prio_return prio()
	{
		EnterRule_prio();
		EnterRule("prio", 42);
		TraceIn("prio", 42);
		CssParser.prio_return retval = new CssParser.prio_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken IMPORTANT_SYM133 = default(CommonToken);

		object IMPORTANT_SYM133_tree = default(object);
		RewriteRuleITokenStream stream_IMPORTANT_SYM=new RewriteRuleITokenStream(adaptor,"token IMPORTANT_SYM");

		try { DebugEnterRule(GrammarFileName, "prio");
		DebugLocation(491, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:492:5: ( IMPORTANT_SYM -> ^( IMPORTANT IMPORTANT_SYM ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:492:7: IMPORTANT_SYM
			{
			DebugLocation(492, 7);
			IMPORTANT_SYM133=(CommonToken)Match(input,IMPORTANT_SYM,Follow._IMPORTANT_SYM_in_prio2826); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IMPORTANT_SYM.Add(IMPORTANT_SYM133);



			{
			// AST REWRITE
			// elements: IMPORTANT_SYM
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 493:5: -> ^( IMPORTANT IMPORTANT_SYM )
			{
				DebugLocation(493, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:493:8: ^( IMPORTANT IMPORTANT_SYM )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(493, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(IMPORTANT, "IMPORTANT"), root_1);

				DebugLocation(493, 20);
				adaptor.AddChild(root_1, stream_IMPORTANT_SYM.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prio", 42);
			LeaveRule("prio", 42);
			LeaveRule_prio();
		}
		DebugLocation(494, 4);
		} finally { DebugExitRule(GrammarFileName, "prio"); }
		return retval;

	}
	// $ANTLR end "prio"

	private sealed partial class expr_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public expr_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:499:1: expr : ( IMPORTANT_COMMENTS )* term ( termwithoperator )* -> ^( EXPR ( IMPORTANT_COMMENTS )* term ( ^( TERMWITHOPERATORS ( termwithoperator )* ) )? ) ;
	[GrammarRule("expr")]
	private CssParser.expr_return expr()
	{
		EnterRule_expr();
		EnterRule("expr", 43);
		TraceIn("expr", 43);
		CssParser.expr_return retval = new CssParser.expr_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken IMPORTANT_COMMENTS134 = default(CommonToken);
		CssParser.term_return term135 = default(CssParser.term_return);
		CssParser.termwithoperator_return termwithoperator136 = default(CssParser.termwithoperator_return);

		object IMPORTANT_COMMENTS134_tree = default(object);
		RewriteRuleITokenStream stream_IMPORTANT_COMMENTS=new RewriteRuleITokenStream(adaptor,"token IMPORTANT_COMMENTS");
		RewriteRuleSubtreeStream stream_term=new RewriteRuleSubtreeStream(adaptor,"rule term");
		RewriteRuleSubtreeStream stream_termwithoperator=new RewriteRuleSubtreeStream(adaptor,"rule termwithoperator");
		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(499, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:500:2: ( ( IMPORTANT_COMMENTS )* term ( termwithoperator )* -> ^( EXPR ( IMPORTANT_COMMENTS )* term ( ^( TERMWITHOPERATORS ( termwithoperator )* ) )? ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:500:4: ( IMPORTANT_COMMENTS )* term ( termwithoperator )*
			{
			DebugLocation(500, 4);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:500:4: ( IMPORTANT_COMMENTS )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==IMPORTANT_COMMENTS))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:500:4: IMPORTANT_COMMENTS
					{
					DebugLocation(500, 4);
					IMPORTANT_COMMENTS134=(CommonToken)Match(input,IMPORTANT_COMMENTS,Follow._IMPORTANT_COMMENTS_in_expr2856); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IMPORTANT_COMMENTS.Add(IMPORTANT_COMMENTS134);


					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }

			DebugLocation(500, 24);
			PushFollow(Follow._term_in_expr2859);
			term135=term();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_term.Add(term135.Tree);
			DebugLocation(500, 29);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:500:29: ( termwithoperator )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=2;
				try { DebugEnterDecision(54, false);
				try
				{
					alt54 = dfa54.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:500:30: termwithoperator
					{
					DebugLocation(500, 30);
					PushFollow(Follow._termwithoperator_in_expr2862);
					termwithoperator136=termwithoperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_termwithoperator.Add(termwithoperator136.Tree);

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }



			{
			// AST REWRITE
			// elements: IMPORTANT_COMMENTS, term, termwithoperator
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 501:5: -> ^( EXPR ( IMPORTANT_COMMENTS )* term ( ^( TERMWITHOPERATORS ( termwithoperator )* ) )? )
			{
				DebugLocation(501, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:501:8: ^( EXPR ( IMPORTANT_COMMENTS )* term ( ^( TERMWITHOPERATORS ( termwithoperator )* ) )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(501, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(EXPR, "EXPR"), root_1);

				DebugLocation(501, 15);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:501:15: ( IMPORTANT_COMMENTS )*
				while ( stream_IMPORTANT_COMMENTS.HasNext )
				{
					DebugLocation(501, 15);
					adaptor.AddChild(root_1, stream_IMPORTANT_COMMENTS.NextNode());

				}
				stream_IMPORTANT_COMMENTS.Reset();
				DebugLocation(501, 35);
				adaptor.AddChild(root_1, stream_term.NextTree());
				DebugLocation(501, 40);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:501:40: ( ^( TERMWITHOPERATORS ( termwithoperator )* ) )?
				if (stream_termwithoperator.HasNext)
				{
					DebugLocation(501, 40);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:501:40: ^( TERMWITHOPERATORS ( termwithoperator )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(501, 42);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(TERMWITHOPERATORS, "TERMWITHOPERATORS"), root_2);

					DebugLocation(501, 60);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:501:60: ( termwithoperator )*
					while ( stream_termwithoperator.HasNext )
					{
						DebugLocation(501, 60);
						adaptor.AddChild(root_2, stream_termwithoperator.NextTree());

					}
					stream_termwithoperator.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_termwithoperator.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 43);
			LeaveRule("expr", 43);
			LeaveRule_expr();
		}
		DebugLocation(502, 4);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	private sealed partial class termwithoperator_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public termwithoperator_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_termwithoperator();
	partial void LeaveRule_termwithoperator();

	// $ANTLR start "termwithoperator"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:504:1: termwithoperator : ( operator )? term -> ^( TERMWITHOPERATOR ( ^( OPERATOR operator ) )? term ) ;
	[GrammarRule("termwithoperator")]
	private CssParser.termwithoperator_return termwithoperator()
	{
		EnterRule_termwithoperator();
		EnterRule("termwithoperator", 44);
		TraceIn("termwithoperator", 44);
		CssParser.termwithoperator_return retval = new CssParser.termwithoperator_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CssParser.operator_return operator137 = default(CssParser.operator_return);
		CssParser.term_return term138 = default(CssParser.term_return);

		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		RewriteRuleSubtreeStream stream_term=new RewriteRuleSubtreeStream(adaptor,"rule term");
		try { DebugEnterRule(GrammarFileName, "termwithoperator");
		DebugLocation(504, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:505:2: ( ( operator )? term -> ^( TERMWITHOPERATOR ( ^( OPERATOR operator ) )? term ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:505:4: ( operator )? term
			{
			DebugLocation(505, 4);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:505:4: ( operator )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==COMMA||LA55_0==EQUALS||LA55_0==FORWARD_SLASH||LA55_0==STAR))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:505:4: operator
				{
				DebugLocation(505, 4);
				PushFollow(Follow._operator_in_termwithoperator2902);
				operator137=@operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_operator.Add(operator137.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(505, 14);
			PushFollow(Follow._term_in_termwithoperator2905);
			term138=term();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_term.Add(term138.Tree);


			{
			// AST REWRITE
			// elements: operator, term
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 506:5: -> ^( TERMWITHOPERATOR ( ^( OPERATOR operator ) )? term )
			{
				DebugLocation(506, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:506:8: ^( TERMWITHOPERATOR ( ^( OPERATOR operator ) )? term )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(506, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TERMWITHOPERATOR, "TERMWITHOPERATOR"), root_1);

				DebugLocation(506, 27);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:506:27: ( ^( OPERATOR operator ) )?
				if (stream_operator.HasNext)
				{
					DebugLocation(506, 27);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:506:27: ^( OPERATOR operator )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(506, 29);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATOR, "OPERATOR"), root_2);

					DebugLocation(506, 38);
					adaptor.AddChild(root_2, stream_operator.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_operator.Reset();
				DebugLocation(506, 49);
				adaptor.AddChild(root_1, stream_term.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("termwithoperator", 44);
			LeaveRule("termwithoperator", 44);
			LeaveRule_termwithoperator();
		}
		DebugLocation(507, 4);
		} finally { DebugExitRule(GrammarFileName, "termwithoperator"); }
		return retval;

	}
	// $ANTLR end "termwithoperator"

	private sealed partial class term_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public term_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_term();
	partial void LeaveRule_term();

	// $ANTLR start "term"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:509:1: term : ( ( ( unary_operator )? (t= NUMBER |t= PERCENTAGE |t= LENGTH |t= RELATIVELENGTH |t= ANGLE |t= TIME |t= FREQ |t= RESOLUTION |t= SPEECH ) ) ( IMPORTANT_COMMENTS )* -> ^( TERM ( unary_operator )? ^( NUMBERBASEDVALUE $t) ( IMPORTANT_COMMENTS )* ) | URI ( IMPORTANT_COMMENTS )* -> ^( TERM ^( URIBASEDVALUE URI ) ( IMPORTANT_COMMENTS )* ) | (exp= ( MSIE_EXPRESSION ) ) ( IMPORTANT_COMMENTS )* -> ^( TERM ^( STRINGBASEDVALUE $exp) ( IMPORTANT_COMMENTS )* ) | IDENT ( IMPORTANT_COMMENTS )* -> ^( TERM ^( IDENTBASEDVALUE IDENT ) ( IMPORTANT_COMMENTS )* ) | STRING ( IMPORTANT_COMMENTS )* -> ^( TERM ^( STRINGBASEDVALUE STRING ) ( IMPORTANT_COMMENTS )* ) | hash ( IMPORTANT_COMMENTS )* -> ^( TERM ^( HEXBASEDVALUE hash ) ( IMPORTANT_COMMENTS )* ) | REPLACEMENTTOKEN -> ^( TERM ^( REPLACEMENTTOKENBASEDVALUE REPLACEMENTTOKEN ) ) | function ( IMPORTANT_COMMENTS )* -> ^( TERM function ( IMPORTANT_COMMENTS )* ) );
	[GrammarRule("term")]
	private CssParser.term_return term()
	{
		EnterRule_term();
		EnterRule("term", 45);
		TraceIn("term", 45);
		CssParser.term_return retval = new CssParser.term_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken t = default(CommonToken);
		CommonToken exp = default(CommonToken);
		CommonToken IMPORTANT_COMMENTS140 = default(CommonToken);
		CommonToken URI141 = default(CommonToken);
		CommonToken IMPORTANT_COMMENTS142 = default(CommonToken);
		CommonToken MSIE_EXPRESSION143 = default(CommonToken);
		CommonToken IMPORTANT_COMMENTS144 = default(CommonToken);
		CommonToken IDENT145 = default(CommonToken);
		CommonToken IMPORTANT_COMMENTS146 = default(CommonToken);
		CommonToken STRING147 = default(CommonToken);
		CommonToken IMPORTANT_COMMENTS148 = default(CommonToken);
		CommonToken IMPORTANT_COMMENTS150 = default(CommonToken);
		CommonToken REPLACEMENTTOKEN151 = default(CommonToken);
		CommonToken IMPORTANT_COMMENTS153 = default(CommonToken);
		CssParser.unary_operator_return unary_operator139 = default(CssParser.unary_operator_return);
		CssParser.hash_return hash149 = default(CssParser.hash_return);
		CssParser.function_return function152 = default(CssParser.function_return);

		object t_tree = default(object);
		object exp_tree = default(object);
		object IMPORTANT_COMMENTS140_tree = default(object);
		object URI141_tree = default(object);
		object IMPORTANT_COMMENTS142_tree = default(object);
		object MSIE_EXPRESSION143_tree = default(object);
		object IMPORTANT_COMMENTS144_tree = default(object);
		object IDENT145_tree = default(object);
		object IMPORTANT_COMMENTS146_tree = default(object);
		object STRING147_tree = default(object);
		object IMPORTANT_COMMENTS148_tree = default(object);
		object IMPORTANT_COMMENTS150_tree = default(object);
		object REPLACEMENTTOKEN151_tree = default(object);
		object IMPORTANT_COMMENTS153_tree = default(object);
		RewriteRuleITokenStream stream_NUMBER=new RewriteRuleITokenStream(adaptor,"token NUMBER");
		RewriteRuleITokenStream stream_PERCENTAGE=new RewriteRuleITokenStream(adaptor,"token PERCENTAGE");
		RewriteRuleITokenStream stream_LENGTH=new RewriteRuleITokenStream(adaptor,"token LENGTH");
		RewriteRuleITokenStream stream_RELATIVELENGTH=new RewriteRuleITokenStream(adaptor,"token RELATIVELENGTH");
		RewriteRuleITokenStream stream_ANGLE=new RewriteRuleITokenStream(adaptor,"token ANGLE");
		RewriteRuleITokenStream stream_TIME=new RewriteRuleITokenStream(adaptor,"token TIME");
		RewriteRuleITokenStream stream_FREQ=new RewriteRuleITokenStream(adaptor,"token FREQ");
		RewriteRuleITokenStream stream_RESOLUTION=new RewriteRuleITokenStream(adaptor,"token RESOLUTION");
		RewriteRuleITokenStream stream_SPEECH=new RewriteRuleITokenStream(adaptor,"token SPEECH");
		RewriteRuleITokenStream stream_IMPORTANT_COMMENTS=new RewriteRuleITokenStream(adaptor,"token IMPORTANT_COMMENTS");
		RewriteRuleITokenStream stream_URI=new RewriteRuleITokenStream(adaptor,"token URI");
		RewriteRuleITokenStream stream_MSIE_EXPRESSION=new RewriteRuleITokenStream(adaptor,"token MSIE_EXPRESSION");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleITokenStream stream_REPLACEMENTTOKEN=new RewriteRuleITokenStream(adaptor,"token REPLACEMENTTOKEN");
		RewriteRuleSubtreeStream stream_unary_operator=new RewriteRuleSubtreeStream(adaptor,"rule unary_operator");
		RewriteRuleSubtreeStream stream_hash=new RewriteRuleSubtreeStream(adaptor,"rule hash");
		RewriteRuleSubtreeStream stream_function=new RewriteRuleSubtreeStream(adaptor,"rule function");
		try { DebugEnterRule(GrammarFileName, "term");
		DebugLocation(509, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:5: ( ( ( unary_operator )? (t= NUMBER |t= PERCENTAGE |t= LENGTH |t= RELATIVELENGTH |t= ANGLE |t= TIME |t= FREQ |t= RESOLUTION |t= SPEECH ) ) ( IMPORTANT_COMMENTS )* -> ^( TERM ( unary_operator )? ^( NUMBERBASEDVALUE $t) ( IMPORTANT_COMMENTS )* ) | URI ( IMPORTANT_COMMENTS )* -> ^( TERM ^( URIBASEDVALUE URI ) ( IMPORTANT_COMMENTS )* ) | (exp= ( MSIE_EXPRESSION ) ) ( IMPORTANT_COMMENTS )* -> ^( TERM ^( STRINGBASEDVALUE $exp) ( IMPORTANT_COMMENTS )* ) | IDENT ( IMPORTANT_COMMENTS )* -> ^( TERM ^( IDENTBASEDVALUE IDENT ) ( IMPORTANT_COMMENTS )* ) | STRING ( IMPORTANT_COMMENTS )* -> ^( TERM ^( STRINGBASEDVALUE STRING ) ( IMPORTANT_COMMENTS )* ) | hash ( IMPORTANT_COMMENTS )* -> ^( TERM ^( HEXBASEDVALUE hash ) ( IMPORTANT_COMMENTS )* ) | REPLACEMENTTOKEN -> ^( TERM ^( REPLACEMENTTOKENBASEDVALUE REPLACEMENTTOKEN ) ) | function ( IMPORTANT_COMMENTS )* -> ^( TERM function ( IMPORTANT_COMMENTS )* ) )
			int alt65=8;
			try { DebugEnterDecision(65, false);
			try
			{
				alt65 = dfa65.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:7: ( ( unary_operator )? (t= NUMBER |t= PERCENTAGE |t= LENGTH |t= RELATIVELENGTH |t= ANGLE |t= TIME |t= FREQ |t= RESOLUTION |t= SPEECH ) ) ( IMPORTANT_COMMENTS )*
				{
				DebugLocation(510, 7);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:7: ( ( unary_operator )? (t= NUMBER |t= PERCENTAGE |t= LENGTH |t= RELATIVELENGTH |t= ANGLE |t= TIME |t= FREQ |t= RESOLUTION |t= SPEECH ) )
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:8: ( unary_operator )? (t= NUMBER |t= PERCENTAGE |t= LENGTH |t= RELATIVELENGTH |t= ANGLE |t= TIME |t= FREQ |t= RESOLUTION |t= SPEECH )
				{
				DebugLocation(510, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:8: ( unary_operator )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==MINUS||LA56_0==PLUS))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:8: unary_operator
					{
					DebugLocation(510, 8);
					PushFollow(Follow._unary_operator_in_term2943);
					unary_operator139=unary_operator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_unary_operator.Add(unary_operator139.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(56); }

				DebugLocation(510, 24);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:24: (t= NUMBER |t= PERCENTAGE |t= LENGTH |t= RELATIVELENGTH |t= ANGLE |t= TIME |t= FREQ |t= RESOLUTION |t= SPEECH )
				int alt57=9;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				switch (input.LA(1))
				{
				case NUMBER:
					{
					alt57 = 1;
					}
					break;
				case PERCENTAGE:
					{
					alt57 = 2;
					}
					break;
				case LENGTH:
					{
					alt57 = 3;
					}
					break;
				case RELATIVELENGTH:
					{
					alt57 = 4;
					}
					break;
				case ANGLE:
					{
					alt57 = 5;
					}
					break;
				case TIME:
					{
					alt57 = 6;
					}
					break;
				case FREQ:
					{
					alt57 = 7;
					}
					break;
				case RESOLUTION:
					{
					alt57 = 8;
					}
					break;
				case SPEECH:
					{
					alt57 = 9;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:25: t= NUMBER
					{
					DebugLocation(510, 27);
					t=(CommonToken)Match(input,NUMBER,Follow._NUMBER_in_term2951); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NUMBER.Add(t);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:38: t= PERCENTAGE
					{
					DebugLocation(510, 40);
					t=(CommonToken)Match(input,PERCENTAGE,Follow._PERCENTAGE_in_term2959); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_PERCENTAGE.Add(t);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:55: t= LENGTH
					{
					DebugLocation(510, 57);
					t=(CommonToken)Match(input,LENGTH,Follow._LENGTH_in_term2967); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LENGTH.Add(t);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:68: t= RELATIVELENGTH
					{
					DebugLocation(510, 70);
					t=(CommonToken)Match(input,RELATIVELENGTH,Follow._RELATIVELENGTH_in_term2975); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RELATIVELENGTH.Add(t);


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:89: t= ANGLE
					{
					DebugLocation(510, 91);
					t=(CommonToken)Match(input,ANGLE,Follow._ANGLE_in_term2983); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ANGLE.Add(t);


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:101: t= TIME
					{
					DebugLocation(510, 103);
					t=(CommonToken)Match(input,TIME,Follow._TIME_in_term2991); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_TIME.Add(t);


					}
					break;
				case 7:
					DebugEnterAlt(7);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:112: t= FREQ
					{
					DebugLocation(510, 114);
					t=(CommonToken)Match(input,FREQ,Follow._FREQ_in_term2999); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_FREQ.Add(t);


					}
					break;
				case 8:
					DebugEnterAlt(8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:123: t= RESOLUTION
					{
					DebugLocation(510, 125);
					t=(CommonToken)Match(input,RESOLUTION,Follow._RESOLUTION_in_term3007); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RESOLUTION.Add(t);


					}
					break;
				case 9:
					DebugEnterAlt(9);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:140: t= SPEECH
					{
					DebugLocation(510, 142);
					t=(CommonToken)Match(input,SPEECH,Follow._SPEECH_in_term3015); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SPEECH.Add(t);


					}
					break;

				}
				} finally { DebugExitSubRule(57); }


				}

				DebugLocation(510, 154);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:154: ( IMPORTANT_COMMENTS )*
				try { DebugEnterSubRule(58);
				while (true)
				{
					int alt58=2;
					try { DebugEnterDecision(58, false);
					int LA58_0 = input.LA(1);

					if ((LA58_0==IMPORTANT_COMMENTS))
					{
						alt58 = 1;
					}


					} finally { DebugExitDecision(58); }
					switch ( alt58 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:510:154: IMPORTANT_COMMENTS
						{
						DebugLocation(510, 154);
						IMPORTANT_COMMENTS140=(CommonToken)Match(input,IMPORTANT_COMMENTS,Follow._IMPORTANT_COMMENTS_in_term3020); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IMPORTANT_COMMENTS.Add(IMPORTANT_COMMENTS140);


						}
						break;

					default:
						goto loop58;
					}
				}

				loop58:
					;

				} finally { DebugExitSubRule(58); }



				{
				// AST REWRITE
				// elements: unary_operator, t, IMPORTANT_COMMENTS
				// token labels: t
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_t=new RewriteRuleITokenStream(adaptor,"token t",t);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 511:5: -> ^( TERM ( unary_operator )? ^( NUMBERBASEDVALUE $t) ( IMPORTANT_COMMENTS )* )
				{
					DebugLocation(511, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:511:8: ^( TERM ( unary_operator )? ^( NUMBERBASEDVALUE $t) ( IMPORTANT_COMMENTS )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(511, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TERM, "TERM"), root_1);

					DebugLocation(511, 15);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:511:15: ( unary_operator )?
					if (stream_unary_operator.HasNext)
					{
						DebugLocation(511, 15);
						adaptor.AddChild(root_1, stream_unary_operator.NextTree());

					}
					stream_unary_operator.Reset();
					DebugLocation(511, 31);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:511:31: ^( NUMBERBASEDVALUE $t)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(511, 33);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(NUMBERBASEDVALUE, "NUMBERBASEDVALUE"), root_2);

					DebugLocation(511, 51);
					adaptor.AddChild(root_2, stream_t.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(511, 54);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:511:54: ( IMPORTANT_COMMENTS )*
					while ( stream_IMPORTANT_COMMENTS.HasNext )
					{
						DebugLocation(511, 54);
						adaptor.AddChild(root_1, stream_IMPORTANT_COMMENTS.NextNode());

					}
					stream_IMPORTANT_COMMENTS.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:512:7: URI ( IMPORTANT_COMMENTS )*
				{
				DebugLocation(512, 7);
				URI141=(CommonToken)Match(input,URI,Follow._URI_in_term3052); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_URI.Add(URI141);

				DebugLocation(512, 11);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:512:11: ( IMPORTANT_COMMENTS )*
				try { DebugEnterSubRule(59);
				while (true)
				{
					int alt59=2;
					try { DebugEnterDecision(59, false);
					int LA59_0 = input.LA(1);

					if ((LA59_0==IMPORTANT_COMMENTS))
					{
						alt59 = 1;
					}


					} finally { DebugExitDecision(59); }
					switch ( alt59 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:512:11: IMPORTANT_COMMENTS
						{
						DebugLocation(512, 11);
						IMPORTANT_COMMENTS142=(CommonToken)Match(input,IMPORTANT_COMMENTS,Follow._IMPORTANT_COMMENTS_in_term3054); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IMPORTANT_COMMENTS.Add(IMPORTANT_COMMENTS142);


						}
						break;

					default:
						goto loop59;
					}
				}

				loop59:
					;

				} finally { DebugExitSubRule(59); }



				{
				// AST REWRITE
				// elements: URI, IMPORTANT_COMMENTS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 513:5: -> ^( TERM ^( URIBASEDVALUE URI ) ( IMPORTANT_COMMENTS )* )
				{
					DebugLocation(513, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:513:8: ^( TERM ^( URIBASEDVALUE URI ) ( IMPORTANT_COMMENTS )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(513, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TERM, "TERM"), root_1);

					DebugLocation(513, 15);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:513:15: ^( URIBASEDVALUE URI )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(513, 17);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(URIBASEDVALUE, "URIBASEDVALUE"), root_2);

					DebugLocation(513, 31);
					adaptor.AddChild(root_2, stream_URI.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(513, 36);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:513:36: ( IMPORTANT_COMMENTS )*
					while ( stream_IMPORTANT_COMMENTS.HasNext )
					{
						DebugLocation(513, 36);
						adaptor.AddChild(root_1, stream_IMPORTANT_COMMENTS.NextNode());

					}
					stream_IMPORTANT_COMMENTS.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:514:7: (exp= ( MSIE_EXPRESSION ) ) ( IMPORTANT_COMMENTS )*
				{
				DebugLocation(514, 7);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:514:7: (exp= ( MSIE_EXPRESSION ) )
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:514:8: exp= ( MSIE_EXPRESSION )
				{
				DebugLocation(514, 12);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:514:14: ( MSIE_EXPRESSION )
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:514:15: MSIE_EXPRESSION
				{
				DebugLocation(514, 15);
				MSIE_EXPRESSION143=(CommonToken)Match(input,MSIE_EXPRESSION,Follow._MSIE_EXPRESSION_in_term3088); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MSIE_EXPRESSION.Add(MSIE_EXPRESSION143);

				DebugLocation(514, 31);
				if (state.backtracking == 0)
				{
					 exp = TrimMsieExpression((MSIE_EXPRESSION143!=null?MSIE_EXPRESSION143.Text:null)); 
				}

				}


				}

				DebugLocation(514, 86);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:514:86: ( IMPORTANT_COMMENTS )*
				try { DebugEnterSubRule(60);
				while (true)
				{
					int alt60=2;
					try { DebugEnterDecision(60, false);
					int LA60_0 = input.LA(1);

					if ((LA60_0==IMPORTANT_COMMENTS))
					{
						alt60 = 1;
					}


					} finally { DebugExitDecision(60); }
					switch ( alt60 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:514:86: IMPORTANT_COMMENTS
						{
						DebugLocation(514, 86);
						IMPORTANT_COMMENTS144=(CommonToken)Match(input,IMPORTANT_COMMENTS,Follow._IMPORTANT_COMMENTS_in_term3093); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IMPORTANT_COMMENTS.Add(IMPORTANT_COMMENTS144);


						}
						break;

					default:
						goto loop60;
					}
				}

				loop60:
					;

				} finally { DebugExitSubRule(60); }



				{
				// AST REWRITE
				// elements: exp, IMPORTANT_COMMENTS
				// token labels: exp
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_exp=new RewriteRuleITokenStream(adaptor,"token exp",exp);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 515:5: -> ^( TERM ^( STRINGBASEDVALUE $exp) ( IMPORTANT_COMMENTS )* )
				{
					DebugLocation(515, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:515:8: ^( TERM ^( STRINGBASEDVALUE $exp) ( IMPORTANT_COMMENTS )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(515, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TERM, "TERM"), root_1);

					DebugLocation(515, 15);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:515:15: ^( STRINGBASEDVALUE $exp)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(515, 17);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(STRINGBASEDVALUE, "STRINGBASEDVALUE"), root_2);

					DebugLocation(515, 35);
					adaptor.AddChild(root_2, stream_exp.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(515, 40);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:515:40: ( IMPORTANT_COMMENTS )*
					while ( stream_IMPORTANT_COMMENTS.HasNext )
					{
						DebugLocation(515, 40);
						adaptor.AddChild(root_1, stream_IMPORTANT_COMMENTS.NextNode());

					}
					stream_IMPORTANT_COMMENTS.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:516:7: IDENT ( IMPORTANT_COMMENTS )*
				{
				DebugLocation(516, 7);
				IDENT145=(CommonToken)Match(input,IDENT,Follow._IDENT_in_term3122); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT145);

				DebugLocation(516, 13);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:516:13: ( IMPORTANT_COMMENTS )*
				try { DebugEnterSubRule(61);
				while (true)
				{
					int alt61=2;
					try { DebugEnterDecision(61, false);
					int LA61_0 = input.LA(1);

					if ((LA61_0==IMPORTANT_COMMENTS))
					{
						alt61 = 1;
					}


					} finally { DebugExitDecision(61); }
					switch ( alt61 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:516:13: IMPORTANT_COMMENTS
						{
						DebugLocation(516, 13);
						IMPORTANT_COMMENTS146=(CommonToken)Match(input,IMPORTANT_COMMENTS,Follow._IMPORTANT_COMMENTS_in_term3124); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IMPORTANT_COMMENTS.Add(IMPORTANT_COMMENTS146);


						}
						break;

					default:
						goto loop61;
					}
				}

				loop61:
					;

				} finally { DebugExitSubRule(61); }



				{
				// AST REWRITE
				// elements: IDENT, IMPORTANT_COMMENTS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 517:5: -> ^( TERM ^( IDENTBASEDVALUE IDENT ) ( IMPORTANT_COMMENTS )* )
				{
					DebugLocation(517, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:517:8: ^( TERM ^( IDENTBASEDVALUE IDENT ) ( IMPORTANT_COMMENTS )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(517, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TERM, "TERM"), root_1);

					DebugLocation(517, 15);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:517:15: ^( IDENTBASEDVALUE IDENT )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(517, 17);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTBASEDVALUE, "IDENTBASEDVALUE"), root_2);

					DebugLocation(517, 33);
					adaptor.AddChild(root_2, stream_IDENT.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(517, 40);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:517:40: ( IMPORTANT_COMMENTS )*
					while ( stream_IMPORTANT_COMMENTS.HasNext )
					{
						DebugLocation(517, 40);
						adaptor.AddChild(root_1, stream_IMPORTANT_COMMENTS.NextNode());

					}
					stream_IMPORTANT_COMMENTS.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:518:7: STRING ( IMPORTANT_COMMENTS )*
				{
				DebugLocation(518, 7);
				STRING147=(CommonToken)Match(input,STRING,Follow._STRING_in_term3152); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING147);

				DebugLocation(518, 14);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:518:14: ( IMPORTANT_COMMENTS )*
				try { DebugEnterSubRule(62);
				while (true)
				{
					int alt62=2;
					try { DebugEnterDecision(62, false);
					int LA62_0 = input.LA(1);

					if ((LA62_0==IMPORTANT_COMMENTS))
					{
						alt62 = 1;
					}


					} finally { DebugExitDecision(62); }
					switch ( alt62 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:518:14: IMPORTANT_COMMENTS
						{
						DebugLocation(518, 14);
						IMPORTANT_COMMENTS148=(CommonToken)Match(input,IMPORTANT_COMMENTS,Follow._IMPORTANT_COMMENTS_in_term3154); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IMPORTANT_COMMENTS.Add(IMPORTANT_COMMENTS148);


						}
						break;

					default:
						goto loop62;
					}
				}

				loop62:
					;

				} finally { DebugExitSubRule(62); }



				{
				// AST REWRITE
				// elements: STRING, IMPORTANT_COMMENTS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 519:5: -> ^( TERM ^( STRINGBASEDVALUE STRING ) ( IMPORTANT_COMMENTS )* )
				{
					DebugLocation(519, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:519:8: ^( TERM ^( STRINGBASEDVALUE STRING ) ( IMPORTANT_COMMENTS )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(519, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TERM, "TERM"), root_1);

					DebugLocation(519, 15);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:519:15: ^( STRINGBASEDVALUE STRING )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(519, 17);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(STRINGBASEDVALUE, "STRINGBASEDVALUE"), root_2);

					DebugLocation(519, 34);
					adaptor.AddChild(root_2, stream_STRING.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(519, 42);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:519:42: ( IMPORTANT_COMMENTS )*
					while ( stream_IMPORTANT_COMMENTS.HasNext )
					{
						DebugLocation(519, 42);
						adaptor.AddChild(root_1, stream_IMPORTANT_COMMENTS.NextNode());

					}
					stream_IMPORTANT_COMMENTS.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:520:7: hash ( IMPORTANT_COMMENTS )*
				{
				DebugLocation(520, 7);
				PushFollow(Follow._hash_in_term3182);
				hash149=hash();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_hash.Add(hash149.Tree);
				DebugLocation(520, 12);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:520:12: ( IMPORTANT_COMMENTS )*
				try { DebugEnterSubRule(63);
				while (true)
				{
					int alt63=2;
					try { DebugEnterDecision(63, false);
					int LA63_0 = input.LA(1);

					if ((LA63_0==IMPORTANT_COMMENTS))
					{
						alt63 = 1;
					}


					} finally { DebugExitDecision(63); }
					switch ( alt63 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:520:12: IMPORTANT_COMMENTS
						{
						DebugLocation(520, 12);
						IMPORTANT_COMMENTS150=(CommonToken)Match(input,IMPORTANT_COMMENTS,Follow._IMPORTANT_COMMENTS_in_term3184); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IMPORTANT_COMMENTS.Add(IMPORTANT_COMMENTS150);


						}
						break;

					default:
						goto loop63;
					}
				}

				loop63:
					;

				} finally { DebugExitSubRule(63); }



				{
				// AST REWRITE
				// elements: hash, IMPORTANT_COMMENTS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 521:5: -> ^( TERM ^( HEXBASEDVALUE hash ) ( IMPORTANT_COMMENTS )* )
				{
					DebugLocation(521, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:521:8: ^( TERM ^( HEXBASEDVALUE hash ) ( IMPORTANT_COMMENTS )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(521, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TERM, "TERM"), root_1);

					DebugLocation(521, 15);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:521:15: ^( HEXBASEDVALUE hash )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(521, 17);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(HEXBASEDVALUE, "HEXBASEDVALUE"), root_2);

					DebugLocation(521, 31);
					adaptor.AddChild(root_2, stream_hash.NextTree());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(521, 37);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:521:37: ( IMPORTANT_COMMENTS )*
					while ( stream_IMPORTANT_COMMENTS.HasNext )
					{
						DebugLocation(521, 37);
						adaptor.AddChild(root_1, stream_IMPORTANT_COMMENTS.NextNode());

					}
					stream_IMPORTANT_COMMENTS.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:522:4: REPLACEMENTTOKEN
				{
				DebugLocation(522, 4);
				REPLACEMENTTOKEN151=(CommonToken)Match(input,REPLACEMENTTOKEN,Follow._REPLACEMENTTOKEN_in_term3209); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_REPLACEMENTTOKEN.Add(REPLACEMENTTOKEN151);



				{
				// AST REWRITE
				// elements: REPLACEMENTTOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 523:5: -> ^( TERM ^( REPLACEMENTTOKENBASEDVALUE REPLACEMENTTOKEN ) )
				{
					DebugLocation(523, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:523:8: ^( TERM ^( REPLACEMENTTOKENBASEDVALUE REPLACEMENTTOKEN ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(523, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TERM, "TERM"), root_1);

					DebugLocation(523, 15);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:523:15: ^( REPLACEMENTTOKENBASEDVALUE REPLACEMENTTOKEN )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(523, 17);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(REPLACEMENTTOKENBASEDVALUE, "REPLACEMENTTOKENBASEDVALUE"), root_2);

					DebugLocation(523, 44);
					adaptor.AddChild(root_2, stream_REPLACEMENTTOKEN.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:524:7: function ( IMPORTANT_COMMENTS )*
				{
				DebugLocation(524, 7);
				PushFollow(Follow._function_in_term3233);
				function152=function();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_function.Add(function152.Tree);
				DebugLocation(524, 16);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:524:16: ( IMPORTANT_COMMENTS )*
				try { DebugEnterSubRule(64);
				while (true)
				{
					int alt64=2;
					try { DebugEnterDecision(64, false);
					int LA64_0 = input.LA(1);

					if ((LA64_0==IMPORTANT_COMMENTS))
					{
						alt64 = 1;
					}


					} finally { DebugExitDecision(64); }
					switch ( alt64 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:524:16: IMPORTANT_COMMENTS
						{
						DebugLocation(524, 16);
						IMPORTANT_COMMENTS153=(CommonToken)Match(input,IMPORTANT_COMMENTS,Follow._IMPORTANT_COMMENTS_in_term3235); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IMPORTANT_COMMENTS.Add(IMPORTANT_COMMENTS153);


						}
						break;

					default:
						goto loop64;
					}
				}

				loop64:
					;

				} finally { DebugExitSubRule(64); }



				{
				// AST REWRITE
				// elements: function, IMPORTANT_COMMENTS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 525:5: -> ^( TERM function ( IMPORTANT_COMMENTS )* )
				{
					DebugLocation(525, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:525:8: ^( TERM function ( IMPORTANT_COMMENTS )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(525, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TERM, "TERM"), root_1);

					DebugLocation(525, 15);
					adaptor.AddChild(root_1, stream_function.NextTree());
					DebugLocation(525, 24);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:525:24: ( IMPORTANT_COMMENTS )*
					while ( stream_IMPORTANT_COMMENTS.HasNext )
					{
						DebugLocation(525, 24);
						adaptor.AddChild(root_1, stream_IMPORTANT_COMMENTS.NextNode());

					}
					stream_IMPORTANT_COMMENTS.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("term", 45);
			LeaveRule("term", 45);
			LeaveRule_term();
		}
		DebugLocation(526, 4);
		} finally { DebugExitRule(GrammarFileName, "term"); }
		return retval;

	}
	// $ANTLR end "term"

	private sealed partial class hash_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public hash_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_hash();
	partial void LeaveRule_hash();

	// $ANTLR start "hash"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:528:1: hash : HASH_IDENT -> ^( HASHIDENTIFIER HASH_IDENT ) ;
	[GrammarRule("hash")]
	private CssParser.hash_return hash()
	{
		EnterRule_hash();
		EnterRule("hash", 46);
		TraceIn("hash", 46);
		CssParser.hash_return retval = new CssParser.hash_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken HASH_IDENT154 = default(CommonToken);

		object HASH_IDENT154_tree = default(object);
		RewriteRuleITokenStream stream_HASH_IDENT=new RewriteRuleITokenStream(adaptor,"token HASH_IDENT");

		try { DebugEnterRule(GrammarFileName, "hash");
		DebugLocation(528, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:529:5: ( HASH_IDENT -> ^( HASHIDENTIFIER HASH_IDENT ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:529:7: HASH_IDENT
			{
			DebugLocation(529, 7);
			HASH_IDENT154=(CommonToken)Match(input,HASH_IDENT,Follow._HASH_IDENT_in_hash3268); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_HASH_IDENT.Add(HASH_IDENT154);



			{
			// AST REWRITE
			// elements: HASH_IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 530:5: -> ^( HASHIDENTIFIER HASH_IDENT )
			{
				DebugLocation(530, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:530:8: ^( HASHIDENTIFIER HASH_IDENT )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(530, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(HASHIDENTIFIER, "HASHIDENTIFIER"), root_1);

				DebugLocation(530, 25);
				adaptor.AddChild(root_1, stream_HASH_IDENT.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hash", 46);
			LeaveRule("hash", 46);
			LeaveRule_hash();
		}
		DebugLocation(531, 4);
		} finally { DebugExitRule(GrammarFileName, "hash"); }
		return retval;

	}
	// $ANTLR end "hash"

	private sealed partial class function_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public function_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_function();
	partial void LeaveRule_function();

	// $ANTLR start "function"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:536:1: function : beginfunc ( expr )? CIRCLE_END -> ^( FUNCTIONBASEDVALUE beginfunc ( expr )? ) ;
	[GrammarRule("function")]
	private CssParser.function_return function()
	{
		EnterRule_function();
		EnterRule("function", 47);
		TraceIn("function", 47);
		CssParser.function_return retval = new CssParser.function_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken CIRCLE_END157 = default(CommonToken);
		CssParser.beginfunc_return beginfunc155 = default(CssParser.beginfunc_return);
		CssParser.expr_return expr156 = default(CssParser.expr_return);

		object CIRCLE_END157_tree = default(object);
		RewriteRuleITokenStream stream_CIRCLE_END=new RewriteRuleITokenStream(adaptor,"token CIRCLE_END");
		RewriteRuleSubtreeStream stream_beginfunc=new RewriteRuleSubtreeStream(adaptor,"rule beginfunc");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "function");
		DebugLocation(536, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:537:5: ( beginfunc ( expr )? CIRCLE_END -> ^( FUNCTIONBASEDVALUE beginfunc ( expr )? ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:537:7: beginfunc ( expr )? CIRCLE_END
			{
			DebugLocation(537, 7);
			PushFollow(Follow._beginfunc_in_function3300);
			beginfunc155=beginfunc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_beginfunc.Add(beginfunc155.Tree);
			DebugLocation(537, 17);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:537:17: ( expr )?
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==ANGLE||(LA66_0>=FREQ && LA66_0<=FROM)||LA66_0==HASH_IDENT||LA66_0==IDENT||LA66_0==IMPORTANT_COMMENTS||LA66_0==LENGTH||(LA66_0>=MINUS && LA66_0<=MSIE_IMAGE_TRANSFORM)||LA66_0==NUMBER||LA66_0==PERCENTAGE||LA66_0==PLUS||LA66_0==RELATIVELENGTH||LA66_0==REPLACEMENTTOKEN||LA66_0==RESOLUTION||LA66_0==SPEECH||LA66_0==STRING||(LA66_0>=TIME && LA66_0<=TO)||LA66_0==URI))
			{
				alt66 = 1;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:537:17: expr
				{
				DebugLocation(537, 17);
				PushFollow(Follow._expr_in_function3302);
				expr156=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr156.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(66); }

			DebugLocation(537, 23);
			CIRCLE_END157=(CommonToken)Match(input,CIRCLE_END,Follow._CIRCLE_END_in_function3305); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CIRCLE_END.Add(CIRCLE_END157);



			{
			// AST REWRITE
			// elements: beginfunc, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 538:5: -> ^( FUNCTIONBASEDVALUE beginfunc ( expr )? )
			{
				DebugLocation(538, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:538:8: ^( FUNCTIONBASEDVALUE beginfunc ( expr )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(538, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNCTIONBASEDVALUE, "FUNCTIONBASEDVALUE"), root_1);

				DebugLocation(538, 29);
				adaptor.AddChild(root_1, stream_beginfunc.NextTree());
				DebugLocation(538, 39);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:538:39: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(538, 39);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function", 47);
			LeaveRule("function", 47);
			LeaveRule_function();
		}
		DebugLocation(539, 4);
		} finally { DebugExitRule(GrammarFileName, "function"); }
		return retval;

	}
	// $ANTLR end "function"

	private sealed partial class beginfunc_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public beginfunc_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_beginfunc();
	partial void LeaveRule_beginfunc();

	// $ANTLR start "beginfunc"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:541:1: beginfunc : ( IDENT CIRCLE_BEGIN -> ^( FUNCTIONNAME IDENT ) | FROM CIRCLE_BEGIN -> ^( FUNCTIONNAME FROM ) | TO CIRCLE_BEGIN -> ^( FUNCTIONNAME TO ) | MSIE_IMAGE_TRANSFORM CIRCLE_BEGIN -> ^( FUNCTIONNAME MSIE_IMAGE_TRANSFORM ) );
	[GrammarRule("beginfunc")]
	private CssParser.beginfunc_return beginfunc()
	{
		EnterRule_beginfunc();
		EnterRule("beginfunc", 48);
		TraceIn("beginfunc", 48);
		CssParser.beginfunc_return retval = new CssParser.beginfunc_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken IDENT158 = default(CommonToken);
		CommonToken CIRCLE_BEGIN159 = default(CommonToken);
		CommonToken FROM160 = default(CommonToken);
		CommonToken CIRCLE_BEGIN161 = default(CommonToken);
		CommonToken TO162 = default(CommonToken);
		CommonToken CIRCLE_BEGIN163 = default(CommonToken);
		CommonToken MSIE_IMAGE_TRANSFORM164 = default(CommonToken);
		CommonToken CIRCLE_BEGIN165 = default(CommonToken);

		object IDENT158_tree = default(object);
		object CIRCLE_BEGIN159_tree = default(object);
		object FROM160_tree = default(object);
		object CIRCLE_BEGIN161_tree = default(object);
		object TO162_tree = default(object);
		object CIRCLE_BEGIN163_tree = default(object);
		object MSIE_IMAGE_TRANSFORM164_tree = default(object);
		object CIRCLE_BEGIN165_tree = default(object);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_CIRCLE_BEGIN=new RewriteRuleITokenStream(adaptor,"token CIRCLE_BEGIN");
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_TO=new RewriteRuleITokenStream(adaptor,"token TO");
		RewriteRuleITokenStream stream_MSIE_IMAGE_TRANSFORM=new RewriteRuleITokenStream(adaptor,"token MSIE_IMAGE_TRANSFORM");

		try { DebugEnterRule(GrammarFileName, "beginfunc");
		DebugLocation(541, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:542:5: ( IDENT CIRCLE_BEGIN -> ^( FUNCTIONNAME IDENT ) | FROM CIRCLE_BEGIN -> ^( FUNCTIONNAME FROM ) | TO CIRCLE_BEGIN -> ^( FUNCTIONNAME TO ) | MSIE_IMAGE_TRANSFORM CIRCLE_BEGIN -> ^( FUNCTIONNAME MSIE_IMAGE_TRANSFORM ) )
			int alt67=4;
			try { DebugEnterDecision(67, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt67 = 1;
				}
				break;
			case FROM:
				{
				alt67 = 2;
				}
				break;
			case TO:
				{
				alt67 = 3;
				}
				break;
			case MSIE_IMAGE_TRANSFORM:
				{
				alt67 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:542:7: IDENT CIRCLE_BEGIN
				{
				DebugLocation(542, 7);
				IDENT158=(CommonToken)Match(input,IDENT,Follow._IDENT_in_beginfunc3337); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT158);

				DebugLocation(542, 13);
				CIRCLE_BEGIN159=(CommonToken)Match(input,CIRCLE_BEGIN,Follow._CIRCLE_BEGIN_in_beginfunc3339); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CIRCLE_BEGIN.Add(CIRCLE_BEGIN159);



				{
				// AST REWRITE
				// elements: IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 543:5: -> ^( FUNCTIONNAME IDENT )
				{
					DebugLocation(543, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:543:8: ^( FUNCTIONNAME IDENT )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(543, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNCTIONNAME, "FUNCTIONNAME"), root_1);

					DebugLocation(543, 23);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:545:7: FROM CIRCLE_BEGIN
				{
				DebugLocation(545, 7);
				FROM160=(CommonToken)Match(input,FROM,Follow._FROM_in_beginfunc3361); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM160);

				DebugLocation(545, 12);
				CIRCLE_BEGIN161=(CommonToken)Match(input,CIRCLE_BEGIN,Follow._CIRCLE_BEGIN_in_beginfunc3363); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CIRCLE_BEGIN.Add(CIRCLE_BEGIN161);



				{
				// AST REWRITE
				// elements: FROM
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 546:5: -> ^( FUNCTIONNAME FROM )
				{
					DebugLocation(546, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:546:8: ^( FUNCTIONNAME FROM )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(546, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNCTIONNAME, "FUNCTIONNAME"), root_1);

					DebugLocation(546, 23);
					adaptor.AddChild(root_1, stream_FROM.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:547:7: TO CIRCLE_BEGIN
				{
				DebugLocation(547, 7);
				TO162=(CommonToken)Match(input,TO,Follow._TO_in_beginfunc3383); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TO.Add(TO162);

				DebugLocation(547, 10);
				CIRCLE_BEGIN163=(CommonToken)Match(input,CIRCLE_BEGIN,Follow._CIRCLE_BEGIN_in_beginfunc3385); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CIRCLE_BEGIN.Add(CIRCLE_BEGIN163);



				{
				// AST REWRITE
				// elements: TO
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 548:5: -> ^( FUNCTIONNAME TO )
				{
					DebugLocation(548, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:548:8: ^( FUNCTIONNAME TO )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(548, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNCTIONNAME, "FUNCTIONNAME"), root_1);

					DebugLocation(548, 23);
					adaptor.AddChild(root_1, stream_TO.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:550:7: MSIE_IMAGE_TRANSFORM CIRCLE_BEGIN
				{
				DebugLocation(550, 7);
				MSIE_IMAGE_TRANSFORM164=(CommonToken)Match(input,MSIE_IMAGE_TRANSFORM,Follow._MSIE_IMAGE_TRANSFORM_in_beginfunc3406); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MSIE_IMAGE_TRANSFORM.Add(MSIE_IMAGE_TRANSFORM164);

				DebugLocation(550, 28);
				CIRCLE_BEGIN165=(CommonToken)Match(input,CIRCLE_BEGIN,Follow._CIRCLE_BEGIN_in_beginfunc3408); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CIRCLE_BEGIN.Add(CIRCLE_BEGIN165);



				{
				// AST REWRITE
				// elements: MSIE_IMAGE_TRANSFORM
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 551:5: -> ^( FUNCTIONNAME MSIE_IMAGE_TRANSFORM )
				{
					DebugLocation(551, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:551:8: ^( FUNCTIONNAME MSIE_IMAGE_TRANSFORM )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(551, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FUNCTIONNAME, "FUNCTIONNAME"), root_1);

					DebugLocation(551, 23);
					adaptor.AddChild(root_1, stream_MSIE_IMAGE_TRANSFORM.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("beginfunc", 48);
			LeaveRule("beginfunc", 48);
			LeaveRule_beginfunc();
		}
		DebugLocation(552, 4);
		} finally { DebugExitRule(GrammarFileName, "beginfunc"); }
		return retval;

	}
	// $ANTLR end "beginfunc"

	private sealed partial class keyframes_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public keyframes_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_keyframes();
	partial void LeaveRule_keyframes();

	// $ANTLR start "keyframes"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:555:1: keyframes : KEYFRAMES_SYM ( IDENT | STRING ) CURLY_BEGIN ( keyframes_block )* CURLY_END -> ^( KEYFRAMES ^( KEYFRAMES_SYMBOL KEYFRAMES_SYM ) ( ^( IDENTBASEDVALUE IDENT ) )? ( ^( STRINGBASEDVALUE STRING ) )? ( ^( KEYFRAMES_BLOCKS ( keyframes_block )* ) )? ) ;
	[GrammarRule("keyframes")]
	private CssParser.keyframes_return keyframes()
	{
		EnterRule_keyframes();
		EnterRule("keyframes", 49);
		TraceIn("keyframes", 49);
		CssParser.keyframes_return retval = new CssParser.keyframes_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken KEYFRAMES_SYM166 = default(CommonToken);
		CommonToken IDENT167 = default(CommonToken);
		CommonToken STRING168 = default(CommonToken);
		CommonToken CURLY_BEGIN169 = default(CommonToken);
		CommonToken CURLY_END171 = default(CommonToken);
		CssParser.keyframes_block_return keyframes_block170 = default(CssParser.keyframes_block_return);

		object KEYFRAMES_SYM166_tree = default(object);
		object IDENT167_tree = default(object);
		object STRING168_tree = default(object);
		object CURLY_BEGIN169_tree = default(object);
		object CURLY_END171_tree = default(object);
		RewriteRuleITokenStream stream_KEYFRAMES_SYM=new RewriteRuleITokenStream(adaptor,"token KEYFRAMES_SYM");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleITokenStream stream_CURLY_BEGIN=new RewriteRuleITokenStream(adaptor,"token CURLY_BEGIN");
		RewriteRuleITokenStream stream_CURLY_END=new RewriteRuleITokenStream(adaptor,"token CURLY_END");
		RewriteRuleSubtreeStream stream_keyframes_block=new RewriteRuleSubtreeStream(adaptor,"rule keyframes_block");
		try { DebugEnterRule(GrammarFileName, "keyframes");
		DebugLocation(555, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:556:5: ( KEYFRAMES_SYM ( IDENT | STRING ) CURLY_BEGIN ( keyframes_block )* CURLY_END -> ^( KEYFRAMES ^( KEYFRAMES_SYMBOL KEYFRAMES_SYM ) ( ^( IDENTBASEDVALUE IDENT ) )? ( ^( STRINGBASEDVALUE STRING ) )? ( ^( KEYFRAMES_BLOCKS ( keyframes_block )* ) )? ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:556:7: KEYFRAMES_SYM ( IDENT | STRING ) CURLY_BEGIN ( keyframes_block )* CURLY_END
			{
			DebugLocation(556, 7);
			KEYFRAMES_SYM166=(CommonToken)Match(input,KEYFRAMES_SYM,Follow._KEYFRAMES_SYM_in_keyframes3438); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_KEYFRAMES_SYM.Add(KEYFRAMES_SYM166);

			DebugLocation(556, 21);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:556:21: ( IDENT | STRING )
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==IDENT))
			{
				alt68 = 1;
			}
			else if ((LA68_0==STRING))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:556:22: IDENT
				{
				DebugLocation(556, 22);
				IDENT167=(CommonToken)Match(input,IDENT,Follow._IDENT_in_keyframes3441); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT167);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:556:28: STRING
				{
				DebugLocation(556, 28);
				STRING168=(CommonToken)Match(input,STRING,Follow._STRING_in_keyframes3443); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING168);


				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(556, 36);
			CURLY_BEGIN169=(CommonToken)Match(input,CURLY_BEGIN,Follow._CURLY_BEGIN_in_keyframes3446); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CURLY_BEGIN.Add(CURLY_BEGIN169);

			DebugLocation(556, 48);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:556:48: ( keyframes_block )*
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=2;
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if ((LA69_0==FROM||LA69_0==PERCENTAGE||LA69_0==TO))
				{
					alt69 = 1;
				}


				} finally { DebugExitDecision(69); }
				switch ( alt69 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:556:48: keyframes_block
					{
					DebugLocation(556, 48);
					PushFollow(Follow._keyframes_block_in_keyframes3448);
					keyframes_block170=keyframes_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_keyframes_block.Add(keyframes_block170.Tree);

					}
					break;

				default:
					goto loop69;
				}
			}

			loop69:
				;

			} finally { DebugExitSubRule(69); }

			DebugLocation(556, 65);
			CURLY_END171=(CommonToken)Match(input,CURLY_END,Follow._CURLY_END_in_keyframes3451); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CURLY_END.Add(CURLY_END171);



			{
			// AST REWRITE
			// elements: KEYFRAMES_SYM, IDENT, STRING, keyframes_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 557:5: -> ^( KEYFRAMES ^( KEYFRAMES_SYMBOL KEYFRAMES_SYM ) ( ^( IDENTBASEDVALUE IDENT ) )? ( ^( STRINGBASEDVALUE STRING ) )? ( ^( KEYFRAMES_BLOCKS ( keyframes_block )* ) )? )
			{
				DebugLocation(557, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:557:8: ^( KEYFRAMES ^( KEYFRAMES_SYMBOL KEYFRAMES_SYM ) ( ^( IDENTBASEDVALUE IDENT ) )? ( ^( STRINGBASEDVALUE STRING ) )? ( ^( KEYFRAMES_BLOCKS ( keyframes_block )* ) )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(557, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(KEYFRAMES, "KEYFRAMES"), root_1);

				DebugLocation(557, 20);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:557:20: ^( KEYFRAMES_SYMBOL KEYFRAMES_SYM )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(557, 22);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(KEYFRAMES_SYMBOL, "KEYFRAMES_SYMBOL"), root_2);

				DebugLocation(557, 39);
				adaptor.AddChild(root_2, stream_KEYFRAMES_SYM.NextNode());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(557, 54);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:557:54: ( ^( IDENTBASEDVALUE IDENT ) )?
				if (stream_IDENT.HasNext)
				{
					DebugLocation(557, 54);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:557:54: ^( IDENTBASEDVALUE IDENT )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(557, 56);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(IDENTBASEDVALUE, "IDENTBASEDVALUE"), root_2);

					DebugLocation(557, 72);
					adaptor.AddChild(root_2, stream_IDENT.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_IDENT.Reset();
				DebugLocation(557, 80);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:557:80: ( ^( STRINGBASEDVALUE STRING ) )?
				if (stream_STRING.HasNext)
				{
					DebugLocation(557, 80);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:557:80: ^( STRINGBASEDVALUE STRING )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(557, 82);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(STRINGBASEDVALUE, "STRINGBASEDVALUE"), root_2);

					DebugLocation(557, 99);
					adaptor.AddChild(root_2, stream_STRING.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_STRING.Reset();
				DebugLocation(557, 108);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:557:108: ( ^( KEYFRAMES_BLOCKS ( keyframes_block )* ) )?
				if (stream_keyframes_block.HasNext)
				{
					DebugLocation(557, 108);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:557:108: ^( KEYFRAMES_BLOCKS ( keyframes_block )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(557, 110);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(KEYFRAMES_BLOCKS, "KEYFRAMES_BLOCKS"), root_2);

					DebugLocation(557, 127);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:557:127: ( keyframes_block )*
					while ( stream_keyframes_block.HasNext )
					{
						DebugLocation(557, 127);
						adaptor.AddChild(root_2, stream_keyframes_block.NextTree());

					}
					stream_keyframes_block.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_keyframes_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keyframes", 49);
			LeaveRule("keyframes", 49);
			LeaveRule_keyframes();
		}
		DebugLocation(558, 4);
		} finally { DebugExitRule(GrammarFileName, "keyframes"); }
		return retval;

	}
	// $ANTLR end "keyframes"

	private sealed partial class keyframes_block_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public keyframes_block_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_keyframes_block();
	partial void LeaveRule_keyframes_block();

	// $ANTLR start "keyframes_block"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:561:1: keyframes_block : keyframes_selectors CURLY_BEGIN ( declaration ( SEMICOLON )? )* CURLY_END -> ^( KEYFRAMES_BLOCK ^( KEYFRAMES_SELECTORS keyframes_selectors ) ( ^( DECLARATIONS ( declaration )* ) )? ) ;
	[GrammarRule("keyframes_block")]
	private CssParser.keyframes_block_return keyframes_block()
	{
		EnterRule_keyframes_block();
		EnterRule("keyframes_block", 50);
		TraceIn("keyframes_block", 50);
		CssParser.keyframes_block_return retval = new CssParser.keyframes_block_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken CURLY_BEGIN173 = default(CommonToken);
		CommonToken SEMICOLON175 = default(CommonToken);
		CommonToken CURLY_END176 = default(CommonToken);
		CssParser.keyframes_selectors_return keyframes_selectors172 = default(CssParser.keyframes_selectors_return);
		CssParser.declaration_return declaration174 = default(CssParser.declaration_return);

		object CURLY_BEGIN173_tree = default(object);
		object SEMICOLON175_tree = default(object);
		object CURLY_END176_tree = default(object);
		RewriteRuleITokenStream stream_CURLY_BEGIN=new RewriteRuleITokenStream(adaptor,"token CURLY_BEGIN");
		RewriteRuleITokenStream stream_SEMICOLON=new RewriteRuleITokenStream(adaptor,"token SEMICOLON");
		RewriteRuleITokenStream stream_CURLY_END=new RewriteRuleITokenStream(adaptor,"token CURLY_END");
		RewriteRuleSubtreeStream stream_keyframes_selectors=new RewriteRuleSubtreeStream(adaptor,"rule keyframes_selectors");
		RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "keyframes_block");
		DebugLocation(561, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:562:5: ( keyframes_selectors CURLY_BEGIN ( declaration ( SEMICOLON )? )* CURLY_END -> ^( KEYFRAMES_BLOCK ^( KEYFRAMES_SELECTORS keyframes_selectors ) ( ^( DECLARATIONS ( declaration )* ) )? ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:562:7: keyframes_selectors CURLY_BEGIN ( declaration ( SEMICOLON )? )* CURLY_END
			{
			DebugLocation(562, 7);
			PushFollow(Follow._keyframes_selectors_in_keyframes_block3507);
			keyframes_selectors172=keyframes_selectors();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_keyframes_selectors.Add(keyframes_selectors172.Tree);
			DebugLocation(562, 27);
			CURLY_BEGIN173=(CommonToken)Match(input,CURLY_BEGIN,Follow._CURLY_BEGIN_in_keyframes_block3509); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CURLY_BEGIN.Add(CURLY_BEGIN173);

			DebugLocation(562, 39);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:562:39: ( declaration ( SEMICOLON )? )*
			try { DebugEnterSubRule(71);
			while (true)
			{
				int alt71=2;
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==IDENT||LA71_0==IMPORTANT_COMMENTS||LA71_0==REPLACEMENTTOKEN||LA71_0==STAR))
				{
					alt71 = 1;
				}


				} finally { DebugExitDecision(71); }
				switch ( alt71 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:562:40: declaration ( SEMICOLON )?
					{
					DebugLocation(562, 40);
					PushFollow(Follow._declaration_in_keyframes_block3512);
					declaration174=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_declaration.Add(declaration174.Tree);
					DebugLocation(562, 52);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:562:52: ( SEMICOLON )?
					int alt70=2;
					try { DebugEnterSubRule(70);
					try { DebugEnterDecision(70, false);
					int LA70_0 = input.LA(1);

					if ((LA70_0==SEMICOLON))
					{
						alt70 = 1;
					}
					} finally { DebugExitDecision(70); }
					switch (alt70)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:562:52: SEMICOLON
						{
						DebugLocation(562, 52);
						SEMICOLON175=(CommonToken)Match(input,SEMICOLON,Follow._SEMICOLON_in_keyframes_block3514); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_SEMICOLON.Add(SEMICOLON175);


						}
						break;

					}
					} finally { DebugExitSubRule(70); }


					}
					break;

				default:
					goto loop71;
				}
			}

			loop71:
				;

			} finally { DebugExitSubRule(71); }

			DebugLocation(562, 65);
			CURLY_END176=(CommonToken)Match(input,CURLY_END,Follow._CURLY_END_in_keyframes_block3519); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CURLY_END.Add(CURLY_END176);



			{
			// AST REWRITE
			// elements: keyframes_selectors, declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 563:5: -> ^( KEYFRAMES_BLOCK ^( KEYFRAMES_SELECTORS keyframes_selectors ) ( ^( DECLARATIONS ( declaration )* ) )? )
			{
				DebugLocation(563, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:563:8: ^( KEYFRAMES_BLOCK ^( KEYFRAMES_SELECTORS keyframes_selectors ) ( ^( DECLARATIONS ( declaration )* ) )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(563, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(KEYFRAMES_BLOCK, "KEYFRAMES_BLOCK"), root_1);

				DebugLocation(563, 26);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:563:26: ^( KEYFRAMES_SELECTORS keyframes_selectors )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(563, 28);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(KEYFRAMES_SELECTORS, "KEYFRAMES_SELECTORS"), root_2);

				DebugLocation(563, 48);
				adaptor.AddChild(root_2, stream_keyframes_selectors.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(563, 69);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:563:69: ( ^( DECLARATIONS ( declaration )* ) )?
				if (stream_declaration.HasNext)
				{
					DebugLocation(563, 69);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:563:69: ^( DECLARATIONS ( declaration )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(563, 71);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(DECLARATIONS, "DECLARATIONS"), root_2);

					DebugLocation(563, 84);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:563:84: ( declaration )*
					while ( stream_declaration.HasNext )
					{
						DebugLocation(563, 84);
						adaptor.AddChild(root_2, stream_declaration.NextTree());

					}
					stream_declaration.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keyframes_block", 50);
			LeaveRule("keyframes_block", 50);
			LeaveRule_keyframes_block();
		}
		DebugLocation(564, 4);
		} finally { DebugExitRule(GrammarFileName, "keyframes_block"); }
		return retval;

	}
	// $ANTLR end "keyframes_block"

	private sealed partial class keyframes_selectors_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public keyframes_selectors_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_keyframes_selectors();
	partial void LeaveRule_keyframes_selectors();

	// $ANTLR start "keyframes_selectors"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:567:1: keyframes_selectors : keyframes_selector ( COMMA keyframes_selector )* -> ( ^( KEYFRAMES_SELECTOR keyframes_selector ) )* ;
	[GrammarRule("keyframes_selectors")]
	private CssParser.keyframes_selectors_return keyframes_selectors()
	{
		EnterRule_keyframes_selectors();
		EnterRule("keyframes_selectors", 51);
		TraceIn("keyframes_selectors", 51);
		CssParser.keyframes_selectors_return retval = new CssParser.keyframes_selectors_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken COMMA178 = default(CommonToken);
		CssParser.keyframes_selector_return keyframes_selector177 = default(CssParser.keyframes_selector_return);
		CssParser.keyframes_selector_return keyframes_selector179 = default(CssParser.keyframes_selector_return);

		object COMMA178_tree = default(object);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyframes_selector=new RewriteRuleSubtreeStream(adaptor,"rule keyframes_selector");
		try { DebugEnterRule(GrammarFileName, "keyframes_selectors");
		DebugLocation(567, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:568:5: ( keyframes_selector ( COMMA keyframes_selector )* -> ( ^( KEYFRAMES_SELECTOR keyframes_selector ) )* )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:568:7: keyframes_selector ( COMMA keyframes_selector )*
			{
			DebugLocation(568, 7);
			PushFollow(Follow._keyframes_selector_in_keyframes_selectors3561);
			keyframes_selector177=keyframes_selector();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_keyframes_selector.Add(keyframes_selector177.Tree);
			DebugLocation(568, 26);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:568:26: ( COMMA keyframes_selector )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=2;
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==COMMA))
				{
					alt72 = 1;
				}


				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:568:27: COMMA keyframes_selector
					{
					DebugLocation(568, 27);
					COMMA178=(CommonToken)Match(input,COMMA,Follow._COMMA_in_keyframes_selectors3564); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA178);

					DebugLocation(568, 33);
					PushFollow(Follow._keyframes_selector_in_keyframes_selectors3566);
					keyframes_selector179=keyframes_selector();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_keyframes_selector.Add(keyframes_selector179.Tree);

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }



			{
			// AST REWRITE
			// elements: keyframes_selector
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 569:5: -> ( ^( KEYFRAMES_SELECTOR keyframes_selector ) )*
			{
				DebugLocation(569, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:569:8: ( ^( KEYFRAMES_SELECTOR keyframes_selector ) )*
				while ( stream_keyframes_selector.HasNext )
				{
					DebugLocation(569, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:569:8: ^( KEYFRAMES_SELECTOR keyframes_selector )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(569, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(KEYFRAMES_SELECTOR, "KEYFRAMES_SELECTOR"), root_1);

					DebugLocation(569, 29);
					adaptor.AddChild(root_1, stream_keyframes_selector.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}
				stream_keyframes_selector.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keyframes_selectors", 51);
			LeaveRule("keyframes_selectors", 51);
			LeaveRule_keyframes_selectors();
		}
		DebugLocation(570, 4);
		} finally { DebugExitRule(GrammarFileName, "keyframes_selectors"); }
		return retval;

	}
	// $ANTLR end "keyframes_selectors"

	private sealed partial class keyframes_selector_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public keyframes_selector_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_keyframes_selector();
	partial void LeaveRule_keyframes_selector();

	// $ANTLR start "keyframes_selector"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:572:1: keyframes_selector : ( FROM | TO | PERCENTAGE );
	[GrammarRule("keyframes_selector")]
	private CssParser.keyframes_selector_return keyframes_selector()
	{
		EnterRule_keyframes_selector();
		EnterRule("keyframes_selector", 52);
		TraceIn("keyframes_selector", 52);
		CssParser.keyframes_selector_return retval = new CssParser.keyframes_selector_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken set180 = default(CommonToken);

		object set180_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "keyframes_selector");
		DebugLocation(572, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:573:5: ( FROM | TO | PERCENTAGE )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(573, 5);
			set180=(CommonToken)input.LT(1);
			if (input.LA(1)==FROM||input.LA(1)==PERCENTAGE||input.LA(1)==TO)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set180));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keyframes_selector", 52);
			LeaveRule("keyframes_selector", 52);
			LeaveRule_keyframes_selector();
		}
		DebugLocation(574, 4);
		} finally { DebugExitRule(GrammarFileName, "keyframes_selector"); }
		return retval;

	}
	// $ANTLR end "keyframes_selector"

	private sealed partial class document_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public document_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_document();
	partial void LeaveRule_document();

	// $ANTLR start "document"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:576:1: document : DOCUMENT_SYM ( S )* document_match_function ( S )* CURLY_BEGIN ( ruleset )* CURLY_END -> ^( DOCUMENT ^( DOCUMENT_SYMBOL DOCUMENT_SYM ) document_match_function ( ^( RULESETS ( ruleset )* ) )? ) ;
	[GrammarRule("document")]
	private CssParser.document_return document()
	{
		EnterRule_document();
		EnterRule("document", 53);
		TraceIn("document", 53);
		CssParser.document_return retval = new CssParser.document_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken DOCUMENT_SYM181 = default(CommonToken);
		CommonToken S182 = default(CommonToken);
		CommonToken S184 = default(CommonToken);
		CommonToken CURLY_BEGIN185 = default(CommonToken);
		CommonToken CURLY_END187 = default(CommonToken);
		CssParser.document_match_function_return document_match_function183 = default(CssParser.document_match_function_return);
		CssParser.ruleset_return ruleset186 = default(CssParser.ruleset_return);

		object DOCUMENT_SYM181_tree = default(object);
		object S182_tree = default(object);
		object S184_tree = default(object);
		object CURLY_BEGIN185_tree = default(object);
		object CURLY_END187_tree = default(object);
		RewriteRuleITokenStream stream_DOCUMENT_SYM=new RewriteRuleITokenStream(adaptor,"token DOCUMENT_SYM");
		RewriteRuleITokenStream stream_S=new RewriteRuleITokenStream(adaptor,"token S");
		RewriteRuleITokenStream stream_CURLY_BEGIN=new RewriteRuleITokenStream(adaptor,"token CURLY_BEGIN");
		RewriteRuleITokenStream stream_CURLY_END=new RewriteRuleITokenStream(adaptor,"token CURLY_END");
		RewriteRuleSubtreeStream stream_document_match_function=new RewriteRuleSubtreeStream(adaptor,"rule document_match_function");
		RewriteRuleSubtreeStream stream_ruleset=new RewriteRuleSubtreeStream(adaptor,"rule ruleset");
		try { DebugEnterRule(GrammarFileName, "document");
		DebugLocation(576, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:577:5: ( DOCUMENT_SYM ( S )* document_match_function ( S )* CURLY_BEGIN ( ruleset )* CURLY_END -> ^( DOCUMENT ^( DOCUMENT_SYMBOL DOCUMENT_SYM ) document_match_function ( ^( RULESETS ( ruleset )* ) )? ) )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:577:7: DOCUMENT_SYM ( S )* document_match_function ( S )* CURLY_BEGIN ( ruleset )* CURLY_END
			{
			DebugLocation(577, 7);
			DOCUMENT_SYM181=(CommonToken)Match(input,DOCUMENT_SYM,Follow._DOCUMENT_SYM_in_document3619); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DOCUMENT_SYM.Add(DOCUMENT_SYM181);

			DebugLocation(577, 20);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:577:20: ( S )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==S))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:577:20: S
					{
					DebugLocation(577, 20);
					S182=(CommonToken)Match(input,S,Follow._S_in_document3621); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_S.Add(S182);


					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }

			DebugLocation(577, 23);
			PushFollow(Follow._document_match_function_in_document3624);
			document_match_function183=document_match_function();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_document_match_function.Add(document_match_function183.Tree);
			DebugLocation(577, 47);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:577:47: ( S )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==S))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:577:47: S
					{
					DebugLocation(577, 47);
					S184=(CommonToken)Match(input,S,Follow._S_in_document3626); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_S.Add(S184);


					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }

			DebugLocation(577, 50);
			CURLY_BEGIN185=(CommonToken)Match(input,CURLY_BEGIN,Follow._CURLY_BEGIN_in_document3629); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CURLY_BEGIN.Add(CURLY_BEGIN185);

			DebugLocation(577, 62);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:577:62: ( ruleset )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==AT_NAME||(LA75_0>=CLASS_IDENT && LA75_0<=COLON)||LA75_0==HASH_IDENT||LA75_0==IDENT||LA75_0==PIPE||LA75_0==REPLACEMENTTOKEN||LA75_0==SQUARE_BEGIN||LA75_0==STAR))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:577:62: ruleset
					{
					DebugLocation(577, 62);
					PushFollow(Follow._ruleset_in_document3631);
					ruleset186=ruleset();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ruleset.Add(ruleset186.Tree);

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }

			DebugLocation(577, 71);
			CURLY_END187=(CommonToken)Match(input,CURLY_END,Follow._CURLY_END_in_document3634); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CURLY_END.Add(CURLY_END187);



			{
			// AST REWRITE
			// elements: DOCUMENT_SYM, document_match_function, ruleset
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 578:5: -> ^( DOCUMENT ^( DOCUMENT_SYMBOL DOCUMENT_SYM ) document_match_function ( ^( RULESETS ( ruleset )* ) )? )
			{
				DebugLocation(578, 8);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:578:8: ^( DOCUMENT ^( DOCUMENT_SYMBOL DOCUMENT_SYM ) document_match_function ( ^( RULESETS ( ruleset )* ) )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(578, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DOCUMENT, "DOCUMENT"), root_1);

				DebugLocation(578, 19);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:578:19: ^( DOCUMENT_SYMBOL DOCUMENT_SYM )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(578, 21);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(DOCUMENT_SYMBOL, "DOCUMENT_SYMBOL"), root_2);

				DebugLocation(578, 37);
				adaptor.AddChild(root_2, stream_DOCUMENT_SYM.NextNode());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(578, 51);
				adaptor.AddChild(root_1, stream_document_match_function.NextTree());
				DebugLocation(578, 75);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:578:75: ( ^( RULESETS ( ruleset )* ) )?
				if (stream_ruleset.HasNext)
				{
					DebugLocation(578, 75);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:578:75: ^( RULESETS ( ruleset )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(578, 77);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(RULESETS, "RULESETS"), root_2);

					DebugLocation(578, 86);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:578:86: ( ruleset )*
					while ( stream_ruleset.HasNext )
					{
						DebugLocation(578, 86);
						adaptor.AddChild(root_2, stream_ruleset.NextTree());

					}
					stream_ruleset.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ruleset.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("document", 53);
			LeaveRule("document", 53);
			LeaveRule_document();
		}
		DebugLocation(579, 4);
		} finally { DebugExitRule(GrammarFileName, "document"); }
		return retval;

	}
	// $ANTLR end "document"

	private sealed partial class document_match_function_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public document_match_function_return(CssParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CssParser grammar);
	}

	partial void EnterRule_document_match_function();
	partial void LeaveRule_document_match_function();

	// $ANTLR start "document_match_function"
	// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:582:1: document_match_function : ( URI -> ^( DOCUMENT_MATCHNAME URI ) | URLPREFIX_FUNCTION -> ^( DOCUMENT_MATCHNAME URLPREFIX_FUNCTION ) | DOMAIN_FUNCTION -> ^( DOCUMENT_MATCHNAME DOMAIN_FUNCTION ) | REGEXP_FUNCTION -> ^( DOCUMENT_MATCHNAME REGEXP_FUNCTION ) );
	[GrammarRule("document_match_function")]
	private CssParser.document_match_function_return document_match_function()
	{
		EnterRule_document_match_function();
		EnterRule("document_match_function", 54);
		TraceIn("document_match_function", 54);
		CssParser.document_match_function_return retval = new CssParser.document_match_function_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken URI188 = default(CommonToken);
		CommonToken URLPREFIX_FUNCTION189 = default(CommonToken);
		CommonToken DOMAIN_FUNCTION190 = default(CommonToken);
		CommonToken REGEXP_FUNCTION191 = default(CommonToken);

		object URI188_tree = default(object);
		object URLPREFIX_FUNCTION189_tree = default(object);
		object DOMAIN_FUNCTION190_tree = default(object);
		object REGEXP_FUNCTION191_tree = default(object);
		RewriteRuleITokenStream stream_URI=new RewriteRuleITokenStream(adaptor,"token URI");
		RewriteRuleITokenStream stream_URLPREFIX_FUNCTION=new RewriteRuleITokenStream(adaptor,"token URLPREFIX_FUNCTION");
		RewriteRuleITokenStream stream_DOMAIN_FUNCTION=new RewriteRuleITokenStream(adaptor,"token DOMAIN_FUNCTION");
		RewriteRuleITokenStream stream_REGEXP_FUNCTION=new RewriteRuleITokenStream(adaptor,"token REGEXP_FUNCTION");

		try { DebugEnterRule(GrammarFileName, "document_match_function");
		DebugLocation(582, 4);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:583:5: ( URI -> ^( DOCUMENT_MATCHNAME URI ) | URLPREFIX_FUNCTION -> ^( DOCUMENT_MATCHNAME URLPREFIX_FUNCTION ) | DOMAIN_FUNCTION -> ^( DOCUMENT_MATCHNAME DOMAIN_FUNCTION ) | REGEXP_FUNCTION -> ^( DOCUMENT_MATCHNAME REGEXP_FUNCTION ) )
			int alt76=4;
			try { DebugEnterDecision(76, false);
			switch (input.LA(1))
			{
			case URI:
				{
				alt76 = 1;
				}
				break;
			case URLPREFIX_FUNCTION:
				{
				alt76 = 2;
				}
				break;
			case DOMAIN_FUNCTION:
				{
				alt76 = 3;
				}
				break;
			case REGEXP_FUNCTION:
				{
				alt76 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:583:7: URI
				{
				DebugLocation(583, 7);
				URI188=(CommonToken)Match(input,URI,Follow._URI_in_document_match_function3678); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_URI.Add(URI188);



				{
				// AST REWRITE
				// elements: URI
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 584:5: -> ^( DOCUMENT_MATCHNAME URI )
				{
					DebugLocation(584, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:584:8: ^( DOCUMENT_MATCHNAME URI )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(584, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DOCUMENT_MATCHNAME, "DOCUMENT_MATCHNAME"), root_1);

					DebugLocation(584, 29);
					adaptor.AddChild(root_1, stream_URI.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:585:7: URLPREFIX_FUNCTION
				{
				DebugLocation(585, 7);
				URLPREFIX_FUNCTION189=(CommonToken)Match(input,URLPREFIX_FUNCTION,Follow._URLPREFIX_FUNCTION_in_document_match_function3699); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_URLPREFIX_FUNCTION.Add(URLPREFIX_FUNCTION189);



				{
				// AST REWRITE
				// elements: URLPREFIX_FUNCTION
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 586:5: -> ^( DOCUMENT_MATCHNAME URLPREFIX_FUNCTION )
				{
					DebugLocation(586, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:586:8: ^( DOCUMENT_MATCHNAME URLPREFIX_FUNCTION )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(586, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DOCUMENT_MATCHNAME, "DOCUMENT_MATCHNAME"), root_1);

					DebugLocation(586, 29);
					adaptor.AddChild(root_1, stream_URLPREFIX_FUNCTION.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:587:7: DOMAIN_FUNCTION
				{
				DebugLocation(587, 7);
				DOMAIN_FUNCTION190=(CommonToken)Match(input,DOMAIN_FUNCTION,Follow._DOMAIN_FUNCTION_in_document_match_function3720); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOMAIN_FUNCTION.Add(DOMAIN_FUNCTION190);



				{
				// AST REWRITE
				// elements: DOMAIN_FUNCTION
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 588:5: -> ^( DOCUMENT_MATCHNAME DOMAIN_FUNCTION )
				{
					DebugLocation(588, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:588:8: ^( DOCUMENT_MATCHNAME DOMAIN_FUNCTION )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(588, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DOCUMENT_MATCHNAME, "DOCUMENT_MATCHNAME"), root_1);

					DebugLocation(588, 29);
					adaptor.AddChild(root_1, stream_DOMAIN_FUNCTION.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:589:7: REGEXP_FUNCTION
				{
				DebugLocation(589, 7);
				REGEXP_FUNCTION191=(CommonToken)Match(input,REGEXP_FUNCTION,Follow._REGEXP_FUNCTION_in_document_match_function3740); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_REGEXP_FUNCTION.Add(REGEXP_FUNCTION191);



				{
				// AST REWRITE
				// elements: REGEXP_FUNCTION
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 590:5: -> ^( DOCUMENT_MATCHNAME REGEXP_FUNCTION )
				{
					DebugLocation(590, 8);
					// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:590:8: ^( DOCUMENT_MATCHNAME REGEXP_FUNCTION )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(590, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DOCUMENT_MATCHNAME, "DOCUMENT_MATCHNAME"), root_1);

					DebugLocation(590, 29);
					adaptor.AddChild(root_1, stream_REGEXP_FUNCTION.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("document_match_function", 54);
			LeaveRule("document_match_function", 54);
			LeaveRule_document_match_function();
		}
		DebugLocation(591, 4);
		} finally { DebugExitRule(GrammarFileName, "document_match_function"); }
		return retval;

	}
	// $ANTLR end "document_match_function"

	partial void EnterRule_synpred1_CssParser_fragment();
	partial void LeaveRule_synpred1_CssParser_fragment();

	// $ANTLR start synpred1_CssParser
	public void synpred1_CssParser_fragment()
	{
		EnterRule_synpred1_CssParser_fragment();
		EnterRule("synpred1_CssParser_fragment", 55);
		TraceIn("synpred1_CssParser_fragment", 55);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:307:14: ( WS )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:307:15: WS
			{
			DebugLocation(307, 15);
			Match(input,WS,Follow._WS_in_synpred1_CssParser1723); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_CssParser_fragment", 55);
			LeaveRule("synpred1_CssParser_fragment", 55);
			LeaveRule_synpred1_CssParser_fragment();
		}
	}
	// $ANTLR end synpred1_CssParser

	partial void EnterRule_synpred2_CssParser_fragment();
	partial void LeaveRule_synpred2_CssParser_fragment();

	// $ANTLR start synpred2_CssParser
	public void synpred2_CssParser_fragment()
	{
		EnterRule_synpred2_CssParser_fragment();
		EnterRule("synpred2_CssParser_fragment", 56);
		TraceIn("synpred2_CssParser_fragment", 56);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:9: ( universal )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:10: universal
			{
			DebugLocation(323, 10);
			PushFollow(Follow._universal_in_synpred2_CssParser1778);
			universal();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_CssParser_fragment", 56);
			LeaveRule("synpred2_CssParser_fragment", 56);
			LeaveRule_synpred2_CssParser_fragment();
		}
	}
	// $ANTLR end synpred2_CssParser

	partial void EnterRule_synpred3_CssParser_fragment();
	partial void LeaveRule_synpred3_CssParser_fragment();

	// $ANTLR start synpred3_CssParser
	public void synpred3_CssParser_fragment()
	{
		EnterRule_synpred3_CssParser_fragment();
		EnterRule("synpred3_CssParser_fragment", 57);
		TraceIn("synpred3_CssParser_fragment", 57);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:36: ( type_selector )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:37: type_selector
			{
			DebugLocation(323, 37);
			PushFollow(Follow._type_selector_in_synpred3_CssParser1788);
			type_selector();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_CssParser_fragment", 57);
			LeaveRule("synpred3_CssParser_fragment", 57);
			LeaveRule_synpred3_CssParser_fragment();
		}
	}
	// $ANTLR end synpred3_CssParser

	partial void EnterRule_synpred4_CssParser_fragment();
	partial void LeaveRule_synpred4_CssParser_fragment();

	// $ANTLR start synpred4_CssParser
	public void synpred4_CssParser_fragment()
	{
		EnterRule_synpred4_CssParser_fragment();
		EnterRule("synpred4_CssParser_fragment", 58);
		TraceIn("synpred4_CssParser_fragment", 58);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:83: ( hashclassatnameattribpseudonegation )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:323:84: hashclassatnameattribpseudonegation
			{
			DebugLocation(323, 84);
			PushFollow(Follow._hashclassatnameattribpseudonegation_in_synpred4_CssParser1801);
			hashclassatnameattribpseudonegation();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_CssParser_fragment", 58);
			LeaveRule("synpred4_CssParser_fragment", 58);
			LeaveRule_synpred4_CssParser_fragment();
		}
	}
	// $ANTLR end synpred4_CssParser

	partial void EnterRule_synpred5_CssParser_fragment();
	partial void LeaveRule_synpred5_CssParser_fragment();

	// $ANTLR start synpred5_CssParser
	public void synpred5_CssParser_fragment()
	{
		EnterRule_synpred5_CssParser_fragment();
		EnterRule("synpred5_CssParser_fragment", 59);
		TraceIn("synpred5_CssParser_fragment", 59);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:325:7: ( hashclassatnameattribpseudonegation )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:325:8: hashclassatnameattribpseudonegation
			{
			DebugLocation(325, 8);
			PushFollow(Follow._hashclassatnameattribpseudonegation_in_synpred5_CssParser1843);
			hashclassatnameattribpseudonegation();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_CssParser_fragment", 59);
			LeaveRule("synpred5_CssParser_fragment", 59);
			LeaveRule_synpred5_CssParser_fragment();
		}
	}
	// $ANTLR end synpred5_CssParser

	partial void EnterRule_synpred6_CssParser_fragment();
	partial void LeaveRule_synpred6_CssParser_fragment();

	// $ANTLR start synpred6_CssParser
	public void synpred6_CssParser_fragment()
	{
		EnterRule_synpred6_CssParser_fragment();
		EnterRule("synpred6_CssParser_fragment", 60);
		TraceIn("synpred6_CssParser_fragment", 60);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:356:8: ( selector_namespace_prefix )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:356:9: selector_namespace_prefix
			{
			DebugLocation(356, 9);
			PushFollow(Follow._selector_namespace_prefix_in_synpred6_CssParser2042);
			selector_namespace_prefix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_CssParser_fragment", 60);
			LeaveRule("synpred6_CssParser_fragment", 60);
			LeaveRule_synpred6_CssParser_fragment();
		}
	}
	// $ANTLR end synpred6_CssParser

	partial void EnterRule_synpred7_CssParser_fragment();
	partial void LeaveRule_synpred7_CssParser_fragment();

	// $ANTLR start synpred7_CssParser
	public void synpred7_CssParser_fragment()
	{
		EnterRule_synpred7_CssParser_fragment();
		EnterRule("synpred7_CssParser_fragment", 61);
		TraceIn("synpred7_CssParser_fragment", 61);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:383:6: ( selector_namespace_prefix )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:383:7: selector_namespace_prefix
			{
			DebugLocation(383, 7);
			PushFollow(Follow._selector_namespace_prefix_in_synpred7_CssParser2169);
			selector_namespace_prefix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred7_CssParser_fragment", 61);
			LeaveRule("synpred7_CssParser_fragment", 61);
			LeaveRule_synpred7_CssParser_fragment();
		}
	}
	// $ANTLR end synpred7_CssParser

	partial void EnterRule_synpred8_CssParser_fragment();
	partial void LeaveRule_synpred8_CssParser_fragment();

	// $ANTLR start synpred8_CssParser
	public void synpred8_CssParser_fragment()
	{
		EnterRule_synpred8_CssParser_fragment();
		EnterRule("synpred8_CssParser_fragment", 62);
		TraceIn("synpred8_CssParser_fragment", 62);
		try
		{
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:461:6: ( universal )
			DebugEnterAlt(1);
			// ..\\..\\..\\..\\WebGrease\\WebGrease\\Css\\CssParser.g3:461:7: universal
			{
			DebugLocation(461, 7);
			PushFollow(Follow._universal_in_synpred8_CssParser2635);
			universal();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_CssParser_fragment", 62);
			LeaveRule("synpred8_CssParser_fragment", 62);
			LeaveRule_synpred8_CssParser_fragment();
		}
	}
	// $ANTLR end synpred8_CssParser
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA25 dfa25;
	private DFA33 dfa33;
	private DFA48 dfa48;
	private DFA54 dfa54;
	private DFA65 dfa65;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa25 = new DFA25( this );
		dfa33 = new DFA33( this, SpecialStateTransition33 );
		dfa48 = new DFA48( this, SpecialStateTransition48 );
		dfa54 = new DFA54( this );
		dfa65 = new DFA65( this );
	}

	private class DFA25 : DFA
	{
		private const string DFA25_eotS =
			"\x4\xFFFF";
		private const string DFA25_eofS =
			"\x4\xFFFF";
		private const string DFA25_minS =
			"\x2\x1A\x2\xFFFF";
		private const string DFA25_maxS =
			"\x2\x7A\x2\xFFFF";
		private const string DFA25_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA25_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA25_transitionS =
			{
				"\x1\x2\x19\xFFFF\x1\x3\x3\xFFFF\x1\x1\x31\xFFFF\x1\x3\xF\xFFFF\x1\x3",
				"\x1\x2\x19\xFFFF\x1\x3\x3\xFFFF\x1\x1\x31\xFFFF\x1\x3\xF\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA25_eot = DFA.UnpackEncodedString(DFA25_eotS);
		private static readonly short[] DFA25_eof = DFA.UnpackEncodedString(DFA25_eofS);
		private static readonly char[] DFA25_min = DFA.UnpackEncodedStringToUnsignedChars(DFA25_minS);
		private static readonly char[] DFA25_max = DFA.UnpackEncodedStringToUnsignedChars(DFA25_maxS);
		private static readonly short[] DFA25_accept = DFA.UnpackEncodedString(DFA25_acceptS);
		private static readonly short[] DFA25_special = DFA.UnpackEncodedString(DFA25_specialS);
		private static readonly short[][] DFA25_transition;

		static DFA25()
		{
			int numStates = DFA25_transitionS.Length;
			DFA25_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA25_transition[i] = DFA.UnpackEncodedString(DFA25_transitionS[i]);
			}
		}

		public DFA25( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 25;
			this.eot = DFA25_eot;
			this.eof = DFA25_eof;
			this.min = DFA25_min;
			this.max = DFA25_max;
			this.accept = DFA25_accept;
			this.special = DFA25_special;
			this.transition = DFA25_transition;
		}

		public override string Description { get { return "()* loopback of 266:5: ( declaration ( SEMICOLON )? )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA33 : DFA
	{
		private const string DFA33_eotS =
			"\x44\xFFFF";
		private const string DFA33_eofS =
			"\x44\xFFFF";
		private const string DFA33_minS =
			"\x1\xC\x4\x0\x1\x34\x1\x13\x2\xFFFF\x1\x1B\x1\x60\x1\x34\x1\xF\x1\x29"+
			"\x1\x0\x3\xF\x6\x34\x1\x0\x1\x1B\x1\x12\x3\x1E\x2\x79\x2\x10\x1\x34\x2"+
			"\x10\x1\x34\x1\x13\x1\x10\x1\x0\x2\x10\x1\x1B\x1\x60\x1\x34\x1\x29\x4"+
			"\xF\x1\x0\x6\x34\x1\x10\x1\x1B\x4\x1E\x2\x79\x2\x10";
		private const string DFA33_maxS =
			"\x1\x91\x4\x0\x1\x7A\x1\x86\x2\xFFFF\x1\x80\x1\x60\x1\x34\x1\xF\x1\x86"+
			"\x1\x0\x3\xF\x6\x7C\x1\x0\x1\x80\x1\x7A\x3\x7C\x2\x79\x2\x60\x1\x7A\x2"+
			"\x10\x1\x7A\x1\x86\x1\x7C\x1\x0\x2\x10\x1\x80\x1\x60\x1\x34\x1\x86\x1"+
			"\x10\x3\xF\x1\x0\x6\x7C\x1\x10\x1\x80\x4\x7C\x2\x79\x1\x7C\x1\x10";
		private const string DFA33_acceptS =
			"\x7\xFFFF\x1\x2\x1\x1\x3B\xFFFF";
		private const string DFA33_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x9\xFFFF\x1\x4\x9\xFFFF\x1\x5\xF\xFFFF"+
			"\x1\x6\xA\xFFFF\x1\x7\x10\xFFFF}>";
		private static readonly string[] DFA33_transitionS =
			{
				"\x1\x4\x5\xFFFF\x1\x3\x1\x6\x4\xFFFF\x2\x7\x14\xFFFF\x1\x7\x3\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x7\x2B\xFFFF\x2\x7\x8\xFFFF\x1\x1\xD\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x7\x9\xFFFF\x1\x7\xC\xFFFF\x1\x7",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x9\x2B\xFFFF\x1\xB\x19\xFFFF\x1\xA",
				"\x1\xD\x15\xFFFF\x1\xF\xA\xFFFF\x1\xE\x1A\xFFFF\x1\x11\x6\xFFFF\x1\xC"+
				"\x2F\xFFFF\x1\x10",
				"",
				"",
				"\x1\x17\x9\xFFFF\x1\x15\x16\xFFFF\x1\x16\x23\xFFFF\x1\xB\x1\xFFFF\x1"+
				"\x12\x16\xFFFF\x1\x18\x5\xFFFF\x1\x14\x1\x13",
				"\x1\xB",
				"\x1\x19",
				"\x1\x1A",
				"\x1\xF\xA\xFFFF\x1\xE\x1A\xFFFF\x1\x11\x36\xFFFF\x1\x10",
				"\x1\xFFFF",
				"\x1\x1B",
				"\x1\x1C",
				"\x1\x1D",
				"\x1\x1E\x47\xFFFF\x1\x1F",
				"\x1\x1E\x47\xFFFF\x1\x1F",
				"\x1\x1E\x47\xFFFF\x1\x1F",
				"\x1\x1E\x47\xFFFF\x1\x1F",
				"\x1\x1E\x47\xFFFF\x1\x1F",
				"\x1\x1E\x47\xFFFF\x1\x1F",
				"\x1\xFFFF",
				"\x1\x17\x9\xFFFF\x1\x15\x16\xFFFF\x1\x16\x25\xFFFF\x1\x12\x16\xFFFF"+
				"\x1\x18\x5\xFFFF\x1\x14\x1\x13",
				"\x1\x24\x1\x26\x1E\xFFFF\x1\x23\x1\xFFFF\x1\x20\x2B\xFFFF\x1\x22\x17"+
				"\xFFFF\x1\x25\x1\xFFFF\x1\x21",
				"\x1\x27\x15\xFFFF\x1\x27\x18\xFFFF\x1\x27\xA\xFFFF\x1\x27\x8\xFFFF\x1"+
				"\x27\x7\xFFFF\x1\x27\x12\xFFFF\x1\x27",
				"\x1\x27\x15\xFFFF\x1\x27\x18\xFFFF\x1\x27\xA\xFFFF\x1\x27\x8\xFFFF\x1"+
				"\x27\x7\xFFFF\x1\x27\x12\xFFFF\x1\x27",
				"\x1\x27\x15\xFFFF\x1\x27\x18\xFFFF\x1\x27\xA\xFFFF\x1\x27\x8\xFFFF\x1"+
				"\x27\x7\xFFFF\x1\x27\x12\xFFFF\x1\x27",
				"\x1\x18",
				"\x1\x18",
				"\x1\x28\x4F\xFFFF\x1\x22",
				"\x1\x28\x4F\xFFFF\x1\x22",
				"\x1\x2A\x45\xFFFF\x1\x29",
				"\x1\x28",
				"\x1\x28",
				"\x1\x2B\x2B\xFFFF\x1\x2D\x19\xFFFF\x1\x2C",
				"\x1\x2E\x15\xFFFF\x1\x30\xA\xFFFF\x1\x2F\x1A\xFFFF\x1\x32\x36\xFFFF"+
				"\x1\x31",
				"\x1\x33\xD\xFFFF\x1\x27\x15\xFFFF\x1\x27\x18\xFFFF\x1\x27\xA\xFFFF\x1"+
				"\x27\x8\xFFFF\x1\x27\x7\xFFFF\x1\x27\x12\xFFFF\x1\x27",
				"\x1\xFFFF",
				"\x1\x28",
				"\x1\x28",
				"\x1\x39\x9\xFFFF\x1\x37\x16\xFFFF\x1\x38\x23\xFFFF\x1\x2D\x1\xFFFF\x1"+
				"\x34\x16\xFFFF\x1\x3A\x5\xFFFF\x1\x36\x1\x35",
				"\x1\x2D",
				"\x1\x3B",
				"\x1\x30\xA\xFFFF\x1\x2F\x1A\xFFFF\x1\x32\x36\xFFFF\x1\x31",
				"\x1\x3C\x1\x28",
				"\x1\x3D",
				"\x1\x3E",
				"\x1\x3F",
				"\x1\xFFFF",
				"\x1\x40\x47\xFFFF\x1\x41",
				"\x1\x40\x47\xFFFF\x1\x41",
				"\x1\x40\x47\xFFFF\x1\x41",
				"\x1\x40\x47\xFFFF\x1\x41",
				"\x1\x40\x47\xFFFF\x1\x41",
				"\x1\x40\x47\xFFFF\x1\x41",
				"\x1\x28",
				"\x1\x39\x9\xFFFF\x1\x37\x16\xFFFF\x1\x38\x25\xFFFF\x1\x34\x16\xFFFF"+
				"\x1\x3A\x5\xFFFF\x1\x36\x1\x35",
				"\x1\x42\x15\xFFFF\x1\x42\x18\xFFFF\x1\x42\xA\xFFFF\x1\x42\x8\xFFFF\x1"+
				"\x42\x7\xFFFF\x1\x42\x12\xFFFF\x1\x42",
				"\x1\x42\x15\xFFFF\x1\x42\x18\xFFFF\x1\x42\xA\xFFFF\x1\x42\x8\xFFFF\x1"+
				"\x42\x7\xFFFF\x1\x42\x12\xFFFF\x1\x42",
				"\x1\x42\x15\xFFFF\x1\x42\x18\xFFFF\x1\x42\xA\xFFFF\x1\x42\x8\xFFFF\x1"+
				"\x42\x7\xFFFF\x1\x42\x12\xFFFF\x1\x42",
				"\x1\x42\x15\xFFFF\x1\x42\x18\xFFFF\x1\x42\xA\xFFFF\x1\x42\x8\xFFFF\x1"+
				"\x42\x7\xFFFF\x1\x42\x12\xFFFF\x1\x42",
				"\x1\x3A",
				"\x1\x3A",
				"\x1\x43\xD\xFFFF\x1\x42\x15\xFFFF\x1\x42\x18\xFFFF\x1\x42\xA\xFFFF\x1"+
				"\x42\x8\xFFFF\x1\x42\x7\xFFFF\x1\x42\x12\xFFFF\x1\x42",
				"\x1\x28"
			};

		private static readonly short[] DFA33_eot = DFA.UnpackEncodedString(DFA33_eotS);
		private static readonly short[] DFA33_eof = DFA.UnpackEncodedString(DFA33_eofS);
		private static readonly char[] DFA33_min = DFA.UnpackEncodedStringToUnsignedChars(DFA33_minS);
		private static readonly char[] DFA33_max = DFA.UnpackEncodedStringToUnsignedChars(DFA33_maxS);
		private static readonly short[] DFA33_accept = DFA.UnpackEncodedString(DFA33_acceptS);
		private static readonly short[] DFA33_special = DFA.UnpackEncodedString(DFA33_specialS);
		private static readonly short[][] DFA33_transition;

		static DFA33()
		{
			int numStates = DFA33_transitionS.Length;
			DFA33_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA33_transition[i] = DFA.UnpackEncodedString(DFA33_transitionS[i]);
			}
		}

		public DFA33( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 33;
			this.eot = DFA33_eot;
			this.eof = DFA33_eof;
			this.min = DFA33_min;
			this.max = DFA33_max;
			this.accept = DFA33_accept;
			this.special = DFA33_special;
			this.transition = DFA33_transition;
		}

		public override string Description { get { return "323:82: ( ( hashclassatnameattribpseudonegation )=> hashclassatnameattribpseudonegation )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition33(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA33_1 = input.LA(1);


				int index33_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CssParser_fragment))) {s = 8;}

				else if ((true)) {s = 7;}


				input.Seek(index33_1);
				if (s >= 0) return s;
				break;
			case 1:
				int LA33_2 = input.LA(1);


				int index33_2 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CssParser_fragment))) {s = 8;}

				else if ((true)) {s = 7;}


				input.Seek(index33_2);
				if (s >= 0) return s;
				break;
			case 2:
				int LA33_3 = input.LA(1);


				int index33_3 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CssParser_fragment))) {s = 8;}

				else if ((true)) {s = 7;}


				input.Seek(index33_3);
				if (s >= 0) return s;
				break;
			case 3:
				int LA33_4 = input.LA(1);


				int index33_4 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CssParser_fragment))) {s = 8;}

				else if ((true)) {s = 7;}


				input.Seek(index33_4);
				if (s >= 0) return s;
				break;
			case 4:
				int LA33_14 = input.LA(1);


				int index33_14 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CssParser_fragment))) {s = 8;}

				else if ((true)) {s = 7;}


				input.Seek(index33_14);
				if (s >= 0) return s;
				break;
			case 5:
				int LA33_24 = input.LA(1);


				int index33_24 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CssParser_fragment))) {s = 8;}

				else if ((true)) {s = 7;}


				input.Seek(index33_24);
				if (s >= 0) return s;
				break;
			case 6:
				int LA33_40 = input.LA(1);


				int index33_40 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CssParser_fragment))) {s = 8;}

				else if ((true)) {s = 7;}


				input.Seek(index33_40);
				if (s >= 0) return s;
				break;
			case 7:
				int LA33_51 = input.LA(1);


				int index33_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CssParser_fragment))) {s = 8;}

				else if ((true)) {s = 7;}


				input.Seek(index33_51);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 33, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA48 : DFA
	{
		private const string DFA48_eotS =
			"\xB\xFFFF";
		private const string DFA48_eofS =
			"\xB\xFFFF";
		private const string DFA48_minS =
			"\x1\x12\x1\x10\x1\x0\x1\x34\x6\xFFFF\x1\x0";
		private const string DFA48_maxS =
			"\x1\x7A\x1\x60\x1\x0\x1\x7A\x6\xFFFF\x1\x0";
		private const string DFA48_acceptS =
			"\x4\xFFFF\x1\x3\x1\x4\x1\x5\x1\x6\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA48_specialS =
			"\x2\xFFFF\x1\x0\x7\xFFFF\x1\x1}>";
		private static readonly string[] DFA48_transitionS =
			{
				"\x1\x5\x1\x7\x1E\xFFFF\x1\x4\x1\xFFFF\x1\x1\x2B\xFFFF\x1\x3\x17\xFFFF"+
				"\x1\x6\x1\xFFFF\x1\x2",
				"\x1\x8\x4F\xFFFF\x1\x3",
				"\x1\xFFFF",
				"\x1\x8\x45\xFFFF\x1\xA",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA48_eot = DFA.UnpackEncodedString(DFA48_eotS);
		private static readonly short[] DFA48_eof = DFA.UnpackEncodedString(DFA48_eofS);
		private static readonly char[] DFA48_min = DFA.UnpackEncodedStringToUnsignedChars(DFA48_minS);
		private static readonly char[] DFA48_max = DFA.UnpackEncodedStringToUnsignedChars(DFA48_maxS);
		private static readonly short[] DFA48_accept = DFA.UnpackEncodedString(DFA48_acceptS);
		private static readonly short[] DFA48_special = DFA.UnpackEncodedString(DFA48_specialS);
		private static readonly short[][] DFA48_transition;

		static DFA48()
		{
			int numStates = DFA48_transitionS.Length;
			DFA48_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA48_transition[i] = DFA.UnpackEncodedString(DFA48_transitionS[i]);
			}
		}

		public DFA48( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 48;
			this.eot = DFA48_eot;
			this.eof = DFA48_eof;
			this.min = DFA48_min;
			this.max = DFA48_max;
			this.accept = DFA48_accept;
			this.special = DFA48_special;
			this.transition = DFA48_transition;
		}

		public override string Description { get { return "460:1: negation_arg : ( ( ( universal )=> universal ) | type_selector | hash | class | attrib | pseudo );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition48(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA48_2 = input.LA(1);


				int index48_2 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred8_CssParser_fragment))) {s = 9;}

				else if ((true)) {s = 8;}


				input.Seek(index48_2);
				if (s >= 0) return s;
				break;
			case 1:
				int LA48_10 = input.LA(1);


				int index48_10 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred8_CssParser_fragment))) {s = 9;}

				else if ((true)) {s = 8;}


				input.Seek(index48_10);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 48, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA54 : DFA
	{
		private const string DFA54_eotS =
			"\x8\xFFFF";
		private const string DFA54_eofS =
			"\x8\xFFFF";
		private const string DFA54_minS =
			"\x1\x5\x1\xFFFF\x3\x5\x1\xFFFF\x2\x5";
		private const string DFA54_maxS =
			"\x1\x8A\x1\xFFFF\x3\x8A\x1\xFFFF\x2\x8A";
		private const string DFA54_acceptS =
			"\x1\xFFFF\x1\x2\x3\xFFFF\x1\x1\x2\xFFFF";
		private const string DFA54_specialS =
			"\x8\xFFFF}>";
		private static readonly string[] DFA54_transitionS =
			{
				"\x1\x5\xA\xFFFF\x1\x1\x7\xFFFF\x1\x5\x1\xFFFF\x1\x1\xA\xFFFF\x1\x5\x1"+
				"\xFFFF\x3\x5\x8\xFFFF\x1\x5\x1\xFFFF\x1\x3\x3\xFFFF\x2\x1\xA\xFFFF\x1"+
				"\x5\x8\xFFFF\x3\x5\x8\xFFFF\x1\x5\x6\xFFFF\x1\x5\x1\xFFFF\x1\x5\x6\xFFFF"+
				"\x1\x5\x1\xFFFF\x1\x4\x2\xFFFF\x1\x5\x7\xFFFF\x1\x1\x1\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x5\x8\xFFFF\x2\x5\x3\xFFFF\x1\x5",
				"",
				"\x1\x5\x22\xFFFF\x2\x5\x8\xFFFF\x1\x5\x1\xFFFF\x1\x3\xF\xFFFF\x1\x5"+
				"\x8\xFFFF\x3\x5\x8\xFFFF\x1\x5\x6\xFFFF\x1\x5\x1\xFFFF\x1\x5\x6\xFFFF"+
				"\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x9\xFFFF\x1\x5\x4\xFFFF\x1\x5\x8"+
				"\xFFFF\x2\x5\x3\xFFFF\x1\x5",
				"\x1\x5\x9\xFFFF\x2\x5\x2\xFFFF\x1\x1\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\xA"+
				"\xFFFF\x1\x5\x1\xFFFF\x3\x5\x8\xFFFF\x1\x5\x1\xFFFF\x1\x5\x3\xFFFF\x1"+
				"\x6\x1\x5\xA\xFFFF\x1\x5\x8\xFFFF\x3\x5\x8\xFFFF\x1\x5\x6\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x5\x6\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x7\xFFFF"+
				"\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x8\xFFFF\x2\x5\x3"+
				"\xFFFF\x1\x5",
				"\x1\x5\xA\xFFFF\x1\x5\x2\xFFFF\x1\x1\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\xA"+
				"\xFFFF\x1\x5\x1\xFFFF\x3\x5\x8\xFFFF\x1\x5\x1\xFFFF\x1\x5\x3\xFFFF\x2"+
				"\x5\xA\xFFFF\x1\x5\x8\xFFFF\x3\x5\x8\xFFFF\x1\x5\x6\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x5\x6\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x7\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x8\xFFFF\x2\x5\x3\xFFFF\x1"+
				"\x5",
				"",
				"\x1\x5\xA\xFFFF\x1\x5\x2\xFFFF\x1\x1\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\xA"+
				"\xFFFF\x1\x5\x1\xFFFF\x3\x5\x8\xFFFF\x1\x5\x1\xFFFF\x1\x5\x3\xFFFF\x1"+
				"\x7\x1\x5\xA\xFFFF\x1\x5\x8\xFFFF\x3\x5\x8\xFFFF\x1\x5\x6\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x5\x6\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x7\xFFFF"+
				"\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x8\xFFFF\x2\x5\x3"+
				"\xFFFF\x1\x5",
				"\x1\x5\xA\xFFFF\x1\x5\x2\xFFFF\x1\x1\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\xA"+
				"\xFFFF\x1\x5\x1\xFFFF\x3\x5\x8\xFFFF\x1\x5\x1\xFFFF\x1\x5\x3\xFFFF\x1"+
				"\x7\x1\x5\xA\xFFFF\x1\x5\x8\xFFFF\x3\x5\x8\xFFFF\x1\x5\x6\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x5\x6\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x7\xFFFF"+
				"\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x8\xFFFF\x2\x5\x3"+
				"\xFFFF\x1\x5"
			};

		private static readonly short[] DFA54_eot = DFA.UnpackEncodedString(DFA54_eotS);
		private static readonly short[] DFA54_eof = DFA.UnpackEncodedString(DFA54_eofS);
		private static readonly char[] DFA54_min = DFA.UnpackEncodedStringToUnsignedChars(DFA54_minS);
		private static readonly char[] DFA54_max = DFA.UnpackEncodedStringToUnsignedChars(DFA54_maxS);
		private static readonly short[] DFA54_accept = DFA.UnpackEncodedString(DFA54_acceptS);
		private static readonly short[] DFA54_special = DFA.UnpackEncodedString(DFA54_specialS);
		private static readonly short[][] DFA54_transition;

		static DFA54()
		{
			int numStates = DFA54_transitionS.Length;
			DFA54_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA54_transition[i] = DFA.UnpackEncodedString(DFA54_transitionS[i]);
			}
		}

		public DFA54( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 54;
			this.eot = DFA54_eot;
			this.eof = DFA54_eof;
			this.min = DFA54_min;
			this.max = DFA54_max;
			this.accept = DFA54_accept;
			this.special = DFA54_special;
			this.transition = DFA54_transition;
		}

		public override string Description { get { return "()* loopback of 500:29: ( termwithoperator )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA65 : DFA
	{
		private const string DFA65_eotS =
			"\xA\xFFFF";
		private const string DFA65_eofS =
			"\xA\xFFFF";
		private const string DFA65_minS =
			"\x1\x5\x3\xFFFF\x1\x5\x5\xFFFF";
		private const string DFA65_maxS =
			"\x1\x8A\x3\xFFFF\x1\x8A\x5\xFFFF";
		private const string DFA65_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\xFFFF\x1\x5\x1\x6\x1\x7\x1\x8\x1\x4";
		private const string DFA65_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA65_transitionS =
			{
				"\x1\x1\x22\xFFFF\x1\x1\x1\x8\x8\xFFFF\x1\x6\x1\xFFFF\x1\x4\xF\xFFFF"+
				"\x1\x1\x8\xFFFF\x1\x1\x1\x3\x1\x8\x8\xFFFF\x1\x1\x6\xFFFF\x1\x1\x1\xFFFF"+
				"\x1\x1\x6\xFFFF\x1\x1\x1\xFFFF\x1\x7\x2\xFFFF\x1\x1\x9\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x5\x8\xFFFF\x1\x1\x1\x8\x3\xFFFF\x1\x2",
				"",
				"",
				"",
				"\x1\x9\x9\xFFFF\x1\x8\x1\x9\x7\xFFFF\x1\x9\x1\xFFFF\x1\x9\xA\xFFFF\x1"+
				"\x9\x1\xFFFF\x3\x9\x8\xFFFF\x1\x9\x1\xFFFF\x1\x9\x3\xFFFF\x2\x9\xA\xFFFF"+
				"\x1\x9\x8\xFFFF\x3\x9\x8\xFFFF\x1\x9\x6\xFFFF\x1\x9\x1\xFFFF\x1\x9\x6"+
				"\xFFFF\x1\x9\x1\xFFFF\x1\x9\x2\xFFFF\x1\x9\x7\xFFFF\x1\x9\x1\xFFFF\x1"+
				"\x9\x2\xFFFF\x1\x9\x1\xFFFF\x1\x9\x8\xFFFF\x2\x9\x3\xFFFF\x1\x9",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA65_eot = DFA.UnpackEncodedString(DFA65_eotS);
		private static readonly short[] DFA65_eof = DFA.UnpackEncodedString(DFA65_eofS);
		private static readonly char[] DFA65_min = DFA.UnpackEncodedStringToUnsignedChars(DFA65_minS);
		private static readonly char[] DFA65_max = DFA.UnpackEncodedStringToUnsignedChars(DFA65_maxS);
		private static readonly short[] DFA65_accept = DFA.UnpackEncodedString(DFA65_acceptS);
		private static readonly short[] DFA65_special = DFA.UnpackEncodedString(DFA65_specialS);
		private static readonly short[][] DFA65_transition;

		static DFA65()
		{
			int numStates = DFA65_transitionS.Length;
			DFA65_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA65_transition[i] = DFA.UnpackEncodedString(DFA65_transitionS[i]);
			}
		}

		public DFA65( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 65;
			this.eot = DFA65_eot;
			this.eof = DFA65_eof;
			this.min = DFA65_min;
			this.max = DFA65_max;
			this.accept = DFA65_accept;
			this.special = DFA65_special;
			this.transition = DFA65_transition;
		}

		public override string Description { get { return "509:1: term : ( ( ( unary_operator )? (t= NUMBER |t= PERCENTAGE |t= LENGTH |t= RELATIVELENGTH |t= ANGLE |t= TIME |t= FREQ |t= RESOLUTION |t= SPEECH ) ) ( IMPORTANT_COMMENTS )* -> ^( TERM ( unary_operator )? ^( NUMBERBASEDVALUE $t) ( IMPORTANT_COMMENTS )* ) | URI ( IMPORTANT_COMMENTS )* -> ^( TERM ^( URIBASEDVALUE URI ) ( IMPORTANT_COMMENTS )* ) | (exp= ( MSIE_EXPRESSION ) ) ( IMPORTANT_COMMENTS )* -> ^( TERM ^( STRINGBASEDVALUE $exp) ( IMPORTANT_COMMENTS )* ) | IDENT ( IMPORTANT_COMMENTS )* -> ^( TERM ^( IDENTBASEDVALUE IDENT ) ( IMPORTANT_COMMENTS )* ) | STRING ( IMPORTANT_COMMENTS )* -> ^( TERM ^( STRINGBASEDVALUE STRING ) ( IMPORTANT_COMMENTS )* ) | hash ( IMPORTANT_COMMENTS )* -> ^( TERM ^( HEXBASEDVALUE hash ) ( IMPORTANT_COMMENTS )* ) | REPLACEMENTTOKEN -> ^( TERM ^( REPLACEMENTTOKENBASEDVALUE REPLACEMENTTOKEN ) ) | function ( IMPORTANT_COMMENTS )* -> ^( TERM function ( IMPORTANT_COMMENTS )* ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _styleSheet_in_main653 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_main659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARSET_SYM_in_styleSheet683 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _STRING_in_styleSheet685 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _SEMICOLON_in_styleSheet687 = new BitSet(new ulong[]{0x9140002000C1002UL,0x500040140080804UL,0x8000UL});
		public static readonly BitSet _styleimport_in_styleSheet691 = new BitSet(new ulong[]{0x9140002000C1002UL,0x500040140080804UL,0x8000UL});
		public static readonly BitSet _namespace_in_styleSheet694 = new BitSet(new ulong[]{0x1140002000C1002UL,0x500040140080804UL,0x8000UL});
		public static readonly BitSet _styleSheetRulesOrComment_in_styleSheet697 = new BitSet(new ulong[]{0x1140002000C1002UL,0x500040140000804UL,0x8000UL});
		public static readonly BitSet _IMPORTANT_COMMENTS_in_styleSheetRulesOrComment756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _styleSheetrules_in_styleSheetRulesOrComment764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_SYM_in_styleimport784 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL,0x400UL});
		public static readonly BitSet _stringoruri_in_styleimport786 = new BitSet(new ulong[]{0x10000000008000UL,0x20000004400000UL});
		public static readonly BitSet _media_query_list_in_styleimport788 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _SEMICOLON_in_styleimport791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAMESPACE_SYM_in_namespace826 = new BitSet(new ulong[]{0x10000000000000UL,0x1000000000000000UL,0x400UL});
		public static readonly BitSet _namespace_prefix_in_namespace828 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL,0x400UL});
		public static readonly BitSet _stringoruri_in_namespace831 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _SEMICOLON_in_namespace833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_namespace_prefix865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WG_DPI_SYM_in_wg_dpi894 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _NUMBER_in_wg_dpi896 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _SEMICOLON_in_wg_dpi898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MEDIA_SYM_in_media930 = new BitSet(new ulong[]{0x10000002008000UL,0x4400000UL});
		public static readonly BitSet _media_query_list_in_media932 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CURLY_BEGIN_in_media935 = new BitSet(new ulong[]{0x140000040C1000UL,0x500040140000000UL});
		public static readonly BitSet _ruleset_in_media939 = new BitSet(new ulong[]{0x140000040C1000UL,0x500040140000000UL});
		public static readonly BitSet _page_in_media943 = new BitSet(new ulong[]{0x140000040C1000UL,0x500040140000000UL});
		public static readonly BitSet _CURLY_END_in_media948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _media_query_in_media_query_list997 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _COMMA_in_media_query_list1000 = new BitSet(new ulong[]{0x10000000008000UL,0x4400000UL});
		public static readonly BitSet _media_query_in_media_query_list1002 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _ONLY_in_media_query1036 = new BitSet(new ulong[]{0x10000000000000UL,0x4400000UL});
		public static readonly BitSet _NOT_in_media_query1040 = new BitSet(new ulong[]{0x10000000000000UL,0x4400000UL});
		public static readonly BitSet _media_type_in_media_query1044 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_media_query1047 = new BitSet(new ulong[]{0x10000000008000UL,0x4400000UL});
		public static readonly BitSet _media_expression_in_media_query1049 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _media_expression_in_media_query1087 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_media_query1090 = new BitSet(new ulong[]{0x10000000008000UL,0x4400000UL});
		public static readonly BitSet _media_expression_in_media_query1092 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _IDENT_in_media_type1122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CIRCLE_BEGIN_in_media_expression1145 = new BitSet(new ulong[]{0x10000000000000UL,0x40000000000UL});
		public static readonly BitSet _media_feature_in_media_expression1147 = new BitSet(new ulong[]{0x90000UL});
		public static readonly BitSet _COLON_in_media_expression1150 = new BitSet(new ulong[]{0x114030000000020UL,0x108025028100E010UL,0x460UL});
		public static readonly BitSet _expr_in_media_expression1152 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CIRCLE_END_in_media_expression1156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_media_feature1183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLACEMENTTOKEN_in_media_feature1197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PAGE_SYM_in_page1224 = new BitSet(new ulong[]{0x2080000UL});
		public static readonly BitSet _pseudo_page_in_page1226 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CURLY_BEGIN_in_page1229 = new BitSet(new ulong[]{0x110000004000000UL,0x400040000000000UL});
		public static readonly BitSet _declaration_in_page1232 = new BitSet(new ulong[]{0x110000004000000UL,0x420040000000000UL});
		public static readonly BitSet _SEMICOLON_in_page1234 = new BitSet(new ulong[]{0x110000004000000UL,0x400040000000000UL});
		public static readonly BitSet _CURLY_END_in_page1239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_pseudo_page1280 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENT_in_pseudo_page1282 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_operator1314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_unary_operator1349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_unary_operator1365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STAR_in_property1394 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENT_in_property1398 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _IMPORTANT_COMMENTS_in_property1400 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _REPLACEMENTTOKEN_in_property1424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectors_group_in_ruleset1454 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CURLY_BEGIN_in_ruleset1460 = new BitSet(new ulong[]{0x110000004000000UL,0x400040000000000UL});
		public static readonly BitSet _declaration_in_ruleset1467 = new BitSet(new ulong[]{0x110000004000000UL,0x420040000000000UL});
		public static readonly BitSet _SEMICOLON_in_ruleset1469 = new BitSet(new ulong[]{0x110000004000000UL,0x400040000000000UL});
		public static readonly BitSet _IMPORTANT_COMMENTS_in_ruleset1475 = new BitSet(new ulong[]{0x100000004000000UL});
		public static readonly BitSet _CURLY_END_in_ruleset1482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selector_in_selectors_group1523 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _COMMA_in_selectors_group1526 = new BitSet(new ulong[]{0x140000000C1000UL,0x500040100000000UL});
		public static readonly BitSet _selector_in_selectors_group1528 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _simple_selector_sequence_in_selector1559 = new BitSet(new ulong[]{0x400000000002UL,0x200000000UL,0x20010UL});
		public static readonly BitSet _combinator_simple_selector_sequence_in_selector1562 = new BitSet(new ulong[]{0x400000000002UL,0x200000000UL,0x20010UL});
		public static readonly BitSet _combinator_in_combinator_simple_selector_sequence1601 = new BitSet(new ulong[]{0x140000000C1000UL,0x500040100000000UL});
		public static readonly BitSet _simple_selector_sequence_in_combinator_simple_selector_sequence1603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_combinator1644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GREATER_in_combinator1655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TILDE_in_combinator1666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whitespace_in_combinator1687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_whitespace1728 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _universal_in_simple_selector_sequence1783 = new BitSet(new ulong[]{0x140000000C1000UL,0x500040100000000UL,0x20000UL});
		public static readonly BitSet _type_selector_in_simple_selector_sequence1793 = new BitSet(new ulong[]{0x140000000C1000UL,0x500040100000000UL,0x20000UL});
		public static readonly BitSet _whitespace_in_simple_selector_sequence1797 = new BitSet(new ulong[]{0x140000000C1002UL,0x500040100000000UL});
		public static readonly BitSet _hashclassatnameattribpseudonegation_in_simple_selector_sequence1806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hashclassatnameattribpseudonegation_in_simple_selector_sequence1848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLACEMENTTOKEN_in_hashclassatnameattribpseudonegation1878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hash_in_hashclassatnameattribpseudonegation1902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_in_hashclassatnameattribpseudonegation1922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atname_in_hashclassatnameattribpseudonegation1942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attrib_in_hashclassatnameattribpseudonegation1962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pseudo_in_hashclassatnameattribpseudonegation1982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _negation_in_hashclassatnameattribpseudonegation2002 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selector_namespace_prefix_in_type_selector2047 = new BitSet(new ulong[]{0x10000000000000UL,0x400000000000000UL});
		public static readonly BitSet _element_name_in_type_selector2051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_name_in_selector_namespace_prefix2085 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _PIPE_in_selector_namespace_prefix2088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_element_name2117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STAR_in_element_name2137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selector_namespace_prefix_in_universal2174 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _STAR_in_universal2178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CLASS_IDENT_in_class2207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SQUARE_BEGIN_in_attrib2246 = new BitSet(new ulong[]{0x10000000000000UL,0x400000100000000UL});
		public static readonly BitSet _selector_namespace_prefix_in_attrib2257 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENT_in_attrib2262 = new BitSet(new ulong[]{0x1000002008000000UL,0x8200000400000000UL,0x1UL});
		public static readonly BitSet _PREFIXMATCH_in_attrib2289 = new BitSet(new ulong[]{0x10000000000000UL,0x1000000000000000UL});
		public static readonly BitSet _SUFFIXMATCH_in_attrib2293 = new BitSet(new ulong[]{0x10000000000000UL,0x1000000000000000UL});
		public static readonly BitSet _SUBSTRINGMATCH_in_attrib2297 = new BitSet(new ulong[]{0x10000000000000UL,0x1000000000000000UL});
		public static readonly BitSet _EQUALS_in_attrib2301 = new BitSet(new ulong[]{0x10000000000000UL,0x1000000000000000UL});
		public static readonly BitSet _INCLUDES_in_attrib2305 = new BitSet(new ulong[]{0x10000000000000UL,0x1000000000000000UL});
		public static readonly BitSet _DASHMATCH_in_attrib2309 = new BitSet(new ulong[]{0x10000000000000UL,0x1000000000000000UL});
		public static readonly BitSet _IDENT_in_attrib2327 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _STRING_in_attrib2329 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _SQUARE_END_in_attrib2347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_pseudo2420 = new BitSet(new ulong[]{0x10000000080000UL});
		public static readonly BitSet _COLON_in_pseudo2424 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENT_in_pseudo2429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_pseudo2467 = new BitSet(new ulong[]{0x114030000080020UL,0x108025028100E010UL,0x460UL});
		public static readonly BitSet _COLON_in_pseudo2471 = new BitSet(new ulong[]{0x114030000080020UL,0x108025028100E010UL,0x460UL});
		public static readonly BitSet _functional_pseudo_in_pseudo2474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _beginfunc_in_functional_pseudo2515 = new BitSet(new ulong[]{0x10000040000000UL,0x1000020201002000UL});
		public static readonly BitSet _selectorexpression_in_functional_pseudo2517 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CIRCLE_END_in_functional_pseudo2519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_selectorexpression2561 = new BitSet(new ulong[]{0x10000040000002UL,0x1000020201002000UL});
		public static readonly BitSet _COLON_in_negation2594 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _NOT_in_negation2596 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CIRCLE_BEGIN_in_negation2598 = new BitSet(new ulong[]{0x140000000C0000UL,0x500000100000000UL});
		public static readonly BitSet _negation_arg_in_negation2601 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CIRCLE_END_in_negation2603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _universal_in_negation_arg2640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_selector_in_negation_arg2643 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hash_in_negation_arg2645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_in_negation_arg2647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attrib_in_negation_arg2649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pseudo_in_negation_arg2651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AT_NAME_in_atname2666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORTANT_COMMENTS_in_declaration2698 = new BitSet(new ulong[]{0x110000000000000UL,0x400040000000000UL});
		public static readonly BitSet _property_in_declaration2701 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _COLON_in_declaration2703 = new BitSet(new ulong[]{0x114030000000020UL,0x108025028100E010UL,0x460UL});
		public static readonly BitSet _expr_in_declaration2705 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _prio_in_declaration2707 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_stringoruri2747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _URI_in_stringoruri2767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ruleset_in_styleSheetrules2796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _media_in_styleSheetrules2798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _page_in_styleSheetrules2800 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyframes_in_styleSheetrules2802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _document_in_styleSheetrules2804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _wg_dpi_in_styleSheetrules2806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORTANT_SYM_in_prio2826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORTANT_COMMENTS_in_expr2856 = new BitSet(new ulong[]{0x114030000000020UL,0x108025028100E010UL,0x460UL});
		public static readonly BitSet _term_in_expr2859 = new BitSet(new ulong[]{0x11403A001000022UL,0x148025028100E010UL,0x460UL});
		public static readonly BitSet _termwithoperator_in_expr2862 = new BitSet(new ulong[]{0x11403A001000022UL,0x148025028100E010UL,0x460UL});
		public static readonly BitSet _operator_in_termwithoperator2902 = new BitSet(new ulong[]{0x114030000000020UL,0x108025028100E010UL,0x460UL});
		public static readonly BitSet _term_in_termwithoperator2905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_operator_in_term2943 = new BitSet(new ulong[]{0x10000000020UL,0x80210081000010UL,0x20UL});
		public static readonly BitSet _NUMBER_in_term2951 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _PERCENTAGE_in_term2959 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _LENGTH_in_term2967 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _RELATIVELENGTH_in_term2975 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _ANGLE_in_term2983 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _TIME_in_term2991 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _FREQ_in_term2999 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _RESOLUTION_in_term3007 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _SPEECH_in_term3015 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _IMPORTANT_COMMENTS_in_term3020 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _URI_in_term3052 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _IMPORTANT_COMMENTS_in_term3054 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _MSIE_EXPRESSION_in_term3088 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _IMPORTANT_COMMENTS_in_term3093 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _IDENT_in_term3122 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _IMPORTANT_COMMENTS_in_term3124 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _STRING_in_term3152 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _IMPORTANT_COMMENTS_in_term3154 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _hash_in_term3182 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _IMPORTANT_COMMENTS_in_term3184 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _REPLACEMENTTOKEN_in_term3209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_in_term3233 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _IMPORTANT_COMMENTS_in_term3235 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _HASH_IDENT_in_hash3268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _beginfunc_in_function3300 = new BitSet(new ulong[]{0x114030000010020UL,0x108025028100E010UL,0x460UL});
		public static readonly BitSet _expr_in_function3302 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CIRCLE_END_in_function3305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_beginfunc3337 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CIRCLE_BEGIN_in_beginfunc3339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_beginfunc3361 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CIRCLE_BEGIN_in_beginfunc3363 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TO_in_beginfunc3383 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CIRCLE_BEGIN_in_beginfunc3385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MSIE_IMAGE_TRANSFORM_in_beginfunc3406 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CIRCLE_BEGIN_in_beginfunc3408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KEYFRAMES_SYM_in_keyframes3438 = new BitSet(new ulong[]{0x10000000000000UL,0x1000000000000000UL});
		public static readonly BitSet _IDENT_in_keyframes3441 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _STRING_in_keyframes3443 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CURLY_BEGIN_in_keyframes3446 = new BitSet(new ulong[]{0x20004000000UL,0x80000000UL,0x40UL});
		public static readonly BitSet _keyframes_block_in_keyframes3448 = new BitSet(new ulong[]{0x20004000000UL,0x80000000UL,0x40UL});
		public static readonly BitSet _CURLY_END_in_keyframes3451 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyframes_selectors_in_keyframes_block3507 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _CURLY_BEGIN_in_keyframes_block3509 = new BitSet(new ulong[]{0x110000004000000UL,0x400040000000000UL});
		public static readonly BitSet _declaration_in_keyframes_block3512 = new BitSet(new ulong[]{0x110000004000000UL,0x420040000000000UL});
		public static readonly BitSet _SEMICOLON_in_keyframes_block3514 = new BitSet(new ulong[]{0x110000004000000UL,0x400040000000000UL});
		public static readonly BitSet _CURLY_END_in_keyframes_block3519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyframes_selector_in_keyframes_selectors3561 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _COMMA_in_keyframes_selectors3564 = new BitSet(new ulong[]{0x20000000000UL,0x80000000UL,0x40UL});
		public static readonly BitSet _keyframes_selector_in_keyframes_selectors3566 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _set_in_keyframes_selector3596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOCUMENT_SYM_in_document3619 = new BitSet(new ulong[]{0x800000000UL,0x1008000000000UL,0x2400UL});
		public static readonly BitSet _S_in_document3621 = new BitSet(new ulong[]{0x800000000UL,0x1008000000000UL,0x2400UL});
		public static readonly BitSet _document_match_function_in_document3624 = new BitSet(new ulong[]{0x2000000UL,0x1000000000000UL});
		public static readonly BitSet _S_in_document3626 = new BitSet(new ulong[]{0x2000000UL,0x1000000000000UL});
		public static readonly BitSet _CURLY_BEGIN_in_document3629 = new BitSet(new ulong[]{0x140000040C1000UL,0x500040100000000UL});
		public static readonly BitSet _ruleset_in_document3631 = new BitSet(new ulong[]{0x140000040C1000UL,0x500040100000000UL});
		public static readonly BitSet _CURLY_END_in_document3634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _URI_in_document_match_function3678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _URLPREFIX_FUNCTION_in_document_match_function3699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOMAIN_FUNCTION_in_document_match_function3720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REGEXP_FUNCTION_in_document_match_function3740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_synpred1_CssParser1723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _universal_in_synpred2_CssParser1778 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_selector_in_synpred3_CssParser1788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hashclassatnameattribpseudonegation_in_synpred4_CssParser1801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hashclassatnameattribpseudonegation_in_synpred5_CssParser1843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selector_namespace_prefix_in_synpred6_CssParser2042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selector_namespace_prefix_in_synpred7_CssParser2169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _universal_in_synpred8_CssParser2635 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace  WebGrease.Css 
